{"version":3,"sources":["ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/dragdrop/dragdrop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/grid-mrl-navigation.service.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/selection.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/slider/slider.common.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts"],"names":["quad","cubic","quart","quint","sine","expo","circ","back","base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","tslib_1.__values","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","getNodeSizeViaRange","range","node","overflow","isIE","isEdge","selectNodeContents","width","getBoundingClientRect","navigator","appVersion","indexOf","test","userAgent","isLeftClick","event","button","flatten","forEach","el","children","toArray","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","None","Asc","Desc","DefaultSortingStrategy","instance","_instance","sort","data","fieldName","dir","ignoreCase","valueResolver","_this","reverse","SortingDirection","arraySort","compareObjects","compareValues","a","an","undefined","bn","toLowerCase","compareFn","IgxSorting","expressions","sortDataRecursive","groupedRecordsByExpression","index","expression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","level","parent","grid","groupsRecords","group","groupRow","records","groupParent","groups","renderedRowHeight","group_1","group_1_1","groupItem","obj","IgxDataRecordSorting","tslib_1.__extends","IgxGrouping","groupBy","IncorrectPageIndex","IncorrectRecordsPerPage","FilteringExpressionsTree","operator","filteringOperands","find","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","ADD","DELETE","UPDATE","GridBaseAPIService","editCellState","editRowState","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","transactions","enabled","DataUtil","mergeTransactions","getAggregatedChanges","primaryKey","getTransactionLog","filter","type","TransactionType","map","rowID","rec","splice","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","createEditEventArgs","onCellEdit","emit","newValue","castToNumber","isEqual","oldValue","valueInTransactions","getAggregatedValue","summaryService","clearSummaryCache","updateData","selection","is_item_selected","deselect_item","select_item","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","transaction","_update_row","rowInEditMode","newData","transactionState","lastCommitedValue","getState","update_row","selected","hasSummarized","onRowEdit","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","page","fieldFilterIndex","prepare_filtering_expression","filter_global","condition","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","searchVal","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","collection","myExpr","should_apply_number_style","dataType","DataType","Number","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","rowId","hasRowInNonDeletedState","onRowDeleted","rowSelectable","deselectRows","checkHeaderCheckboxStatus","cdr","markForCheck","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","isLastPage","Injectable","And","Or","BaseFilteringStrategy","findMatchByExpression","cond","val","logic","matchRecord","matchOperand","operand","FilteringLogic","FilteringStrategy","TreeGridFilteringStrategy","filterImpl","cloneTreeGridRecord","filteredChildren","isFilteredOutParent","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","pipeTrigger","resetFilteredOutProperty","expandAllRecursive","expansionStates","expandedStates","updateNonProcessedRecord","set","Pipe","pure","String","Boolean","sorting","treeGridSort","hierarchicalData","hr","hierarchicalRecord","expanded","grouping","restoreGroups","groupData","restoreGroupsIterative","chain","pointer","added","shift","unshift","hierarchy","this_1","getHierarchy","expandState","expansion","isHierarchyMatch","defaultExpanded","Math","max","start","min","slice","recordsPerPage","countPages","countRecords","PagingError","isNaN","ceil","treeGridFilter","gRow","h1","h2","every","deleteRows","item","mergeHierarchicalTransactions","childDataKey","path","parent_1","this_2","findParentFromPath","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","window","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","Output","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","_super","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","RootExcelFolder","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","WorksheetsRelsExcelFolder","TablesExcelFolder","RootRelsFile","AppFile","CoreFile","WorkbookRelsFile","ThemeFile","WorksheetFile","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","WorksheetRelsFile","TablesFile","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","writeElement","folder","worksheetData","file","isEmpty","dictionary","dataDictionary","maxOutlineLevel","rowHeight","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","sOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","lastColumn","values","sortString","sortingExpression","sc","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Left","Center","Right","Top","Middle","Bottom","Point","y","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","HorizontalAlignment","verticalDirection","VerticalAlignment","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","justifyContent","alignItems","clone","ScrollStrategy","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","nativeElement","contains","positionTarget","clickOnPositionTarget","positionTargetRect","clientX","clientY","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","pipe","takeUntil","subscribe","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","setPosition","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","providedIn","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","Inject","DOCUMENT","NgZone","ConnectedPositioningStrategy","setStyle","startPoint","wrapperRect","round","BaseFitPositionStrategy","connectedFit","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_scrollContainer","_id","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","srcElement","_initialScrollTop","_initialScrollLeft","onWheel","stopImmediatePropagation","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","states","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","updateRecord","delete","lastActions","currentActions","currentActions_1","currentActions_1_1","actions_1","actions_1_1","action","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_closeOnOutsideClick","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","tslib_1.__decorate","IgxOverlayOutletDirective","IgxToggleModule","Up","Down","IGX_DROPDOWN_BASE","IgxSelectionAPIService","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_items","delete_item","delete_items","deselectedItem","deselect_items","has","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBase","dropDown","_focused","_selected","_index","_disabled","itemIndex","displayDensity","focused","items","clicked","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","IgxDropDownItemComponent","focusedState","focusedItem","focusedIndex","allowItemsFocus","focus","preventScroll","mousedownHandler","comfortable","cosy","compact","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","DisplayDensity","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","IgxDropDownBase","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","DropDownActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Navigate","navigateLast","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","notVirtual","ViewContainerRef","ViewChild","read","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","_height","destroyed","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfDirective","_template","_differs","resolver","totalItemCount","onChunkLoad","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","getVerticalScroll","igxForContainerSize","igxForOf","removeScrollEventListeners","getHorizontalScroll","func","vertical_1","verticalScrollHandler","isScrollable","vh","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","dc","createComponent","scrollDirection","touchAction","initSizesCache","hScroll","getElement","getIndexAt","_calculateChunkSize","input","embeddedView","_vcr","createEmbeddedView","$implicit","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","onHScroll","hvFactory","hvh","scrollOffset","ngOnChanges","changes","forOf","currentValue","igxForTrackBy","getTypeNameForDebugging","defaultItemSize","firstChange","_applyChanges","containerSize","_recalcOnContainerChange","diff","_updateSizeCache","run","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","maxVirtScrollTop","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","scr","isPrevItem","nextScroll","_adjustToIndex","scrollNext","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","rNode","rootNodes","nodeType","Node","ELEMENT_NODE","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","embView","cntx","context","getContextIndex","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","removeLastElem","oldElem","addLastElem","elemIndex","_updateHScrollOffset","_updateVScrollOffset","vScroll","dim","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","scrollAmount","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","scrollToItem","_scrollPosition","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","ngAfterViewInit","provide","useExisting","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","START","END","IgxHintDirective","_element","_position","IgxHintPosition","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","IgxInputGroupBase","nativeValidationAttributes","INITIAL","VALID","INVALID","IgxInputDirective","inputGroup","ngModel","formControl","_valid","IgxInputState","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","invalid","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","LINE","BOX","BORDER","SEARCH","IgxInputGroupComponent","_type","IgxInputGroupType","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","hasWarning","hints","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_cssClass","buttonClick","addClass","_color","color","_backgroundColor","_label","setAttribute","removeClass","Renderer2","IgxButtonModule","DEFAULT","DASHED","IgxDividerDirective","_inset","IgxDividerType","middle","vertical","baseMargin","IgxDividerModule","VERTICALLY","HORIZONTALLY","NONE","IgxDragDirective","zone","renderer","dragTolerance","ghostImageClass","hideBaseOnDrag","animateOnRelease","dragGhostHost","dragStart","dragEnd","returnMoveEnd","dragClicked","transitionProperty","_visibility","defaultReturnDuration","_dragStarted","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","bVisible","dragGhost","PointerEvent","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","touchEventsEnabled","marginTop","getComputedStyle","marginLeft","_dragOffsetX","getWindowScrollLeft","_dragOffsetY","getWindowScrollTop","_dragStartX","_dragStartY","setPointerCapture","dragStartArgs_1","originalEvent","owner","totalMovedX","totalMovedY","createDragGhost","dispatchDragEvents","onTransitionEnd","dispatchDropEvent","cloneNode","hostLeft","hostTop","visible","topDropArea","startX","startY","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","totalDraggedX","totalDraggedY","newPosX","newPosY","diffStartX","diffStartY","dropFinished","viewPortX","pageXOffset","viewPortY","pageYOffset","eventName","dragLeaveEvent","createEvent","initCustomEvent","IgxDropDirective","onEnter","onLeave","onDrop","droppable","dragover","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","drag","dragData","onDragDrop","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","match","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","_placeholder","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","multi","IgxMaskModule","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","RadioLabelPosition","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","ngAfterContentInit","_initRadioButtons","radioButtons","_selectedRadioButtonChanged","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","disconnect","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","observe","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","conditionList","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","InFilteringOperation","InDateFilteringOperation","toISOString","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","forRoot","ngModule","INITIALS","IMAGE","ICON","IgxAvatarComponent","_size","roundShape","src","AvatarType","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","label","setClasses","classes","Type","IgxBadgeModule","IGX_EXPANSION_PANEL_COMPONENT","IgxExpansionPanelBodyComponent","panel","_labelledBy","labelledBy","headerId","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","ICON_POSITION","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","onCollapsed","onExpanded","cb","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","horizontal","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","After","Before","Between","Specific","Weekdays","Weekends","MDAYS","stop","step","cur","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","Calendar","firstWeekDay","WEEKDAYS","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","IgxCalendarBase","CalendarSelection","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","ScrollMonth","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","valueDateOnly_1","selectRange","excludeDisabledDates","valueOf","isDateDisabled","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","YEAR","DECADE","IgxMonthPickerBase","_activeView","CalendarView","changeYear","yearsBtn","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","scroll","delta","generateYearRange","yearTracker","yearFormat","currentYear","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","onDateSelection","today","outOfRangeDates","specialDates","isWeekend","isInactive","isToday","isDisabled","isOutOfRange","isSpecial","IgxDaysViewComponent","animationAction","changeDaysView","onViewChanged","isKeydownTrigger","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","focusActiveDate","selectDay","animationDone","isLast","date_1","callback","toState","nextDate","focusPreviousUpDate","prevView","dayItem","focusNextDownDate","nextView","focusPreviousDate","focusNextDate","animations","transition","IgxCalendarComponent","hasHeader","_monthAction","startPrevMonthScroll","daysView","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","prevMonthBtn","nextMonthBtn","activeView","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","switchMap","skipLast","dacadeView","getFormattedDate","monthday","childClicked","viewChanged","changeMonth","monthsBtn","activeViewYear","monthsView","activeViewYearKB","onKeydownPageUp","activeDate","activeElement","onKeydownPageDown","onKeydownShiftPageUp","onKeydownShiftPageDown","monthView","yearView","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","OUTLINED","IgxCardComponent","IgxCardType","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","layout","IgxCardActionsLayout","IgxCardModule","NEXT","PREV","IgxCarouselComponent","loop","pause","navigation","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","slides","_total","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_currentSlide","_playing","carousel","current","Direction","_moveTo","prev","_resetInterval","setInterval","tick","IgxSlideComponent","IgxCarouselModule","IgxCheckboxComponent","LabelPosition","indeterminate","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","selectedChips","chipsList","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","IGX_COMBO_COMPONENT","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboFilteringPipe","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","inserts","currentHeader","insertFlag","valueKey","IgxComboFilterConditionPipe","ComboConnectedPositionStrategy","_callback","ItemHeights","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_filteringLogic","_filteringExpressions","_sortingExpressions","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","_itemsMaxHeight","searchInput","comboInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","IgxComboState","searchValue","_displayKey","clearSorting","onInputClick","checkMatch","handleKeyUp","displayKey","itemMatch","handleInputChange","cdrFlag","vContainer","getValueByValueKey","DataTypes","_stringifyItemID","_parseItemID","parse","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","newArray","expression2","headerExpression","searchVale","NgControl","_positionCallback","dataLoading","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","itemValue","oldSelectionEmit","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","IGX_DATE_PICKER_COMPONENT","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","DropDown","Dialog","IgxCalendarContainerComponent","mode","InteractionMode","onClose","onTodaySelection","onEscape","closeCalendar","triggerTodaySelection","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","calendarHeight","_destroy$","_onOpen","_onClose","_format","PredefinedFormatOptions","_modalOverlay","_dropDownOverlay","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","inputElement","editableInput","readonlyInput","_positionSettings","_dropDownOverlaySettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","handleSelection","calendar","modalOverlay","modalOverlaySettings","dropDownOverlay","dropDownOverlaySettings","dropDownTarget","editableInputGroup","templateDropDownTarget","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","NgModuleRef","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","_animaitonSettings","_closeOnOutsideSelect","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxRow","IgxCell","inlineEditorTemplate","parseFloat","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","initPointerState","initKeyboardState","addKeyboardRange","generateRange","primaryButton","ctrl","isActiveNode","isInMap","mrl","isActive","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","kbState","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","runTask","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","_moveSelectionChrome","Range","selectNode","IgxGridCellComponent","selectionService","_vIndex","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","hasColumnLayouts","setStartNavigationCell","colStart","onRangeSelection","_updateCRUDStatus","cellTemplate","defaultCellTemplate","gridID","columnLayoutChild","setEditMode","editable","gridRowSpan","gridColumnSpan","colEnd","isCellSelected","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","compositionStartHandler","compositionEndHandler","focusHandlerIE","focusOut","crud","editableCell","deleted","update","onDoubleClick","onCellClick","onContextMenu","handleAlt","isToggleKey","trigger_row_expansion_toggle","treeRow","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","_onFocusChange","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","checkboxElement","onCellEditCancel","highlightText","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowComponent","dragging","defaultCssClass","_rowSelection","_rowData","resolveClasses","visibleColumns","pinnedColumns","unpinnedColumns","showRowCheckboxes","rowDraggable","onCheckboxClick","triggerRowSelectionChange","isSelected","allRowsSelected","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","dragClass","defaultDragIndicatorCssClass","rowDragging","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","multiRowLayoutRowSize","topLevelParent","headerGroup","actualMinWidth","minWidth","headerCell","actualWidth","pinnedMaxWidth","calcPinnedContainerMaxWidth","getPinnedWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","getLargestCellWidth","reflow","onColumnResized","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","relativeColumns","getResizableColUnderEnd","combinedSpan","spanUsed","pinnedWidth","maxPinnedWidth","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","calcWidth","resizeScaled","IgxResizeHandleDirective","colResizingService","_dblClick","columnGroup","resizable","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMousedown","onMouseOver","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnMovingService","_column","_icon","BeforeDropTarget","AfterDropTarget","IgxColumnMovingDragDirective","cms","_ghostImageClass","dragGhostImgIconClass","dragGhostImgIconGroupClass","movable","groupable","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","draggedColumn","onColumnMoving","flexBasis","createTextNode","hostElemLeft","hostElemTop","childNodes","paddingLeft","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","IgxColumnComponent","_hVirtDir","hasMovableColumns","disablePinning","isDropTarget","clientRect","_dropPos","DropPosition","lastElementChild","innerText","horizontalScroll","wheelHandler","nextPinnedWidth","onColumnMovingEnd","moveColumn","IgxGridBodyDirective","IgxDatePipeComponent","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","ContainerPositioningStrategy","isTop","isTopInitialPosition","container","sortable","_calcWidth","headerClasses","headerGroupClasses","sortingIgnoreCase","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disableHiding","_disablePinning","_defaultMinWidth","_hasSummary","recalculateSummaries","resetCaches","check","resetSummaryHeight","filteringService","refreshExpressions","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","getCalcWidth","defaultMinWidth","minVal","pin","unpin","classRef","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","vIndex","allChildren","childrenVisibleIndexes","indexInCollection","columnLayout","ptr","lvl","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","rowsCount","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","getFilledChildColumnSizes","getPossibleColumnWidth","columnSized","targets","targetsSquashed","getUnpinnedWidth","unpinnedAreaMinWidth","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","populateVisibleIndexes","headerCellList","filterCellList","filterCell","headerGroupsList","autosize","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingRight","borderRightWidth","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","featureColumnsWidth","IgxColumnGroupComponent","QueryList","isChildrenWidthInPercent","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","disableHiding","isLastPinned","orderedCols","rs","ItemPropertyValueChanged","propName","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","Alphabetical","DisplayOrder","CustomFilteringStrategy","ColumnChooserBase","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","ColumnDisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","hideAllColumns","IgxColumnHidingModule","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","pinnable","IgxColumnPinningModule","IgxGridToolbarComponent","excelExporter","csvExporter","_overlaySettings","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","toolbar","toolbarCustomContentTemplate","IgxGridToolbarCustomContentDirective","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","isVirtualized","verticalScrollContainer","groupRowIndex","toggleGroup","isKeySupportedInGroupRow","activeNode","handleTabKey","getColumnByName","rootSummariesEnabled","orderedColumns","gridOrderedColumns","lastCol","alt","IgxGridNavigationService","parentVirtDir","offsetWidth","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnFullyVisible","forOfDir","headerContainer","displayContainerWidth","displayContainerScrollLeft","isColumnLeftFullyVisible","tslib_1.__spread","isRowInEditMode","findNextEditable","gridColumns","MoveDirection","getCellElementByVisibleIndex","isSummary","cellSelector","getCellSelector","selectedNode","isSummaryRow","nextElementSibling","performHorizontalScrollToCell","previousElementSibling","movePreviousEditable","currentColumnVisibleIndex","prevEditableColumnIndex","rowEditTabs","last","focusNextEditableTarget","moveNextEditable","nextEditableColumnIndex","rowElement","firstCell","allCells","verticalScroll","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowSelector","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","rows","getAllRows","goToLastBodyElement","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","allowFiltering","filterMode","FilterMode","quickFilter","shouldPerformVerticalScroll","targetRowIndex","targetRow","performVerticalScrollToCell","visibleColIndex","unpinnedIndex","nextIndex","tbody","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","allTabs","move","focusNextCell","cellIndex","lastEditableColumnIndex","firstEditableColumnIndex","targetCell","scrollIndex","IgxGridBaseComponent","icons","FILTERING_ICONS_FONT_SET","ExpressionUI","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","updateFilteringCell","updateFilterCellArea","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","resourceStrings","igx_grid_filter_operator_and","igx_grid_filter_operator_or","getChipLabel","datePipe","focusFirst","focusChip","filteringRow","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","prevExprUI","isFilteringExpressionsTreeEmpty","expressionTree","exprTree","WatchChanges","propDesc","privateKey","originalSetter","SimpleChange","IgxExcelStyleSearchComponent","clearInput","onCheckboxChange","itemSize","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","transformValue","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","openDatePicker","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","rootGrid","onClearButtonClick","closeDialog","overlayComponentId","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","onSortButtonClicked","sortDirection","sortButtonGroup","isColumnGrouped","clearSort","FilterListItem","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","columnMoving","Subscription","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","igx_grid_excel_boolean_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_text_filter","customDialog","populateColumnData","excelStyleSorting","se","excelStyleSearch","clearFilterClass","closeDropdown","onPin","onHide","onTextFilterClick","currentTarget","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","gridExpressionsTree","toDateString","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","filterListItem","selectAll","igx_grid_excel_select_all","blanks","igx_grid_excel_blanks","valueA","valueB","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","groupingExpressions","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","baseClass","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_hide","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_custom_filter","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","updateResourceStrings","currentStrings","newStrings","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","calculateGridHeight","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","columnValues","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","LEFT","TOP","RIGHT","BOTTOM","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","DragScrollDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","trunc","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","_getActionType","TemplateOutletAction","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","_viewRef","igxTemplateOutlet","tmplID","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","onChipSelected","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","IgxGridTransaction","rootLevelOnly","childLevelsOnly","rootAndChildLevels","excelStyleFilter","dataCell","summaryCell","hierarchicalRow","differs","viewRef","_resourceStrings","_emptyGridMessage","_emptyFilteredGridMessage","_isLoading","overlayIDs","autoGenerate","columnHidingTitle","columnPinningTitle","onRowSelectionChange","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onRowDragStart","onRowDragEnd","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_rowDrag","_columns","_filteringExpressionsTree","_maxLevelHeaderDepth","_columnHiding","_columnPinning","_keydownListener","_vScrollListener","_hScrollListener","_wheelListener","_allowFiltering","_filterMode","_hiddenColumnsText","_pinnedColumnsText","_autoSize","_ngAfterViewInitPassed","_multiRowLayoutRowSize","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_defaultTargetRecordNumber","_summaryPosition","GridSummaryPosition","_summaryCalculationMode","GridSummaryCalculationMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","resizeHandler","calculateGridSizes","_scrollWidth","filteringExpressionTreeClone","totalPages","previous","deselectAllRows","refreshGridState","theadRow","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","onStable","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","_horizontalForOfs","vfor","overlayID","keydownHandler","isNavigationKey","_setupServices","_setupListeners","destructor","ind","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","initPinning","isAttachedToDom","mutationsList","subtree","list","combineForOfCollections","summaryList","vertScrDC","$event","dataList","tmpOutlets","tmplOutlet","toggleColumnVisibility","getFeatureColumnsWidth","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","columnField","getCellByKey","pagingState","to","fromIndex","toIndex","newList","_resetColumnList","notifyOnChanges","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","nextPage","previousPage","isFirstPage","paginate","addRow","deleteRow","updateCell","isDefined","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","dataLength","_derivePossibleWidth","columnWidthCombined","allItems","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","paginator","footerBordersAndScrollbars","tfoot","computed","groupAreaHeight","renderedHeight","isPercentHeight","getPropertyValue","bodyHeight","getDataBasedBodyHeight","defaultTargetBodyHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","headerCheckboxContainer","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","getElementById","isPercentWidth","added_1","removed_1","hasScroll","repositionRowEditingOverlay","headerDragContainer","takeHidden","fc","fc_1","fc_1_1","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","setColumnEditState","onHeaderCheckboxClick","headerCheckbox","headerStatus","filteredItemsStatus","currSelection","atLeastOneSelected","notAllSelected","dataItem","updateHeaderCheckboxStatusOnFilter","selectedRows","selectRows","rowIDs","selectableRows","selectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","selectedData","selectionMap","tuple","selectionMap_1","selectionMap_1_1","temp_1","temp_1_1","getSelectedData","newSelectionAsSet","oldSelectionAsSet","navigateTo","childGridsData","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","GridKeydownTargetType","summaryCells","prevRow","nextRow","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","trackColumnChanges","increment","rebuildCache","matchInfo","currentPinnedWidth","newUnpinnedCols","delayScrolling","filteredSortedData","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","numberPipe","dataRow","occurenceIndex","searchIndex","_group","getGroupByRecords","rowEditingOverlay","toggleRowEditingOverlay","configureRowEditingOverlay","rowEditingWheelHandler","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","columnindex","ri","currentCell","hasHorizontalScroll","unpinnedWidth","_restoreVirtState","rowForOf","gridScrLeft","cachedViewLoaded","tmplId","templateID","index_1","summaryRow","IgxSummaryDataPipe","IgxProcessBarTextTemplateDirective","CENTER","DANGER","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","IgxTextAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxProgressType","IgxCircularProgressBarComponent","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_circleRadius","_circumference","PI","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","_svgCircle","percentage","IgxProgressBarModule","IgxGridCellStylesPipe","callbackOrValue","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxListBase","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","HammerGesturesManager","doc","hammerOptions","inputClass","TouchInput","recognizers","Pan","Pinch","enable","Rotate","Swipe","DIRECTION_HORIZONTAL","_hammerManagers","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","IgxListItemComponent","_panState","IgxListPanState","panOffset","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxListComponent","isLoading","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListModule","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","dropArea","ghost","rowRect","ghostCells","IgxDragIndicatorIconDirective","IgxRowDragModule","IgxGridCommonModule","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","clear_groupby","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","isEditRowInGroup","rowState","groupsExpanded","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGroupByRowTemplateDirective","IgxGroupAreaDropDirective","hovered","columnBelongsToGrid","isGrouped","column_1","closestParentByAttr","attr","closestGridID","IgxGridMRLNavigationService","startNavigationCell","applyNavigationCell","navDirection","oppositeDir","NavigationDirection","focusCellUpFromLayout","focusCellDownFromLayout","isParentColumnFullyVisible","scrollPos","getChildColumnScrollPositions","rightScroll","leftScroll","focusNextCellFromLayout","focusPrevCellFromLayout","nextElementColumn","_moveFocusToCell","nextCell_1","currCell","_focusCell","lastVisibleIndex_1","prevElementColumn","movePrev","isGroupRow","currentRowStart","currentColStart","parentIndex","upperElementColumn","layoutRowEnd_1","moveNext","currentRowEnd","cellElement","currentColEnd","nextElement","layoutSize_1","prevElement","cellRowStart","layouts","lastLayout","lastLayoutChildren","indexInLayout","allBlocks","getColumnLayoutSelector","firstLayout","targetCol","getColunmByVisibleIndex","parentVIndex","childSizes","_isGroupRecordAt","getVerticalScrollPositions","topOffset","verticalDCTopOffset","rowBottom","isPrevious","rowTop","cellElem","gridBoundingClientRect","diffTop","diffBottom","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","onGroupingDone","dragIndicatorIconTemplate","_gridAPI","oldExpressions","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","clearGrouping","_getStateForGroupRow","_toggleGroup","isGroupByRecord","toggleAllGroupRows","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","groupByRecord","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","groupTemplate","hideGroupedColumns","_setupNavigationService","source_1","IgxGridSortingPipe","IgxGridPreGroupingPipe","IgxGridPostGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","IgxGridSummaryPipe","flatData","summaryPosition","summaryPipeTrigger","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridModule","IgxTreeGridAPIService","processedRootRecords","expand_row","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","loadChildrenOnDemand","hasChildrenKey","onRowToggle","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","_expansionStates","loadingRows","cloneMap","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRowID","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridRowComponent","_treeRow","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onIndicatorFocus","onLoadingDblClick","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxTreeGridSummaryPipe","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalSelectionAPIService","hSelection","add_sub_item","rootID","selItem","get_sub_item","clear_sub_item","IgxHierarchicalGridNavigationService","parentGrid","getClosestElemByTag","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getChildGrids","g","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","cellSelector_1","_focusScrollCellInView","targetIndex_1","scrTopPosition","cellSelector_2","targetIndex_2","rowIsVisible","gridTop","_getMaxTop","scrGrid","getNextScrollable","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastColumn","isLastSummaryRow","virt","isNextChild","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","focusNextRow","childContainer","focusNextChildDOMElem","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","selNode","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","scrTop","scrWith","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nonScrollable","parentInfo","nextParentGrid","nextParentElem","getNextScrollableDown","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","inChild","cellSelector_3","cell_2","rIndex_1","horizontalScrollGridToIndex","callBackFunc","scrollable","containerTop","endIsVisible","sourceElem","targetTag","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseComponent","transactionFactory","_expandChildren","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","childRowIslands","childGrids","registerChildRowIsland","rowIsland","getChildRowIsland","currPath","pathElem","childrenForLayout","rowIslandKey","inDepth","layoutMap","getParentRowId","registerChildGrid","getChildGridByID","IgxRowIslandAPIService","unset","oldId","unsetChildRowIsland","rowIslandAPI","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","nestedColumns","colsArray","topCols","updateColumnList","IgxChildGridRowComponent","selectionAPI","hGrid","ch","_handleLayoutChanges","childRow","l","IgxHierarchicalGridComponent","childLayoutKeys","highlightedRowID","_hierarchicalState","h_id","childGridTemplates","updateParentSizes","hierarchicalState","hg_verticalScrollHandler","hg_horizontalScrollHandler","cachedData","recalcColSizes","allLayoutList","colLength","hasExpandableChildren","headerHierarchyExpander","getDefaultExpanderWidth","isRowHighlighted","isHierarchicalRecord","trackChanges","moveView","rootHeight","topDiff","collapseAllRows","viewCreatedHandler","viewMovedHandler","relatedGrid","vScr","hScr","inDeph","onContainerScroll","hadScrollbar","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","persistFocusedCell","IgxHierarchicalRowComponent","hselection","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","enableGestures","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","css","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","setElementStyle","getDrawerWidth","Renderer","IgxNavigationDrawerModule","IgxSliderThumbComponent","_elementRef","_isActiveLabel","onThumbValueChange","onChange","fromHandler","thumbBounderies","thumbCenter","onPan","mouseX","updateThumbValue","onFocusListener","showThumbLabel","continuous","_timer","hideThumbLabel","thumbLabelVisibilityDuration","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","SLIDER","RANGE","FROM","TO","IgxSliderComponent","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_countinuous","_labels","SliderType","thumbs","slierClass","thumb","SliderHandle","lowerValue","labelsViewEnabled","upperValue","labels","updateTrack","calculateStepDistance","positionHandlesAndUpdateTrack","setTickInterval","disable","lowerBound","updateLowerBoundAndMinTravelZone","upperBound","updateUpperBoundAndMaxTravelZone","_lowerBound","valueToFraction","_upperBound","isRange","lower","upper","validateInitialValue","findClosestThumb","thumbTo","thumbFrom","showThumbLabels","hideThumbLabels","toggleThumbLabels","onPanListener","onPanStart","onPanEnd","onTapListener","onTap","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","positionHandle","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","handle","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","ticks","positions","pMin","pMax","positionGap","trackLeftIndention","track","unsubscriber","merge","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","tabs","panels","_selectedPanelHandler","_deselectPanel","selectedTab","tab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_tabTemplate","tabTemplate","_changesCount","relatedPanel","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","IgxTabItemComponent","_tabs","_nativeTabItem","onResize","selectedIndicator","nativeTabItem","relatedGroup","focusDelay","isLeftArrow","tabsArray","IgxRightButtonStyleDirective","getRightButtonStyle","ButtonStyle","viewPortWidth","viewPort","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","transformContentAnimation","tabItem","relatedTab","transformIndicatorAnimation","onTabItemSelected","tabElement","viewPortOffsetWidth","contentOffset","tabsContainer","contentsContainer","FIXED","CONTENTFIT","IgxTabsComponent","tabsType","onTabItemDeselected","_selectedIndex","setSelectedGroup","iconLabelFound","TabsType","selectedGroupHandler","prevSelectedIndex","deselectGroup","_groupChanges$","resetSelectionOnCollectionChanged","selectGroupByIndex","selectableGroup","selectedTabItem","tabsArray_1","tabsArray_1_1","IgxTabsModule","IGX_TIME_PICKER_COMPONENT","IgxItemListDirective","timePicker","nextItem","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","ampmList","hourList","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","TimeDisplayFormatPipe","hour","amPM","maskAmPM","sections","showHoursList","showMinutesList","showAmPmList","prompt","regExp","hourVal","minutesVal","TimeInputFormatPipe","cleared","HOURS_POS","MINUTES_POS","AMPM_POS","TimePickerHammerConfig","IgxTimePickerComponent","itemsDelta","_hourItems","_minuteItems","_ampmItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_isHourListLoop","_isMinuteListLoop","_hourView","_minuteView","_ampmView","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","_mask","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateAmPm","_dialogOverlaySettings","spinOnEdit","_input","_onDropDownClosed","onKeydownSpace","onAltArrowDown","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroHour","leadZeroMinute","itemsCount","formattedMinute","formattedHour","minute","_updateHourView","_updateMinuteView","_updateAmPmView","_addEmptyItems","hourItemsCount","minuteItemsCount","_getSelectedTime","_convertMinMaxValue","_dateFromModel","_isEntryValid","validH","validM","re","validHourEntries","validMinuteEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","posStrategy","hourIntoView","minuteIntoView","ampmIntoView","time","hoursInView","minutesInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","displayVal","IgxTimePickerModule","IgxToastComponent","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","IgxToastPosition","mapPositionToClassName","IgxToastModule","IgxSelectGroupComponent","IgxSelectItemComponent","SelectPositioningStrategy","_selectDefaultSettings","defaultWindowToListOffset","positionAndScrollBottom","outBoundsAmount","listContainerBoundRect","positionNoScroll","CURRENT_POSITION_Y","itemTextToInputTextDiff","positionAndScrollTop","getItemsOutOfView","currentScroll","remainingScroll","listOutOfBounds","elementContainer","returnVals","Amount","inputRect","LIST_HEIGHT","itemTextPadding","itemTextIndent","point","itemElement","X","Y","getFirstItemElement","inputHeight","itemBoundRect","itemTopListOffset","inputFontSize","fontSize","numericInputFontSize","itemFontSize","inputTextToInputTop","itemTextToItemTop","CURRENT_BOTTOM_Y","OUT_OF_BOUNDS","itemLeftPadding","textIndent","numericLeftPadding","numericTextIndent","selectItemPaddingHorizontal","IgxSelectToggleIconDirective","IgxSelectComponent","itemText","Promise","resolve","manageRequiredAsterisk","IgxSelectItemNavigationDirective","inputStream","clearStream$","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","IgxSelectModule","changei18n","getCurrentResourceStrings","SMALL","MEDIUM","LARGE"],"mappings":"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","sourcesContent":["enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../main';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (isIE() || isEdge()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (isIE() || isEdge()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n        'home', 'end', 'space', 'spacebar', ' '].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set(['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n                                'home', 'end', 'space', 'spacebar', ' ']);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], expressions: ISortingExpression[], level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null, groupsRecords: any[] = []): T[] {\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            if (level < expressions.length - 1) {\n                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata, grid, groupsRecords));\n            } else {\n                for (const groupItem of group) {\n                    metadata.push(groupRow);\n                    result.push(groupItem);\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { IgxSorting } from './sorting-strategy';\n\nexport interface IGroupByResult {\n    data: any[];\n    metadata: IGroupByRecord[];\n}\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], expressions: ISortingExpression[], grid?: any, groupsRecords?: any[]): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, expressions, 0, null, metadata, grid, groupsRecords);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\n\nexport declare interface IFilteringExpressionsTree {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @returns State of the record if any\n     */\n    getState(id: any): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        const valueInTransactions = this.grid.transactions.getAggregatedValue(cell.id.rowID, true);\n        if (valueInTransactions) {\n            cell.value = valueInTransactions[cell.column.field];\n            cell.rowData = valueInTransactions;\n        }\n\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n            if (this.grid.selection.is_item_selected(this.grid.id, cell.id.rowID)) {\n                this.grid.selection.deselect_item(this.grid.id, cell.id.rowID);\n                this.grid.selection.select_item(this.grid.id, args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const lastCommitedValue = grid.transactions.getState(row.id) ?\n                grid.transactions.getState(row.id).value : null;\n            row.data = lastCommitedValue ? Object.assign(row.data, lastCommitedValue) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selection.is_item_selected(grid.id, row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            grid.transactions.endPending(false);\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selection.deselect_item(grid.id, row.id);\n            grid.selection.select_item(grid.id, newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        if (fieldName) {\n            const column = this.get_column_by_name(fieldName);\n            if (!column) {\n                return;\n            }\n        }\n\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        //  first deselect row then delete it\n        if (grid.rowSelectable && grid.selection.is_item_selected(grid.id, rowId)) {\n            grid.deselectRows([rowId]);\n        } else {\n            grid.checkHeaderCheckboxStatus();\n        }\n\n        this.deleteRowFromData(rowId, index);\n        (grid as any)._pipeTrigger++;\n        grid.cdr.markForCheck();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        const grid = this.grid;\n        return grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        const grid = this.grid;\n        return grid.data.length % grid.perPage === 0 && grid.isLastPage && grid.page !== 0;\n    }\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IGroupByResult, IgxGrouping } from './grouping-strategy';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByExpandState, IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { TreeGridFilteringStrategy } from '../grids/tree-grid/tree-grid.filtering.pipe';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null, groupsRecords: any[] = []): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state.expressions, grid, groupsRecords);\n    }\n    public static restoreGroups(groupData: IGroupByResult, state: IGroupingState): any[] {\n        if (state.expressions.length === 0) {\n            return groupData.data;\n        }\n        return this.restoreGroupsIterative(groupData, state);\n    }\n    private static restoreGroupsIterative(groupData: IGroupByResult, state: IGroupingState): any[] {\n        const metadata = groupData.metadata;\n        const result = [], added = [];\n        let chain: any[];\n        let i = 0, j;\n        let pointer: IGroupByRecord;\n        let expanded: boolean;\n        for (i = 0; i < metadata.length;) {\n            chain = [metadata[i]];\n            pointer = metadata[i].groupParent;\n            // break off if the parent is already added\n            while (pointer && added[0] !== pointer) {\n                chain.push(pointer);\n                if (added[0] && added[0].level === pointer.level) {\n                    added.shift();\n                }\n                pointer = pointer.groupParent;\n            }\n            for (j = chain.length - 1; j >= 0; j--) {\n                result.push(chain[j]);\n                added.unshift(chain[j]);\n                const hierarchy = this.getHierarchy(chain[j]);\n                const expandState: IGroupByExpandState = state.expansion.find((s) =>\n                    this.isHierarchyMatch(s.hierarchy || [{ fieldName: chain[j].expression.fieldName, value: chain[j].value }], hierarchy));\n                expanded = expandState ? expandState.expanded : state.defaultExpanded;\n                if (!expanded) {\n                    break;\n                }\n            }\n            added.shift();\n            j = Math.max(j, 0);\n            const start = chain[j].records.findIndex(r => r === groupData.data[i]);\n            const end = Math.min(metadata.length - i + start, chain[j].records.length);\n            if (expanded) {\n                result.push(...chain[j].records.slice(start, end));\n            }\n            i += end - start;\n        }\n        return result;\n    }\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static treeGridFilter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        if (!state.strategy) {\n            state.strategy = new TreeGridFilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        const hierarchy: Array<IGroupByKey> = [];\n        if (gRow !== undefined && gRow.expression) {\n            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            while (gRow.groupParent) {\n                gRow = gRow.groupParent;\n                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            }\n        }\n        return hierarchy;\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        if (h1.length !== h2.length) {\n            return false;\n        }\n        return h1.every((level, index): boolean => {\n            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n        });\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n            const filteringState = {\n                expressionsTree: grid.filteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridFilter(rootRecords, filteringState);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\n\nexport interface ICsvExportEndedEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\n\nexport interface IExcelExportEndedEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/**\n * @hidden\n * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0 rectangle\n * if no target is provided\n * @param settings Overlay settings for which to calculate target rectangle\n */\nexport function getTargetRect(settings: PositionSettings): ClientRect {\n    let targetRect: ClientRect = {\n        bottom: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        width: 0\n    };\n\n    if (settings.target instanceof HTMLElement) {\n        targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n    } else if (settings.target instanceof Point) {\n        const targetPoint = settings.target as Point;\n        targetRect = {\n            bottom: targetPoint.y,\n            height: 0,\n            left: targetPoint.x,\n            right: targetPoint.x,\n            top: targetPoint.y,\n            width: 0\n        };\n    }\n\n    return targetRect;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden @internal */\nexport function getViewportRect(document: Document): ClientRect {\n    const width = document.documentElement.clientWidth;\n    const height = document.documentElement.clientHeight;\n    const scrollPosition = getViewportScrollPosition();\n\n    return {\n        top: scrollPosition.y,\n        left: scrollPosition.x,\n        right: scrollPosition.x + width,\n        bottom: scrollPosition.y + height,\n        width: width,\n        height: height,\n    };\n}\n\n/** @hidden @internal */\nexport function getViewportScrollPosition(): Point {\n    const documentElement = document.documentElement;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const horizontalScrollPosition = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n    return new Point(horizontalScrollPosition, verticalScrollPosition);\n}\n\n/** @hidden @internal*/\nexport function cloneInstance(object) {\n    const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n    clonedObj.settings = cloneValue(clonedObj.settings);\n    return clonedObj;\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, cloneInstance } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    private _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to the NgModule that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: NgModuleRef<any>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(ev.target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        const positionTargetRect = positionTarget.getBoundingClientRect();\n                        clickOnPositionTarget = ev.clientX >= positionTargetRect.left && ev.clientX <= positionTargetRect.right &&\n                                                ev.clientY >= positionTargetRect.top && ev.clientY <= positionTargetRect.bottom;\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  getTargetRect,\n  cloneInstance,\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, getViewportRect, getTargetRect } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            connectedFit.viewPortRect.left < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.right;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            connectedFit.viewPortRect.top < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return connectedFit.viewPortRect.left < leftBorder && rightBorder < connectedFit.viewPortRect.right;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return connectedFit.viewPortRect.top < topBorder && bottomBorder < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, connectedFit.viewPortRect.left - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.right);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, connectedFit.viewPortRect.top - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.bottom);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n        this._document.addEventListener('wheel', this.onWheel, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._document.removeEventListener('wheel', this.onWheel, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.srcElement) {\n            this._sourceElement = ev.srcElement;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n\n    private onWheel(ev: WheelEvent) {\n        ev.stopImmediatePropagation();\n        ev.preventDefault();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    public commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, true);\n        } else {\n            super.commit(data, id);\n        }\n        this.clear(id);\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../../core/utils';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    private _closeOnOutsideClick: boolean;\n    /**\n     * DEPRECATED. Determines whether the toggle should close when you click outside.\n     *\n     * ```typescript\n     * // get\n     * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`igxToggleAction 'closeOnOutsideClick' input is deprecated. Use 'overlaySettings' input object instead.`)\n    public get closeOnOutsideClick(): boolean {\n        return this._closeOnOutsideClick;\n    }\n    /**\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [closeOnOutsideClick]=\"'true'\"></div>\n     * ```\n     */\n    public set closeOnOutsideClick(v: boolean) {\n        this._closeOnOutsideClick = v;\n    }\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this._closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this._closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        return primaryKey ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return !this.isHeader && !this.disabled && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('mousedown', ['$event'])\n    mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit } from '@angular/core';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"width\"></div>'\n})\nexport class HVirtualHelperComponent {\n    @ViewChild('horizontal_container', { read: ViewContainerRef }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"height\"></div>'\n})\nexport class VirtualHelperComponent implements OnDestroy {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef }) public _vcr;\n    @Input() public itemsLength: number;\n\n    public set height(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._height = value;\n        this.cdr.detectChanges();\n    }\n\n    public get height() {\n        return this._height;\n    }\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    public destroyed;\n    private _height: number;\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            evt.preventDefault();\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService } from './for_of.sync.service';\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation: string;\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n\n    protected hScroll;\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected vh: ComponentRef<VirtualHelperComponent>;\n    protected hvh: ComponentRef<HVirtualHelperComponent>;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getVerticalScroll()) {\n            return true;\n        }\n        const scrollTop = this.getVerticalScroll().scrollTop;\n        const scrollHeight = this.getVerticalScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.getHorizontalScroll().removeEventListener('scroll', this.func)\n            );\n        } else {\n            const vertical = this.getVerticalScroll();\n            if (vertical) {\n                this._zone.runOutsideAngular(() =>\n                    vertical.removeEventListener('scroll', this.verticalScrollHandler)\n                );\n            }\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.vh.instance.height > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (this.hScroll) {\n                this.state.startIndex = this.getIndexAt(this.hScroll.scrollLeft, this.sizesCache, 0);\n            }\n            this.state.chunkSize = this._calculateChunkSize();\n            for (let i = 0; i < this.state.chunkSize && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    { $implicit: input, index: this.igxForOf.indexOf(input) }\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.vh = vc.createComponent(factory);\n\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.vh.instance.elementRef.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.vh.instance.elementRef.nativeElement;\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (!this.hScroll) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.hvh = vc.createComponent(hvFactory);\n                this.hvh.instance.width = totalSize;\n                this.hScroll = this.hvh.instance.elementRef.nativeElement;\n                this._zone.runOutsideAngular(() => {\n                    this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.hScroll.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            }\n\n            const scrollOffset = this.hScroll.scrollLeft -\n                (this.sizesCache && this.sizesCache.length ? this.sizesCache[this.state.startIndex] : 0);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.vh.instance.elementRef.nativeElement.scrollTop += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const curScrollTop = this.vh.instance.elementRef.nativeElement.scrollTop;\n        const maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && curScrollTop === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && curScrollTop === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && curScrollTop > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && curScrollTop < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.vh.instance.elementRef.nativeElement.scrollTop = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scr = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft : this.vh.instance.elementRef.nativeElement.scrollTop;\n        const isPrevItem = index < this.state.startIndex || scr > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hScroll.scrollLeft = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.vh.instance.elementRef.nativeElement.scrollTop = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft :\n            this.vh.instance.elementRef.nativeElement.scrollTop);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.hvh.instance.elementRef.nativeElement.scrollLeft -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns a reference to the vertical scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getVerticalScroll();\n     * ```\n     */\n    public getVerticalScroll() {\n        if (this.vh) {\n            return this.vh.instance.elementRef.nativeElement;\n        }\n        return null;\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        const position = this.igxForScrollOrientation === 'horizontal' ?\n            this.hScroll.scrollLeft :\n            this.vh.instance.elementRef.nativeElement.scrollTop;\n        let startIndex = this.getIndexAt(\n            position,\n            this.sizesCache,\n            0\n        );\n        if (position - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            position + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the horizontal scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getHorizontalScroll();\n     * ```\n     */\n    public getHorizontalScroll() {\n        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;\n    }\n\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        requestAnimationFrame(() => {\n            // check if height/width has changes in views.\n            this.recalcUpdateSizes();\n        });\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        for (let i = 0; i < this._embeddedViews.length; i++) {\n            const view = this._embeddedViews[i];\n            const rNode = view.rootNodes.find((node) => node.nodeType === Node.ELEMENT_NODE);\n            if (rNode) {\n                const h = rNode.offsetHeight ? rNode.offsetHeight : parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;\n                this.hScroll.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.vh.instance.destroyed) {\n                    this.vh.instance.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const scrollOffset = this.fixedUpdateAllElements(this._virtHeight - containerSize);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex  && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        const curScrollLeft = event.target.scrollLeft;\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(curScrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            this.dc.changeDetectorRef.detectChanges();\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                this.recalcUpdateSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const scr = this.vh.instance.elementRef.nativeElement;\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight =  this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && scr.scrollTop > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            scr.scrollTop = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n        this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.hScroll.style.width = this.igxForContainerSize + 'px';\n            this.hScroll.children[0].style.width = totalWidth + 'px';\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.vh.instance.height = this._calcHeight();\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.hScroll && this.hScroll.scrollLeft !== 0) {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.hScroll.scrollLeft);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll = this.vh.instance.elementRef.nativeElement;\n        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?\n            vScroll.scrollTop - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?\n            this.hScroll.scrollLeft - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : this.igxForItemSize;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncService: IgxForOfSyncService) {\n            super(_viewContainer, _template, _differs, resolver, cdr, _zone);\n        }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const scr = this.vh.instance.elementRef.nativeElement;\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (scr.scrollTop !== 0) {\n                    scr.scrollTop = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        requestAnimationFrame(() => {\n            this.recalcUpdateSizes();\n        });\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                const inScrollTop = this.igxForScrollOrientation === 'horizontal' ?\n                    this.hScroll.scrollLeft :\n                    this.vh.instance.elementRef.nativeElement.scrollTop;\n                startIndex = this.getIndexAt(\n                    inScrollTop,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                requestAnimationFrame(() => {\n                    this.recalcUpdateSizes();\n                });\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy, AfterViewInit {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective)\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n            (this.children.find(e => e.index === this._focusedItem.index) || null) :\n            null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBase) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBase;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBase;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBase;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBase;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getVerticalScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getVerticalScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        if (!this.virtDir && this.selectedItem) {\n            this.scrollToItem(this.selectedItem);\n        }\n        if (this.virtDir) {\n            this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.getVerticalScroll().scrollTop;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBase;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            this.selection.set(this.id, new Set([newSelection]));\n            if (!this.virtDir) {\n                if (oldSelection) {\n                    oldSelection.selected = false;\n                }\n                if (newSelection) {\n                    newSelection.selected = true;\n                }\n            }\n            if (event) {\n                this.toggleDirective.close();\n            }\n        }\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previosly but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else if (this._valid !== IgxInputState.INITIAL) {\n                this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            } else if (this._valid === IgxInputState.INITIAL && this.ngControl.value !== undefined && this.ngControl.invalid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    SEARCH\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input', ['$event'])\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab', ['$event'])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        this.target.width = this.parentElement.clientWidth + 'px';\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n    /**\n     *@hidden\n     */\n    private _type = 'flat';\n    /**\n     *@hidden\n     */\n    private _cssClass = 'igx-button';\n    /**\n     *@hidden\n     */\n    private _color: string;\n    /**\n     *@hidden\n     */\n    private _label: string;\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role') public role = 'button';\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton') set type(value: string) {\n        this._type = value || this._type;\n        this._renderer.addClass(this.nativeElement, `${this._cssClass}--${this._type}`);\n    }\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClass}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClass}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click',  ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IgxDropEnterEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropLeaveEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n    /**\n     * Whether the default drop behavior of the igxDrop directive should be canceled.\n     * Note: If you implement custom behavior and you use `animateOnRelease` for the igxDrag make sure to call 'event.drag.dropFinished();'\n     * to notify the igxDrag directive that it has been dropped so it animates properly.\n     */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\n@Directive({\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start\n     * By default the drag starts after the draggable element is moved by 5px\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * Sets a custom class that will be added to the `dragGhost` element.\n     * ```html\n     * <div igxDrag [ghostImageClass]=\"'dragGhost'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public ghostImageClass = '';\n\n    /**\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [dragGhostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragGhostHost = null;\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (returnMoveEnd)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public returnMoveEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragClicked)=\"dragClicked()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragClicked(){\n     *      alert(\"The elemented has been clicked!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragClicked = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.touchAction')\n    public touch = 'none';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.transitionProperty')\n    public transitionProperty = 'top, left';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibilty = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * @hidden\n     */\n    public set left(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.left = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get left() {\n        return parseInt(this.dragGhost.style.left, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public set top(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.top = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get top() {\n        return parseInt(this.dragGhost.style.top, 10);\n    }\n\n    /**\n     * Returns if the browser supports pointer events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let pointerEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * Returns if the browser supports touch events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let touchEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    protected _startX = 0;\n    /**\n     * @hidden\n     */\n    protected _startY = 0;\n\n    /**\n     * @hidden\n     */\n    protected dragGhost;\n    /**\n     * @hidden\n     */\n    protected _dragStarted = false;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetX;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetY;\n    /**\n     * @hidden\n     */\n    protected _dragStartX;\n    /**\n     * @hidden\n     */\n    protected _dragStartY;\n    /**\n     * @hidden\n     */\n    protected _pointerDownId = null;\n\n    /**\n     * @hidden\n     */\n    protected _clicked = false;\n    /**\n     * @hidden\n     */\n    protected _lastDropArea = null;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _removeOnDestroy = true;\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef, public zone: NgZone, public renderer: Renderer2) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.pointerEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'pointerdown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(this.element.nativeElement, 'pointermove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(this.element.nativeElement, 'pointerup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (this.touchEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'touchstart').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.dragGhost && this._removeOnDestroy) {\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        // Take margins because getBoundingClientRect() doesn't include margins of the element\n        const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n\n        this._dragOffsetX =\n            (this._startX - this.element.nativeElement.getBoundingClientRect().left - this.getWindowScrollLeft()) + marginLeft;\n        this._dragOffsetY =\n            (this._startY - this.element.nativeElement.getBoundingClientRect().top - this.getWindowScrollTop()) + marginTop;\n        this._dragStartX = this._startX - this._dragOffsetX;\n        this._dragStartY = this._startY - this._dragOffsetY;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until dragGhost is created.\n        if (this.pointerEventsEnabled) {\n            this.element.nativeElement.setPointerCapture(this._pointerDownId);\n        } else {\n            this.element.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * Perfmorm drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            const dragStartArgs: IDragStartEventArgs = {\n                originalEvent: event,\n                owner: this,\n                cancel: false\n            };\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    // We moved enough so dragGhost can be rendered and actual dragging to start.\n                    this.createDragGhost(event);\n                }\n                return;\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            this.left = this._dragStartX + totalMovedX;\n            this.top = this._dragStartY + totalMovedY;\n\n            this.dispatchDragEvents(pageX, pageY, event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the dragGhost and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this\n        };\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement) {\n                if (!this.animateOnRelease) {\n                    this.onTransitionEnd(null);\n                }\n\n                // dragging ended over a drop area. Call this after transition because onDrop might remove the element.\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n                // else the drop directive needs to call the dropFinished() method so the animation can perform\n            } else if (this.animateOnRelease &&\n                    (this.left !== Math.floor(this._dragStartX) || this.top !== Math.floor(this._dragStartY))) {\n                // If the start positions are the same as the current the transition will not execute.\n                // return the ghost to start position before removing it. See onTransitionEnd.\n                this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n                this.left = this._dragStartX;\n                this.top = this._dragStartY;\n            } else {\n                this.onTransitionEnd(null);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n        } else {\n            this.zone.run(() => {\n                this.dragClicked.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Create dragGhost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param event Pointer event required when the dragGhost is being initialized.\n     * @param node The Node object to be cloned.\n     */\n    protected createDragGhost(event, node: any = null) {\n        this.dragGhost = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        this.dragGhost.style.transitionDuration = '0.0s';\n        this.dragGhost.style.position = 'absolute';\n        const hostLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n        this.dragGhost.style.top = this._dragStartY - hostTop + 'px';\n        this.dragGhost.style.left = this._dragStartX - hostLeft + 'px';\n\n        if (this.ghostImageClass) {\n            this.renderer.addClass(this.dragGhost, this.ghostImageClass);\n        }\n\n        if (this.dragGhostHost) {\n            this.dragGhostHost.appendChild(this.dragGhost);\n        } else {\n            document.body.appendChild(this.dragGhost);\n        }\n\n        if (this.pointerEventsEnabled) {\n            // The dragGhost takes control for moving and dragging after it has been shown.\n            this.dragGhost.setPointerCapture(this._pointerDownId);\n            this.dragGhost.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.dragGhost.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n        }\n\n        if (this.animateOnRelease) {\n            // Transition animation when the dragGhost is released and it returns to it's original position.\n            this.dragGhost.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        }\n\n        // Hide the base after the dragGhost is created, because otherwise the dragGhost will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' && elementsFromPoint[i] !== this.dragGhost) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', eventArgs);\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n            if (this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            }\n\n            this._lastDropArea = topDropArea;\n            this.dispatchEvent(this._lastDropArea, 'igxDragEnter', eventArgs);\n        } else if (!topDropArea && this._lastDropArea) {\n            this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            this._lastDropArea = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        if (!this.dragGhost) {\n            return;\n        }\n\n        // Calculate the new dragGhost position to remain where the mouse is, so it doesn't jump\n        const totalDraggedX = this.left - this._dragStartX;\n        const totalDraggedY = this.top - this._dragStartY;\n        const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n        const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n        const diffStartX = this._dragStartX - newPosX;\n        const diffStartY = this._dragStartY - newPosY;\n        this.top = newPosX + totalDraggedX - diffStartX;\n        this.left = newPosY + totalDraggedY - diffStartY;\n    }\n\n    /**\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usully be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n     */\n    public dropFinished() {\n        if (this.animateOnRelease && this.dragGhost) {\n            this.updateDragRelativePos();\n\n            // Return the dragged element to the start. See onTransitionEnd next.\n            // Take margins becuase getBoundingClientRect() doesn't include margins\n            const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n            const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n            const newPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n            const newPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n\n            this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n            this.left = newPosX - marginLeft;\n            this.top = newPosY - marginTop;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if (this._dragStarted && !this._clicked) {\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this._dragStarted = false;\n            this.zone.run(() => {\n                this.returnMoveEnd.emit({\n                    originalEvent: event,\n                    owner: this\n                });\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint conider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            return document['msElementsFromPoint'](viewPortX, viewPortY);\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Othersie can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n@Directive({\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onEnter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable elemente has entered the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onEnter = new EventEmitter<IgxDropEnterEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onLeave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable elemente has left the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onLeave = new EventEmitter<IgxDropLeaveEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onDrop)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable elemente has been dropped in the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDrop = new EventEmitter<IgxDropEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n    }\n\n    ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) { }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropEnterEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onEnter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropLeaveEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onLeave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IgxDropEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.onDrop.emit(args);\n        });\n\n        if (!args.cancel) {\n            // To do for generic scenario\n            this._renderer.removeChild(event.detail.owner.element.nativeElement.parentNode, event.detail.owner.element.nativeElement);\n            this._renderer.appendChild(this.element.nativeElement, event.detail.owner.element.nativeElement);\n\n            setTimeout(() => {\n                event.detail.owner.dropFinished();\n            }, 0);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective],\n    exports: [IgxDragDirective, IgxDropDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public set placeholder(val: string) {\n        this._placeholder = val;\n        this.nativeElement.setAttribute('placeholder', this._placeholder);\n    }\n\n    public get placeholder(): string {\n        return this._placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _placeholder: string;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio') public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n                button.labelPosition = this._labelPosition;\n                button.disabled = this._disabled;\n                button.required = this._required;\n\n                if (this._value && button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;color:black');\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;color:black');\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, OnDestroy, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { Subscription } from 'rxjs';\n\nexport interface ITooltipShowEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape() {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        event.preventDefault();\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }];\n    }\n\n    public conditionList(): string[] {\n        return this.operations.map((element) => element.name);\n    }\n\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxBooleanFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxBooleanFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxDateFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxDateFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxNumberFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxNumberFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxStringFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxStringFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n\n/**\n * @hidden\n */\nexport class InFilteringOperation implements IFilteringOperation {\n    name = 'in';\n    isUnary = false;\n    iconName = 'is_in';\n    logic = (target: any, searchVal: Set<any>) => {\n        return searchVal.has(target);\n    }\n}\n\n/**\n * @hidden\n */\nexport class InDateFilteringOperation extends InFilteringOperation {\n    logic = (target: any, searchVal: Set<any>) => {\n        if (target instanceof Date) {\n            return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n        }\n        return searchVal.has(target);\n    }\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load â when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            const request = event.target as XMLHttpRequest;\n            if (request.status === 200) {\n                instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n            }\n        };\n\n        // error â when the request couldnât be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            const request = event.target as XMLHttpRequest;\n            throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, OnInit, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent implements OnInit {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n\n    ngOnInit() {\n        this.labelledBy = this.panel.headerId;\n        this.label = this.panel.id + '-region';\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase {\n\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     */\n    @Input()\n    public collapsed = true;\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent), { read: forwardRef(() => IgxExpansionPanelBodyComponent) })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent), { read: forwardRef(() => IgxExpansionPanelHeaderComponent) })\n    public header: IgxExpansionPanelHeaderComponent;\n\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel')\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective)\n    private _bannerActionTemplate: any;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent)\n    public bannerIcon: any;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../core/density';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach( (button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (!button.disabled && button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const i of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: ''};\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: ''};\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    private rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    public calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectedDates = value;\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return new Date();\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.selectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates === []) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                if (!this.isDateDisabled(value)) {\n                    this.selectDate(value);\n                }\n\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { ViewChild, ElementRef, HostBinding } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn')\n    public yearsBtn: ElementRef;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public dates: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.dates.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.dates.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.dates.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    @Input()\n    public value: Date | Date[];\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get selected(): boolean {\n        const date = this.date.date;\n\n        if (!this.value) {\n            return;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n        this._selected = (this.value as Date).getTime() === date.getTime();\n        } else {\n        this._selected = (this.value as Date[])\n            .some((each) => each.getTime() === date.getTime());\n        }\n\n        return this._selected;\n    }\n\n    public set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactiveCSS(): boolean {\n        return this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isTodayCSS(): boolean {\n        return this.isToday && !this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekendCSS(): boolean {\n        return this.isWeekend;\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecialCSS(): boolean {\n        return this.isSpecial;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck\n} from '@angular/core';\nimport { ICalendarDate } from '../../calendar';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { slideInLeft, slideInRight } from '../../animations/main';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase, ScrollMonth } from '../calendar-base';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        }\n    ],\n    animations: [\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanged = new EventEmitter<Date>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public nextDate: Date;\n\n    /**\n     * @hidden\n     */\n    public callback: (dates?, next?) => void;\n\n    /**\n     * @hidden\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public animationDone(event, isLast: boolean) {\n        if (isLast) {\n            if (this.monthScrollDirection !== ScrollMonth.NONE) {\n                this.scrollMonth$.next();\n            }\n\n            const date = this.dates.find((d) => d.selected);\n            if (date && !this.isKeydownTrigger) {\n                setTimeout(() => {\n                    date.nativeElement.focus();\n                }, parseInt(slideInRight.options.params.duration, 10));\n            } else if (this.callback && (event.toState === 'next' || event.toState === 'prev')) {\n                this.callback(this.dates, this.nextDate);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousUpDate(target, prevView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index - 7 > -1; index -= 7) {\n            const date = prevView ? dates[index] : dates[index - 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) - 7 < 0) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() - 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousUpDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDownDate(target, nextView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {\n            const date = nextView ? dates[index] : dates[index + 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) + 7 > this.dates.length - 1) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() + 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDownDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index > 0; index--) {\n            const date = dates[index - 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === 0) {\n            const dayItem = dates[0];\n            if (dayItem.isCurrentMonth) {\n                this.nextDate = this.calendarModel.timedelta(dayItem.date.date, 'day', -1);\n            } else {\n                this.nextDate = new Date(dayItem.date.date);\n            }\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n\n        for (let index = dates.indexOf(node); index < this.dates.length - 1; index++) {\n            const date = dates[index + 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === this.dates.length - 1) {\n            const dayItem = dates[this.dates.length - 1];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousUpDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDownDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase implements AfterViewInit {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('monthsBtn')\n    public monthsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('prevMonthBtn')\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('nextMonthBtn')\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * @hidden\n     */\n    get monthAction(): string {\n        return this._monthAction;\n    }\n    /**\n     * @hidden\n     */\n    set monthAction(val: string) {\n        this._monthAction = val;\n    }\n\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    private _monthAction = '';\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.daysView.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.daysView.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);\n        this._monthAction = 'prev';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);\n        this._monthAction = 'next';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.daysView.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.daysView.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.daysView.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewChanged(event) {\n        this.viewDate = this.calendarModel.timedelta(event, 'month', 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.monthsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(): void {\n        this.activeView = CalendarView.YEAR;\n        requestAnimationFrame(() => {\n            this.monthsView.dates.find((date) => date.isCurrentMonth).nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYearKB(event): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewYear();\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.daysView.selectedDates = this.selectedDates;\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() - 1;\n            if (month < 0) { month = 11; year -= 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        this.previousMonth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextMonth(true);\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() + 1;\n            if (month > 11) { month = 0; year += 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.daysView.animationAction = 'prev';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() - 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.daysView.animationAction = 'next';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() + 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.daysView && this.daysView.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date) {\n        const formatObject = {\n            monthView: () => this.activeViewYear(),\n            yearView: () => this.activeViewDecade(),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', {read: IgxMonthsViewComponent})\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input() public active: boolean;\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDesabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IgxDropEnterEventArgs,\n    IgxDropEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\n\n\nexport interface IBaseChipEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behaviour\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        this.dragDirective.dropFinished();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event.originalEvent,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event.originalEvent);\n        }\n    }\n    // End chip igxDrag behaviour\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behaviour\n    public onChipDragEnterHandler(event: IgxDropEnterEventArgs) {\n        if (this.dragDirective === event.drag || !event.dragData || !event.dragData.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.dragData.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IgxDropEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behaviour\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport {\n    IgxDropEnterEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    private selectedChips: IgxChipComponent[] = [];\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            this.selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (this.selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: this.selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        if (event.selected) {\n            this.selectedChips.push(event.owner);\n        } else if (!event.selected) {\n            this.selectedChips = this.selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: this.selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    Host,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return this.comboAPI.isRemote ? JSON.stringify(this.value) : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    protected get scrollContainer() {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.getVerticalScroll().scrollTop;\n        const scrollHeight = this.virtDir.getVerticalScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getVerticalScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getVerticalScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\n\n/** Custom strategy to provide the combo with callback on initial positioning */\nclass ComboConnectedPositionStrategy extends ConnectedPositioningStrategy {\n    private _callback: () => void;\n    constructor(callback: () => void) {\n        super();\n        this._callback = callback;\n    }\n\n    position(contentElement, size, document?, initialCall?) {\n        if (initialCall) {\n            this._callback();\n        }\n        super.position(contentElement, size);\n    }\n}\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID\n}\n\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _positionCallback: () => void;\n    private _onChangeCallback: (_: any) => void = noop;\n    private overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput')\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('comboInput')\n    public comboInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--emtpy\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective)\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#emptyTemplate' is deprecated.\\n` +\n        `Use \\`igxComboEmpty\\` directive instead.`)\n    @ContentChild('emptyTemplate', { read: TemplateRef })\n    private set oldEmptyTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.emptyTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeader\\` directive instead.`)\n    @ContentChild('headerTemplate', { read: TemplateRef })\n    private set oldHeaderTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#footerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboFooter\\` directive instead.`)\n    @ContentChild('footerTemplate', { read: TemplateRef })\n    private set oldFooterTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.footerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#itemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboItem\\` directive instead.`)\n    @ContentChild('itemTemplate', { read: TemplateRef })\n    private set oldItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.itemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#addItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboAddItem\\` directive instead.`)\n    @ContentChild('addItemTemplate', { read: TemplateRef })\n    private set oldAddItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.addItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeaderItem\\` directive instead.`)\n    @ContentChild('headerItemTemplate', { read: TemplateRef })\n    private set oldHeaderItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerItemTemplate = template;\n        }\n    }\n\n    @ViewChild('dropdownItemContainer')\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.valid === IgxComboState.VALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.valid === IgxComboState.INVALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets/Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public valid: IgxComboState = IgxComboState.INITIAL;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.virtDir;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        } else {\n            cdrFlag = true;\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getValueByValueKey(val: any): any {\n        if (!val && val !== 0) {\n            return undefined;\n        }\n        return this.valueKey ?\n            this.data.filter((e) => e[this.valueKey] === val)[0] :\n            this.data.filter((e) => e === val);\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.valueKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /**\n     * If the data source is remote, returns JSON.stringify(itemID)\n     * @hidden\n     * @internal\n     */\n    private _stringifyItemID(itemID: any) {\n        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;\n    }\n\n    private _parseItemID(itemID) {\n        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems([addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this.injector.get(NgControl, null);\n        this._positionCallback = () => this.dropdown.updateScrollPosition();\n        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);\n        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n    }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any): void {\n        // selectItems can handle Array<any>, no valueKey is needed;\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        this.dropdown.toggle(this.overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        this.dropdown.open(this.overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects an item using it's valueKey value\n     * @param itemID the valueKey of the specified item\n     * @param select If the item should be selected (true) or deselcted (false)\n     *\n     * ```typescript\n     * items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * // combo.valueKey === 'field'\n     * // items[n] === { field: 'Connecticut', state: 'New England'}\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        const itemValue = this.getValueByValueKey(itemID);\n        if (itemValue !== null && itemValue !== undefined) {\n            if (select) {\n                this.selectItems([itemValue], false, event);\n            } else {\n                this.deselectItems([itemValue], event);\n            }\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const oldSelectionEmit = Array.from(this.selection.get(this.id) || []);\n        const newSelectionEmit = Array.from(newSelection || []);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionEmit,\n            oldSelection: oldSelectionEmit,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            this._value = this.dataType !== DataTypes.PRIMITIVE ?\n                args.newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :\n                args.newSelection.join(', ');\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar')\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, CancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlay;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlay = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(IgxOverlayService) private _overlayService: IgxOverlayService, public element: ElementRef,\n        private _cdr: ChangeDetectorRef, private _moduleRef: NgModuleRef<any>) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxDatePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxDatePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     *An event that is emitted after the `IgxDatePickerComponent` is closed.\n    */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * An event that is emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInputGroup', { read: ElementRef })\n    protected editableInputGroup: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInput', { read: ElementRef })\n    protected editableInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ViewChild('readonlyInput', { read: ElementRef })\n    protected readonlyInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ContentChild(IgxInputDirective)\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n    private readonly calendarHeight = 400;\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlay: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    public getEditElement() {\n        let inputElement;\n        if (this.mode === InteractionMode.DropDown) {\n            inputElement = (this.editableInput) ? this.editableInput : this.input;\n        } else {\n            inputElement = (this.readonlyInput) ? this.readonlyInput : this.input;\n        }\n        return (inputElement) ? inputElement.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._dropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpened(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.editableInput) {\n            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        this.value = date;\n        this.onSelection.emit(date);\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        this.value = null;\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n        this._onChangeCallback(null);\n    }\n\n    /**\n     * Open the calendar.\n     *\n     * @hidden\n     */\n    public openDialog(): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, modalOverlay);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                let dropDownOverlay;\n\n                // dropdown overlay settings are modified via input\n                if (this.dropDownOverlaySettings !== undefined) {\n                    dropDownOverlay = this._dropDownOverlay;\n                } else {\n                    dropDownOverlay = this._dropDownOverlaySettings;\n                    let dropDownTarget;\n\n                    if (this.editableInputGroup) {\n                        dropDownTarget = this.editableInputGroup.nativeElement;\n                    } else {\n                        if (this.templateDropDownTarget) {\n                            // if the date picker is re-templated, set an element marked with #dropDownTarget as a target to the drop-down\n                            dropDownTarget = this.templateDropDownTarget.nativeElement;\n                        } else {\n                            throw new Error('There is no target element for the dropdown to attach. Mark an element with #dropDownTarget.');\n                        }\n                    }\n\n                    dropDownOverlay.positionStrategy.settings.target = dropDownTarget;\n                }\n\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, dropDownOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, dropDownOverlay);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n\n        this.value = date;\n        this.calendar.viewDate = date;\n        this._onChangeCallback(date);\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        this.calculateDate(event.target.value, event.type);\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog();\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                    this.value = newValue;\n                    this.invalidDate = '';\n                    this._onChangeCallback(newValue);\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event) {\n        this._initializeCalendarContainer(event.componentRef.instance);\n        this.collapsed = false;\n    }\n\n    private _onOpened(event): void {\n        this._onTouchedCallback();\n        this.onOpened.emit(this);\n\n        // TODO: remove this line after deprecating 'onOpen'\n        this._onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n\n        // TODO: remove this line after deprecating 'onClose'\n        this.onClose.emit(this);\n\n        if (this.getEditElement()) {\n            this.getEditElement().focus();\n        }\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent, IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule, IgxRippleModule, IgxMaskModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _animaitonSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._animaitonSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../grids/grid-base.component';\n\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        this.cell = this.createCell(cell);\n        this.cell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: this.cell.id,\n            rowID: this.cell.id.rowID,\n            oldValue: this.cell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n\n        if (this.rowEditing) {\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n\n            if (this.row && !this.sameRow(this.cell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = this.createCell(cell);\n                this.beginRowEdit();\n                return;\n            }\n        } else {\n            this.endRowEdit();\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        this._ranges.add(JSON.stringify(this.generateRange(node)));\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return this.isActiveNode(node) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode, mrl = false): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (mrl) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(): void {\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick } from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridEditEventArgs, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html'\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: any;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.isCellSelected();\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    protected focusHandlerIE;\n    protected focusOut;\n    private _highlight: IgxTextHighlightDirective;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone) { }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.addEventListener('pointerup', this.pointerup);\n\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n\n                // https://stackoverflow.com/q/51404782\n                this.focusHandlerIE = (e: FocusEvent) => this.onFocus(e);\n                this.focusOut = () => this.onBlur();\n                this.nativeElement.addEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.addEventListener('focusout', this.focusOut);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.removeEventListener('pointerup', this.pointerup);\n\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n                this.nativeElement.removeEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.removeEventListener('focusout', this.focusOut);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n            }\n            crud.end();\n            this.grid.cdr.markForCheck();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (this.grid.hasColumnLayouts) {\n            this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);\n        }\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick(event: MouseEvent) {\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n\n        const node = this.selectionNode;\n        const mrl = this.grid.hasColumnLayouts;\n        this.focused = true;\n        this.row.focused = true;\n\n        if (!this.selectionService.isActiveNode(node, mrl)) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid._onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.row.rowSelectable) {\n                    this.row.checkboxElement.toggle();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const v = this.crudService.cell;\n            const args = {\n                cellID: v.id,\n                rowID: v.id.rowID,\n                oldValue: v.value,\n                newValue: v.editValue,\n                cancel: false\n            } as IGridEditEventArgs;\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType, State } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-row',\n    templateUrl: './grid/grid-row.component.html'\n})\nexport class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowSelectable(): boolean {\n        return this.grid.rowSelectable;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowCheckboxes(): boolean {\n        return this.grid.showRowCheckboxes;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    public isSelected: boolean;\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n\n    constructor(public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n\n    /**\n     * @hidden\n     */\n    public onCheckboxClick(event) {\n        const newSelection = (event.checked) ?\n            this.selection.add_item(this.gridID, this.rowID) :\n            this.selection.delete_item(this.gridID, this.rowID);\n        this.grid.triggerRowSelectionChange(newSelection, this, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.isSelected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isSelected = this.rowSelectable ?\n            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :\n            this.selection.is_item_selected(this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        if (this.checkboxElement) {\n            this.checkboxElement.checked = this.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.minWidth)) {\n            this.column.width = this.column.minWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.reflow();\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n        this.column.grid.reflow();\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        if (column.pinned) {\n            const pinnedWidth = this.column.grid.getPinnedWidth(true);\n            const maxPinnedWidth = this.column.grid.calcPinnedContainerMaxWidth;\n\n            if (pinnedWidth + diff > maxPinnedWidth) {\n                diff = maxPinnedWidth - pinnedWidth;\n            }\n        }\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    TemplateRef,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostImageClass = 'igx-grid__drag-ghost-image';\n    private dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostImageClass = this._ghostImageClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.dragGhost && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createDragGhost(event) {\n        super.createDragGhost(event);\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n        }\n\n        this.dragGhost.style.height = null;\n        this.dragGhost.style.minWidth = null;\n        this.dragGhost.style.flexBasis = null;\n        this.dragGhost.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        const hostElemLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostElemTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.dragGhostImgIconClass);\n\n            this.dragGhost.insertBefore(icon, this.dragGhost.firstElementChild);\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        } else {\n            this.dragGhost.insertBefore(icon, this.dragGhost.childNodes[0]);\n\n            this.renderer.addClass(icon, this.dragGhostImgIconGroupClass);\n            this.dragGhost.children[0].style.paddingLeft = '0px';\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :\n                        this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface ContainerPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class ContainerPositioningStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: ContainerPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef,\n    AfterViewInit\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './grid.common';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand\n} from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { MRLColumnSizeInfo, MRLResizeColumnInfo } from '../data-operations/multi-row-layout.interfaces';\nimport { DisplayDensity } from '../core/displayDensity';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public groupable = false;\n    /**\n     * Sets/gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public editable = null;\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            if (this.grid) {\n                this.grid.resetCaches();\n                this.grid.endEdit(false);\n            }\n            // TODO: Simplify\n            this.check();\n            if (this.grid) {\n                this.grid.refreshSearch(true);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.reflow();\n                this.grid.filteringService.refreshExpressions();\n            }\n\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n            }\n        }\n    }\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disableHiding(): boolean {\n        return this._disableHiding;\n    }\n    /**\n     * Enables/disables hiding for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disableHiding(value: boolean) {\n        if (this._disableHiding !== value) {\n            this._disableHiding = value;\n            this.check();\n        }\n    }\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disablePinning(): boolean {\n        return this._disablePinning;\n    }\n    /**\n     * Enables/disables pinning for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disablePinning(value: boolean) {\n        if (this._disablePinning !== value) {\n            this._disablePinning = value;\n            this.check();\n        }\n    }\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public cellClasses: any;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * Gets formatter for the column.\n     * ```typescript\n     * let columnFormatter = this.column.formatter;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n        }\n    }\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     *\n     * class CustomSortingStrategy extends SortingStrategy {\n     * ...\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public grid: IgxGridBaseComponent;\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n     /**\n     * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnLayoutChild =  this.column.columnLayoutChild;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disableHiding = false;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective })\n    protected headTemplate: IgxCellHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate) {\n            this._headerTemplate = this.headTemplate.template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet =  col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                         (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                        (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n       const res = this.getFilledChildColumnSizes(children);\n       return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1});\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        const width = parseInt(this.width, 10);\n\n        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {\n            return false;\n        }\n\n        this._pinned = true;\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.cdr.detectChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach( x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.cdr.detectChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach( x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     *@hidden\n     */\n    protected check() {\n        if (this.grid) {\n            this.grid.markForCheck();\n        }\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * (this.grid.calcWidth - this.grid.featureColumnsWidth);\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || this.grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.columnGroup.headerTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * @hidden\n     * @memberof IgxColumnGroupComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n    }\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                   isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr);\n    }\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            this.grid.columns.filter(x => x.columnGroup).forEach( x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.disableHiding = true;\n            child.disablePinning = true;\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /**\n     *@hidden\n    */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n        .filter(x => !x.columnGroup && !x.hidden)\n        .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({column: child, index: vIndex});\n        });\n    }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nexport interface IValueChangedEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport interface IColumnVisibilityChangedEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, EventEmitter, Output, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {\n            return false;\n        }\n        return true;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton')\n    public columnHidingButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport')\n    public exportButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton')\n    public columnPinningButton;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent')\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid._onFocusChange.emit(args);\n        if (args.cancel) { return; }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const visibleColumnIndex = selection.activeElement && this.grid.columnList.filter(col => !col.hidden).map(c => c.visibleIndex)\n            .indexOf(selection.activeElement.column) !== -1 ? selection.activeElement.column : 0;\n        const activeNode = selection.activeElement ? Object.assign({}, selection.activeElement) : this.selectionNode;\n        activeNode.row = this.index;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, activeNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, activeNode);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey, activeNode);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;\n    }\n\n    private handleTabKey(shift: boolean, activeNode: ISelectionNode) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, activeNode);\n        } else {\n            if (this.index === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                const orderedColumns = this.grid.navigation.gridOrderedColumns;\n                const lastCol = orderedColumns[orderedColumns.length - 1];\n                activeNode.column = lastCol.columnLayoutChild ? lastCol.parent.visibleIndex : lastCol.visibleIndex;\n                this.grid.navigation.performTab(this.nativeElement, activeNode);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent, FilterMode } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\nimport { ISelectionNode } from '../core/grid-selection';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseComponent;\n\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n\n    get displayContainerScrollLeft() {\n        return Math.round(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) ?\n            this.grid.dataRowList.find((row) => row.index === rowIndex) : this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(visibleColumnIndex: number) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftFullyVisible(visibleColumnIndex) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        // go trough all columns in one cycle instead of\n        // splice().reverse().find()\n        const gridColumns = this.gridOrderedColumns;\n        const start = visibleColumnIndex;\n        let end = 0;\n        let step = 0;\n        let result = -1;\n        if (direction === MoveDirection.LEFT) {\n            end = 0;\n            step = -1;\n        } else if (direction === MoveDirection.RIGHT) {\n            end = gridColumns.length - 1;\n            step = 1;\n        }\n        for (let c = start; (c * step) <= end; c += step) {\n            const column = gridColumns[c];\n            if (column.editable) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public onKeydownArrowRight(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.grid.nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        const prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);\n        if (prevEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        this.focusNextEditableTarget(rowIndex, prevEditableColumnIndex);\n    }\n\n    public moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        const nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);\n        if (nextEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        this.focusNextEditableTarget(rowIndex, nextEditableColumnIndex);\n    }\n\n    public focusNextEditableTarget(rowIndex: number, columnIndex: number) {\n        if (this.isColumnFullyVisible(columnIndex) && this.isColumnLeftFullyVisible(columnIndex)) {\n            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, columnIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell = rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnFullyVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[0].focus();\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[0].focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[cells.length - 1].focus();\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {\n            // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n        this.grid.nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            if (this.isRowInEditMode(rowIndex) && this.grid.rowEditTabs.length) {\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            }\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.moveNextEditable(rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowRight(cell, selectedNode);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftFullyVisible(visibleIndex) : this.isColumnFullyVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftFullyVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n        if (visibleColumnIndex === 0) {\n            if (this.isRowInEditMode(rowIndex) && this.grid.rowEditTabs.length) {\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            }\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl,\n                    {\n                        row: rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.movePreviousEditable(rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowLeft(cell, selectedNode);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n            containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n            || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        this.grid.verticalScrollContainer.scrollTo(rowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                cb();\n            });\n    }\n\n    public performHorizontalScrollToCell(rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        this.grid.nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary).focus({ preventScroll: true });\n                }\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n            `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, QueryList } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first, tap } from 'rxjs/operators';\nimport { IgxGridNavigationService } from './grid-navigation.service';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private get allTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.grid.rowEditTabs;\n    }\n\n    private grid: IgxGridBaseComponent;\n    private navigationService: IgxGridNavigationService;\n\n    constructor(\n        @Inject(forwardRef(() => IgxGridBaseComponent)) grid,\n        public element: ElementRef,\n        @Inject(forwardRef(() => IgxGridNavigationService)) navigationService) {\n            this.grid = grid;\n            this.navigationService = navigationService;\n            this.navigationService.grid = grid;\n        }\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if (this.allTabs.length > 1) {\n            if ((this.allTabs.last ===  this && !event.shiftKey) ||\n                (this.allTabs.first ===  this && event.shiftKey)\n            ) {\n                this.move(event);\n            }\n        } else {\n            this.move(event);\n        }\n    }\n    private focusNextCell(rowIndex, cellIndex) {\n        const grid = this.grid as any;\n        grid.parentVirtDir.onChunkLoad.pipe(first(), tap(() => grid.markForCheck())).subscribe(() => {\n            grid.rowInEditMode.cells.find(c => c.visibleColumnIndex === cellIndex).element.nativeElement.focus();\n        });\n    }\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        const horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();\n        const targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        const targetCell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === targetIndex);\n        const scrollIndex = this.grid.hasColumnLayouts ? targetCell.column.parent.visibleIndex : targetIndex;\n        if (!targetCell ||\n            !this.navigationService.isColumnFullyVisible(scrollIndex)\n            || !this.navigationService.isColumnLeftFullyVisible(scrollIndex)) {\n            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);\n            horizontalScroll.scrollLeft =\n            this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.navigationService.getColumnUnpinnedIndex(scrollIndex));\n        } else {\n            targetCell.nativeElement.focus();\n        }\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    }\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxGridSortingPipe } from '../grid/grid.pipes';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        for (const icon of icons) {\n            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n            }\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n\n            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n            this.columnToExpressionsMap.set(columnId, expressionUIs);\n\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.getHorizontalScroll().scrollLeft += currentColumnRight - width;\n        } else {\n            forOfDir.getHorizontalScroll().scrollLeft = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(): boolean {\n        const expressionTree = this.grid.filteringExpressionsTree;\n        if (!expressionTree.filteringOperands || !expressionTree.filteringOperands.length) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilterOptions } from '../../../directives/filter/filter.directive';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    public searchValue: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective })\n    public searchInput: IgxInputDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective)\n    protected virtDir: IgxForOfDirective<any>;\n\n    constructor() { }\n\n    public ngAfterViewInit() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '28px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = this.transformValue(eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n\n    public openDatePicker(openDialog: Function) {\n        openDialog();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer')\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand,\n    InFilteringOperation,\n    InDateFilteringOperation\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSortingTemplate]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMovingTemplate]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHidingTemplate]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinningTemplate]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = Array.from(new Set(data.map(record =>\n                record[this.column.field] ? record[this.column.field].toDateString() : record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.uniqueValues = Array.from(new Set(data.map(record => record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        this.cdr.detectChanges();\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                if (this.column.dataType === DataType.Date) {\n                    filterTree.filteringOperands.push({\n                        condition: new InDateFilteringOperation(),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: new Set(selectedItems.map(d =>\n                            new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()))\n                    });\n                } else {\n                    filterTree.filteringOperands.push({\n                        condition: new InFilteringOperation(),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: new Set(selectedItems.map(e => e.value))\n                    });\n                }\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.populateColumnData();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.px')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridGroupByRowComponent } from '../grid/groupby-row.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { isIE } from '../core/utils';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent)\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent)\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        Object.entries(classList).forEach(([className, value]) => {\n            if (value) {\n                defaultClasses.push(className);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    get mrlBlockHeight() {\n        return this.grid.hasColumnLayouts && this.column.children && isIE() ? '100%' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.calculateGridHeight();\n        this.grid.cdr.detectChanges();\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([]).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                const columnValues = data.map(record => record[column.field]);\n                rowSummaries.set(column.field,\n                    column.summaries.operate(columnValues));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxGridSelectionService, ISelectionNode } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef, private selectionService: IgxGridSelectionService) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.selectionNode);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                    this.grid.navigation.navigateUp(row, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                    this.grid.navigation.navigateDown(row, this.selectionNode);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, ViewRef, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective)\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IChipSelectEventArgs, IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container')\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton')\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        this.chipsArea.chipsList.filter(chip => chip.selected = false);\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement)) &&\n                this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * Opens date-picker if condition is not unary\n    */\n    public openDatePicker(openDialog: Function) {\n        if (!this.expression.condition.isUnary) {\n            openDialog();\n        }\n    }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement && this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, chip: IgxChipComponent) {\n        if (this._cancelChipClick) {\n            return;\n        }\n\n        this._cancelChipClick = false;\n        chip.selected = !chip.selected;\n    }\n\n    /**\n     *  Event handler for chip selected event.\n     */\n    public onChipSelected(eventArgs: IChipSelectEventArgs, expression: IFilteringExpression) {\n        if (eventArgs.selected) {\n            if (this.chipsArea.chipsList) {\n                this.chipsArea.chipsList.forEach((chip) => {\n                    if (chip !== eventArgs.owner) {\n                        chip.selected = false;\n                    }\n                });\n            }\n            this.expression = expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        } else if (this.expression === expression) {\n            this.resetExpression();\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, chip: IgxChipComponent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            chip.selected = !chip.selected;\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                this.cdr.detectChanges();\n            }\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first, filter } from 'rxjs/operators';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService\n} from '../services/index';\nimport { IgxCheckboxComponent } from './../checkbox/checkbox.component';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, ContainerPositioningStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragIndicatorIconDirective } from './row-drag.directive';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridCellEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\n// TODO: to be deleted when onFocusChange event is removed #4054\nexport interface IFocusChangeEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface IGridKeydownEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport interface IRowDragEndEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\n\nexport interface IRowDragStartEventArgs extends CancelableEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n }\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements OnInit, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    private _observer: MutationObserver;\n    private _destroyed = false;\n    private overlayIDs = [];\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty()) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.summaryService.clearSummaryCache();\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n\n        if (this._ngAfterViewInitPassed) {\n            this.cdr.detectChanges();\n            this.calculateGridHeight();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n\n        this.selectionService.clear();\n        this._perPage = val;\n        this.page = 0;\n        this.endEdit(true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets whether the `IgxGridRowComponent` selection is enabled.\n     * By default it is set to false.\n     * ```typescript\n     * let rowSelectable = this.grid.rowSelectable;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this._rowSelection;\n    }\n\n    /**\n     * Sets whether rows can be selected.\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowSelectable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowSelectable(val: boolean) {\n        this._rowSelection = val;\n        if (this.gridAPI.grid && this.columnList) {\n\n            // should selection persist?\n            this.allRowsSelected = false;\n            this.deselectAllRows();\n            this.calculateGridSizes();\n            this.cdr.markForCheck();\n        }\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        if (this.gridAPI.grid && this.columnList) {\n            this.calculateGridSizes();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        this._rowEditable = val;\n        if (this.gridAPI.grid) {\n            this.refreshGridState();\n        }\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this._autoSize = false;\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                    this.cdr.markForCheck();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.width')\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    /**\n     * Sets the width of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [width]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set width(value: string) {\n        if (this._width !== value) {\n            this._width = value;\n            requestAnimationFrame(() => {\n                // Calling reflow(), because the width calculation\n                // might make the horizontal scrollbar appear/disappear.\n                // This will change the height, which should be recalculated.\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this._width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            if (this.calcHeight) {\n                this.calcHeight += value ? -FILTER_ROW_HEIGHT : FILTER_ROW_HEIGHT;\n            }\n            if (this._ngAfterViewInitPassed) {\n                if (this.maxLevelHeaderDepth) {\n                    this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                        (value && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n                }\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.filteringService.registerSVGIcons();\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (this.gridAPI.grid) {\n            this.summaryService.resetSummaryHeight();\n            this.endEdit(true);\n            this.calculateGridHeight();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onRowClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * @deprecated you should use onGridKeydown event\n     */\n    @Output()\n    @DeprecateProperty('onFocusChange event is deprecated. Use onGridKeydown event instead.')\n    public get onFocusChange(): EventEmitter<IFocusChangeEventArgs> {\n        return this._onFocusChange;\n    }\n\n    public set onFocusChange(val: EventEmitter<IFocusChangeEventArgs>) {\n        this._onFocusChange = val;\n    }\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n    * Emitted when start dragging a row.\n    * Return the dragged row.\n   */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n    */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent)\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<any>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList() {\n        const res = new QueryList<any>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n * @hidden\n */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('paginator', { read: ElementRef })\n    public paginator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { read: IgxGridForOfDirective })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckboxContainer')\n    public headerCheckboxContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer')\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckbox', { read: IgxCheckboxComponent })\n    public headerCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow')\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody')\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot')\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any>;\n\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef })\n    private defaultRowEditTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup).findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup);\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for virtualization to function when the grid is bound remotely.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ``\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    // TODO: Document\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    public allRowsSelected = false;\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    abstract data: any[];\n    abstract filteredData: any[];\n    // abstract dataLength;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n    /**\n     * @hidden\n     */\n    protected _keydownListener = null;\n    /**\n     * @hidden\n     */\n    protected _vScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _hScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _wheelListener = null;\n    protected _allowFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n    private resizeHandler;\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    protected _autoSize = false;\n    private _rowHeight;\n    protected _ngAfterViewInitPassed = false;\n    private _horizontalForOfs;\n    private _multiRowLayoutRowSize = 1;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n    protected _onFocusChange = new EventEmitter<IFocusChangeEventArgs>();\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n\n    private rowEditPositioningStrategy = new ContainerPositioningStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler(event) {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler(event) {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler(event) {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.resizeHandler = () => {\n            this.zone.run(() => this.calculateGridSizes());\n        };\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.markForCheck();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear();\n            this.selectionService.activeElement = null;\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpened.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n        this.overlayService.onClosed.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n\n        this.columnListDiffer.diff(this.columnList);\n        this.markForCheck();\n        this.resetCaches();\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.addEventListener('resize', this.resizeHandler);\n            this._keydownListener = this.keydownHandler.bind(this);\n            this.nativeElement.addEventListener('keydown', this._keydownListener);\n        });\n        this.initPinning();\n\n        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.summaryService.summaryHeight = 0;\n                this.reflow();\n                this.verticalScrollContainer.recalcUpdateSizes();\n            });\n        });\n        this._ngAfterViewInitPassed = true;\n        this.calculateGridSizes();\n\n        // In some rare cases we get the AfterViewInit before the grid is added to the DOM\n        // and as a result we get 0 width and can't size ourselves properly.\n        // In order to prevent that add a mutation observer that watches if we have been added.\n        if (!this.isAttachedToDom) {\n            const config = { childList: true, subtree: true };\n            const callback = (mutationsList) => {\n                const childListHasChanged = mutationsList.filter((mutation) => {\n                    return mutation.type === 'childList';\n                }).length > 0;\n                if (childListHasChanged && this.isAttachedToDom) {\n                    this.reflow();\n                    this._observer.disconnect();\n                    this._observer = null;\n                }\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.document.body, config);\n        }\n\n        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(list =>\n            this._horizontalForOfs = this.combineForOfCollections(list.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null), this._summaryRowList)\n        );\n        this._summaryRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(summaryList =>\n            this._horizontalForOfs - this.combineForOfCollections(this._dataRowList, summaryList.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null)));\n\n        this.zone.runOutsideAngular(() => {\n            this._vScrollListener = this.verticalScrollHandler.bind(this);\n            this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this._vScrollListener);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            this._hScrollListener = this.horizontalScrollHandler.bind(this);\n            this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this._hScrollListener);\n        });\n        this._horizontalForOfs = this.combineForOfCollections(this._dataRowList, this._summaryRowList);\n        const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n        vertScrDC.addEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n        vertScrDC.addEventListener('wheel', () => { this.wheelHandler(); });\n\n        this.verticalScrollContainer.onDataChanging.pipe(takeUntil(this.destroy$)).subscribe(($event) => {\n            this.calculateGridHeight();\n            $event.containerSize = this.calcHeight;\n        });\n        this.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        });\n    }\n\n    private combineForOfCollections(dataList, summaryList) {\n        return dataList.map(row => row.virtDirRow).concat(summaryList.map(row => row.virtDirRow));\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.removeEventListener('resize', this.resizeHandler);\n            this.nativeElement.removeEventListener('keydown', this._keydownListener);\n            this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this._vScrollListener);\n            this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', this._hScrollListener);\n            const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n            vertScrDC.removeEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n            vertScrDC.removeEventListener('wheel', () => { this.wheelHandler(); });\n        });\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n\n        this.markForCheck();\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public get featureColumnsWidth() {\n        return this.getFeatureColumnsWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.featureColumnsWidth;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    get showRowCheckboxes(): boolean {\n        return this.rowSelectable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.cdr.detectChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach( x => x.populateVisibleIndexes());\n        }\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n\n                this.cdr.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        this.onSortingDone.emit(expression);\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ````\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this._width && this._width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.getPossibleColumnWidth();\n            this.columnList.forEach((column: IgxColumnComponent) => {\n                if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                    const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                    column.defaultWidth = columnWidthCombined + 'px';\n                } else {\n                    column.defaultWidth = this._columnWidth;\n                }\n            });\n            this.resetCachedWidths();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        // TODO: Calculate based on grid density\n        if (this.maxLevelHeaderDepth) {\n            this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                (this.allowFiltering && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n        }\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.paginator) {\n            pagingHeight = this.paginator.nativeElement.firstElementChild ?\n                this.paginator.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n        const footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -\n            this.tfoot.nativeElement.clientHeight;\n        let gridHeight;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + this.theadRow.nativeElement.offsetHeight +\n            this.summariesHeight + pagingHeight + groupAreaHeight + footerBordersAndScrollbars +\n            this.scr.nativeElement.clientHeight;\n\n        if (this.isPercentHeight) {\n            /*height in %*/\n            if (!this.nativeElement.parentElement ||\n                this.nativeElement.parentElement.clientHeight === renderedHeight) {\n                /* parent element is sized by the rendered elements which means\n                the grid should attempt a content-box style rendering */\n                this._autoSize = true;\n            }\n            if (this._autoSize || computed.getPropertyValue('height').indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed.getPropertyValue('height'), 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n\n        return height;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        if (this.showRowCheckboxes) {\n            computedWidth -= this.headerCheckboxContainer ? this.headerCheckboxContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const el = this.document.getElementById(this.nativeElement.id);\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.getPropertyValue('width').indexOf('%') === -1 ?\n                parseInt(computed.getPropertyValue('width'), 10) : null;\n        } else {\n            width = parseInt(this._width, 10);\n        }\n\n        if (!width && el) {\n            width = el.offsetWidth;\n        }\n\n\n        if (!width) {\n            width = this.columnList.reduce((sum, item) => sum + parseInt((item.width || item.defaultWidth), 10), 0);\n        }\n\n        if (this.hasVerticalSroll()) {\n            width -= this.scrollWidth;\n        }\n        if (Number.isFinite(width) && width !== this.calcWidth) {\n            this.calcWidth = width;\n            this.cdr.detectChanges();\n        }\n        this._derivePossibleWidth();\n    }\n\n    public hasVerticalSroll() {\n        if (!this._ngAfterViewInitPassed) { return false; }\n        const isScrollable = this.verticalScrollContainer.isScrollable();\n        return !!(this.calcWidth && this.verticalScrollContainer.igxForOf &&\n            this.verticalScrollContainer.igxForOf.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                // Clear Filtering\n                this.gridAPI.clear_filter(record.item.field);\n\n                // Clear Sorting\n                this.gridAPI.clear_sort(record.item.field);\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                this.calculateGridSizes();\n            }\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.resetCaches();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        this.resetCaches();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n            this.resetCaches();\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.headerCheckboxContainer) {\n            width += this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;\n        }\n        if (this.headerDragContainer) {\n            width += this.headerDragContainer.nativeElement.getBoundingClientRect().width;\n        }\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        sum += this.featureColumnsWidth;\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this._width, 10);\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = this.viewRef.createComponent(factory, null, this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        // XXX: Deprecate index\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.grid = this;\n            column.defaultWidth = this.columnWidth;\n            this.setColumnEditState(column);\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    private setColumnEditState(column: IgxColumnComponent) {\n        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.\n        if (this.rowEditable && column.editable === null &&\n            column.field && column.field !== this.primaryKey) {\n            column.editable = this.rowEditable;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n        this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderCheckboxClick(event, filteredData) {\n        this.allRowsSelected = event.checked;\n        const newSelection =\n            event.checked ?\n                filteredData ?\n                    this.selection.add_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey) :\n                filteredData ?\n                    this.selection.delete_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_empty();\n        this.triggerRowSelectionChange(newSelection, null, event, event.checked);\n        this.checkHeaderCheckboxStatus(event.checked);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxAriaLabel() {\n        return this._filteringExpressionsTree.filteringOperands.length > 0 ?\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     */\n    public checkHeaderCheckboxStatus(headerStatus?: boolean) {\n        if (headerStatus === undefined) {\n            const filteredData = this.filteringService.filteredData;\n            const dataLength = filteredData ? filteredData.length : this.dataLength;\n            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);\n            if (this.headerCheckbox) {\n                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.checked =\n                        this.allRowsSelected;\n                }\n            }\n            this.cdr.markForCheck();\n        } else if (this.headerCheckbox) {\n            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?) {\n        const currSelection = this.selection.get(componentID);\n        let atLeastOneSelected = false;\n        let notAllSelected = false;\n        if (currSelection) {\n            for (const key of Object.keys(filteredData)) {\n                const dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];\n                if (currSelection.has(dataItem)) {\n                    atLeastOneSelected = true;\n                    if (notAllSelected) {\n                        return 'indeterminate';\n                    }\n                } else {\n                    notAllSelected = true;\n                    if (atLeastOneSelected) {\n                        return 'indeterminate';\n                    }\n                }\n            }\n        }\n        return atLeastOneSelected ? 'allSelected' : 'noneSelected';\n    }\n\n    /**\n     * @hidden\n     */\n    public updateHeaderCheckboxStatusOnFilter(data) {\n        if (!data) {\n            this.checkHeaderCheckboxStatus();\n            return;\n        }\n        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {\n            case 'allSelected': {\n                if (!this.allRowsSelected) {\n                    this.allRowsSelected = true;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            case 'noneSelected': {\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            default: {\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = true;\n                }\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        let selection: Set<any>;\n        selection = this.selection.get(this.id);\n        return selection ? Array.from(selection) : [];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        let newSelection: Set<any>;\n        let selectableRows = [];\n        if (this.transactions.enabled) {\n            selectableRows = rowIDs.filter(e => !this.gridAPI.row_deleted_transaction(e));\n        } else {\n            selectableRows = rowIDs;\n        }\n        newSelection = this.selection.add_items(this.id, selectableRows, clearCurrentSelection);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.delete_items(this.id, rowIDs);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Selects all rows\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey));\n    }\n\n    /**\n     * Deselects all rows\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     */\n    public deselectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_empty());\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear();\n        this.selectionService.activeElement = null;\n        this.cdr.markForCheck();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.parentVirtDir.getHorizontalScroll();\n        const vertical = this.verticalScrollContainer.getVerticalScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.cdr.markForCheck();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n    extractDataFromSelection(source: any[]): any[] {\n        let column: IgxColumnComponent;\n        let record = {};\n        const selectedData = [];\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        const visibleColumns = this.visibleColumns\n            .filter(col => !col.columnGroup)\n            .sort((a, b) => a.visibleIndex - b.visibleIndex);\n\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                column = visibleColumns[each];\n                if (column) {\n                    record[column.field] = source[row][column.field];\n                }\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    getSelectedData() {\n        const source = this.verticalScrollContainer.igxForOf;\n\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerRowSelectionChange(newSelectionAsSet: Set<any>, row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>,\n        event?: Event, headerStatus?: boolean) {\n        const oldSelectionAsSet = this.selection.get(this.id);\n        const oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        const args: IRowSelectionEventArgs = { oldSelection, newSelection, row, event };\n        this.onRowSelectionChange.emit(args);\n        newSelectionAsSet = this.selection.get_empty();\n        for (let i = 0; i < args.newSelection.length; i++) {\n            newSelectionAsSet.add(args.newSelection[i]);\n        }\n        this.selection.set(this.id, newSelectionAsSet);\n        this.checkHeaderCheckboxStatus(headerStatus);\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('scroll', ['$event'])\n    public scrollHandler(event) {\n        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;\n        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.verticalScrollContainer.igxForOf.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.verticalScrollContainer.igxForOf.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        if (visibleColIndex === -1 || (this.navigation.isColumnFullyVisible(visibleColIndex)\n            && this.navigation.isColumnLeftFullyVisible(visibleColIndex))) {\n            if (this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex)) {\n                this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex,\n                     () => { this.executeCallback(rowIndex, visibleColIndex, cb); } );\n            } else {\n                this.executeCallback(rowIndex, visibleColIndex, cb);\n            }\n        } else {\n            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false,\n                 () => { this.executeCallback(rowIndex, visibleColIndex, cb); });\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.verticalScrollContainer.igxForOf.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.verticalScrollContainer.igxForOf.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.verticalScrollContainer.igxForOf.length) { return currentRowIndex; }\n\n        const nextRow = this.verticalScrollContainer.igxForOf.slice(currentRowIndex + 1, this.verticalScrollContainer.igxForOf.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.verticalScrollContainer.igxForOf.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.verticalScrollContainer.igxForOf.length &&\n            colIndex > - 1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler(isScroll = false) {\n        if (document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n                // tslint:disable-next-line:no-bitwise\n                (document.activeElement.compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        // directive.onChunkLoad.pipe(first())\n        //     .subscribe(() => requestAnimationFrame(() => this.cdr.detectChanges()));\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    /**\n    * @hidden\n    */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        return null;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this._wheelListener = this.rowEditingWheelHandler.bind(this);\n        this.rowEditingOverlay.element.addEventListener('wheel', this._wheelListener);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this._wheelListener);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n        const columnindex = cell ? cell.column.index : -1;\n        const ri = row ? row.index : -1;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const currentCell = this.gridAPI.get_cell_by_index(ri, columnindex);\n        if (currentCell && event) {\n            currentCell.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler(event: WheelEvent) {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getHorizontalScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isAttachedToDom(): boolean {\n        return this.document.body.contains(this.nativeElement);\n    }\n\n\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.toArray().find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n}\n\n\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n     /**\n     *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle') private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(cssClasses: any, _value: any, data: any, field: string): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        Object.entries(cssClasses).forEach(([cssClass, callbackOrValue]) => {\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        });\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if (collection && grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {\n        // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n        // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n        inputClass: Hammer.TouchInput,\n        recognizers: [\n            [ Hammer.Pan, { threshold: 0 } ],\n            [ Hammer.Pinch, { enable: true } ],\n            [ Hammer.Rotate, { enable: true } ],\n            [ Hammer.Swipe, {\n                direction: Hammer.DIRECTION_HORIZONTAL\n            }]\n        ]\n    };\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any) {\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(element: HTMLElement,\n                            eventName: string,\n                            eventHandler: (eventObj) => void,\n                            options: object = null): () => void {\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, this.hammerOptions);\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\n\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\n\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\n\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\n\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\n\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBase {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value || it.value === 0) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { Directive, Input, OnDestroy, NgModule } from '@angular/core';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IRowDragEndEventArgs, IRowDragStartEventArgs } from './grid-base.component';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowComponent, IgxGridBaseComponent, IGridDataBindable } from './grid';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                owner: this,\n                dragData: this.row,\n                cancel: false\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.dragGhost.parentNode.removeChild(this.dragGhost);\n                this.dragGhost = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            owner: this,\n            dragData: this.row,\n            animation: false\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        if (args.animation) {\n            this.animateOnRelease = true;\n        }\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.animateOnRelease) {\n            this.dragGhost.addEventListener('transitionend',  this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createDragGhost(event) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        super.createDragGhost(event, this.row.nativeElement);\n\n        const ghost = this.dragGhost;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.dragGhost) {\n            this.dragGhost.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent, IgxColumnLayoutComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxFilterCellTemplateDirective,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxRowDragModule } from './row-drag.directive';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxRowComponent,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective,\n        IgxRowDragModule\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        const expansionState = grid.groupingExpansionState;\n        let toggleRowEditingOverlay: boolean;\n        let isEditRowInGroup = false;\n        if (grid.rowEditable) {\n            const rowState = this.grid.crudService.row;\n\n            // Toggle only row editing overlays that are inside current expanded/collapsed group.\n            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(groupRow, rowState.id) : false;\n        }\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = state.expanded;\n            }\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = false;\n            }\n        }\n        this.grid.groupingExpansionState = expansionState;\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/dragdrop/dragdrop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { ISelectionNode } from '../core/grid-selection';\n\n\nexport interface IStartNavigationCell {\n    rowStart: number;\n    colStart: number;\n    direction: NavigationDirection;\n}\n\nexport enum NavigationDirection {\n    horizontal = 'horizontal',\n    vertical = 'vertical'\n}\n\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n\n    private startNavigationCell: IStartNavigationCell;\n\n    public grid: IgxGridBaseComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setStartNavigationCell(colStart: number, rowStart: number, dir: NavigationDirection) {\n        this.startNavigationCell = {\n            colStart: colStart,\n            rowStart: rowStart,\n            direction: dir\n        };\n    }\n\n    private applyNavigationCell(colStart: number, rowStart: number, navDirection: NavigationDirection): number {\n        const oppositeDir = navDirection === NavigationDirection.vertical ?\n            NavigationDirection.horizontal : NavigationDirection.vertical;\n        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {\n            this.startNavigationCell.direction = oppositeDir;\n        } else {\n            this.setStartNavigationCell(colStart, rowStart, oppositeDir);\n        }\n\n        return navDirection === NavigationDirection.vertical ?\n            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;\n    }\n\n    public navigateUp(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellUpFromLayout(rowElement, selectedNode);\n    }\n\n    public navigateDown(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellDownFromLayout(rowElement, selectedNode);\n    }\n\n    public isColumnFullyVisible(visibleColumnIndex: number): boolean {\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        const forOfDir =  this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth || (column && column.pinned)) {\n            return true;\n        } else if (column) {\n            if (this.isParentColumnFullyVisible(column)) { return true; }\n            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n        }\n        return false;\n    }\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth || parent.pinned) { return true; }\n        const index = forOfDir.igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public isColumnLeftFullyVisible(visibleColumnIndex: number): boolean {\n        const forOfDir = this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        if (this.isParentColumnFullyVisible(column)) { return true; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    public onKeydownArrowRight(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusNextCellFromLayout(element, selectedNode);\n    }\n\n    public onKeydownArrowLeft(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusPrevCellFromLayout(element, selectedNode);\n    }\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)\n        .sort((a, b) => a.visibleIndex - b.visibleIndex);\n    }\n\n    public performTab(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');\n        if (nextElementColumn) {\n            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);\n        }\n    }\n\n    protected _moveFocusToCell(currentRowEl: HTMLElement, nextElementColumn, row, selectedNode, dir) {\n        if (nextElementColumn && row.cells) {\n            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n            const isVisible = this.isColumnFullyVisible(nextElementColumn.visibleIndex);\n            if (!nextCell || !isVisible) {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                const cb = () => {\n                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                        if (dir === 'next') {\n                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        } else {\n                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        }\n                        return;\n                    }\n                    this._focusCell(nextCell.nativeElement);\n                };\n                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);\n            } else {\n                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                    if (dir === 'next') {\n                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    } else {\n                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    }\n                    return;\n                }\n                this._focusCell(nextCell.nativeElement);\n            }\n        } else {\n            // end of layout reached\n            if (this.isRowInEditMode(row.index)) {\n                if (dir === 'next') {\n                    this.grid.rowEditTabs.first.element.nativeElement.focus();\n                } else {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                }\n                return;\n            }\n            if (dir === 'next') {\n                super.navigateDown(currentRowEl, {row: row.index, column: 0});\n            } else {\n                 let lastVisibleIndex = 0;\n                this.grid.unpinnedColumns.forEach((col) => {\n                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);\n                });\n                super.navigateUp(currentRowEl, {row: row.index, column: lastVisibleIndex});\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        const prevElementColumn =\n         this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);\n         this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');\n        if (prevElementColumn) {\n            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);\n        }\n    }\n\n    private focusCellUpFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const currentRowStart = selectedNode.layout ?  selectedNode.layout.rowStart : 1;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            currentRowStart,\n            NavigationDirection.vertical);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        let movePrev;\n        // check if element up is from the same layout\n        let upperElementColumn = columnLayout.children.find(c =>\n            (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart)  &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !upperElementColumn) {\n            // no prev row in current row layout, go to next row last rowstart\n            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;\n            upperElementColumn = columnLayout.children.find(c =>\n                (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            movePrev = true;\n        }\n        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;\n        if (rowIndex < 0) {\n            // end of rows reached.\n            return;\n        }\n        let prevRow;\n        const cb = () => {\n            prevRow = this.grid.getRowByIndex(rowIndex);\n            if (prevRow && prevRow.cells) {\n                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);\n            } else if (prevRow) {\n                prevRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusCellDownFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            selectedNode.layout ? selectedNode.layout.rowStart : 1,\n            NavigationDirection.vertical);\n        let moveNext;\n        // check if element down is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !nextElementColumn) {\n            // no next row in current row layout, go to next row first rowstart\n            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            moveNext = true;\n        }\n        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;\n        if (rowIndex > this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            // end of rows reached.\n            return;\n        }\n        let nextRow;\n        const cb = () => {\n            nextRow = this.grid.getRowByIndex(rowIndex);\n            if (nextRow && nextRow.cells) {\n                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);\n            } else if (nextRow) {\n                nextRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusNextCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;\n        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n        // check if next element is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!nextElementColumn) {\n            // no next column in current layout, search for next layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            // next element is from the next layout\n            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n        const cb = () => {\n            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n           this._focusCell(nextElement);\n        };\n        if (!this.isColumnFullyVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusPrevCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColStart = selectedNode.layout.colStart;\n        const currentRowStart = this.applyNavigationCell(currentColStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n\n        // check previous element is from the same layout\n        let prevElementColumn = columnLayout.children\n        .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart ) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!prevElementColumn) {\n            // no prev column in current layout, seacrh for prev layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;\n            // first element is from the next layout\n            prevElementColumn = columnLayout.children\n            .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n\n        const cb = () => {\n            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n            this._focusCell(prevElement);\n        };\n        if (!this.isColumnLeftFullyVisible(prevElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    public onKeydownEnd(rowIndex: number, isSummary: boolean = false, cellRowStart?: number) {\n        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const lastLayout = layouts[layouts.length - 1];\n        const lastLayoutChildren = lastLayout.children;\n        const layoutSize =  lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart || this.grid.multiRowLayoutRowSize,\n            NavigationDirection.horizontal);\n        const nextElementColumn = lastLayout.children.find(c =>\n            (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnFullyVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[allBlocks.length - 1].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    public onKeydownHome(rowIndex: number, isSummary: boolean = false, cellRowStart: number = 1) {\n        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];\n        const lastLayoutChildren = firstLayout.children.toArray();\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart,\n            NavigationDirection.horizontal);\n        const nextElementColumn = firstLayout.children.find(c =>\n            c.colStart === 1 &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnLeftFullyVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n           const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[0].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[0].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    protected getColumnLayoutSelector(): string {\n        return '.igx-grid__mrl-block';\n    }\n\n    protected getChildColumnScrollPositions(visibleColIndex: number): { leftScroll: number, rightScroll: number } {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const parent = targetCol.parent;\n        const parentVIndex = forOfDir.igxForOf.indexOf(parent);\n        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;\n        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.\n        const childSizes = parent.getFilledChildColumnSizes(parent.children);\n        const colStart = targetCol.colStart || 1;\n        const colEnd = targetCol.colEnd || colStart + 1;\n        for (let i = 1; i < colStart; i++) {\n            leftScroll += parseInt(childSizes[i - 1], 10);\n        }\n        rightScroll += leftScroll;\n        for (let j = colStart; j < colEnd; j++) {\n            rightScroll +=  parseInt(childSizes[j - 1], 10);\n        }\n        return {leftScroll, rightScroll};\n    }\n\n    protected getColunmByVisibleIndex(visibleColIndex: number): IgxColumnComponent {\n        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;\n        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(rowIndex: number, visibleColumnIndex: number): boolean {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);\n       }\n        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {return false; }\n       const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n           .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n       const scrollTop =  Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);\n       const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n       const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n       if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)\n           || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {\n           return true;\n       } else {\n           return false;\n       }\n   }\n\n   get verticalDCTopOffset(): number {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    private _isGroupRecordAt(rowIndex: number) {\n        const record = this.grid.verticalScrollContainer.igxForOf[rowIndex];\n        return record.records && record.records.length;\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColumnIndex: number, cb?: () => void) {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);\n        }\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);\n        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        const isPrevious =  (scrollTop > scrollPos.rowTop) && (!targetRow ||\n                targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));\n        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);\n\n        this.grid.verticalScrollContainer.onChunkLoad\n        .pipe(first()).subscribe(() => {\n            cb();\n        });\n\n        if (isPrevious) {\n            this.grid.verticalScrollContainer.getVerticalScroll().scrollTop = scrollAmount;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);\n        }\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleColIndex: number): { rowTop: number, rowBottom: number, topOffset: number } {\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const topOffset = (targetCol.rowStart - 1)  * this.grid.defaultRowHeight;\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);\n        return { rowTop, rowBottom, topOffset };\n    }\n\n    public performHorizontalScrollToCell(rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const hScroll = this.horizontalScroll(rowIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));\n                }\n        });\n        const isPrevItem =  hScroll.getHorizontalScroll().scrollLeft > scrollPos.leftScroll;\n        const containerSize = parseInt(hScroll.igxForContainerSize, 10);\n        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;\n        hScroll.getHorizontalScroll().scrollLeft = nextScroll;\n    }\n\n    protected _focusCell(cellElem: HTMLElement) {\n        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.\n        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();\n        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;\n        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;\n\n        if (diffTop < 0) {\n            // cell is above grid top - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffTop);\n        } else if (diffBottom > 0) {\n            // cell is below grid bottom - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffBottom);\n        }  else {\n            // cell is visible\n            cellElem.focus({ preventScroll: true });\n        }\n    }\n\n    public goToFirstCell() {\n        this.startNavigationCell = null;\n        super.goToFirstCell();\n    }\n\n    public goToLastCell() {\n        this.startNavigationCell = null;\n        super.goToLastCell();\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, NgZone, ChangeDetectorRef, ComponentFactoryResolver,\n    IterableDiffers, ViewContainerRef, Inject, AfterContentInit, HostBinding, forwardRef, OnInit, Optional\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IFocusChangeEventArgs, IGridDataBindable, FilterMode } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { TransactionService, Transaction, State } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\n\nlet NEXT_ID = 0;\n\nexport interface IGridFocusChangeEventArgs extends IFocusChangeEventArgs {\n    groupRow: IgxGridGroupByRowComponent;\n}\nexport interface IGroupingDoneEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [IgxGridNavigationService, IgxGridSummaryService, IgxGridSelectionService, IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService, IgxColumnResizingService, IgxForOfSyncService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridBaseComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    private _gridAPI: IgxGridAPIService;\n    private _filteredData = null;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) _transactions: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService,\n                  crudService, gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                  filteringService, overlayService, summaryService, _displayDensityOptions);\n            this._gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.cdr.markForCheck();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.cdr.detectChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        this._groupingExpandState = cloneArray(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     *\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.markForCheck();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.markForCheck();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        this.endEdit(true);\n        this._gridAPI.submit_value();\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.cdr.detectChanges();\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const state = {\n                expressions: this.groupingExpressions,\n                expansion: this.groupingExpansionState,\n                defaultExpanded: this.groupsExpanded\n            };\n\n            return DataUtil.group(cloneArray(this.filteredSortedData), state, this).metadata;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.groupingExpressions.length && this.headerGroupContainer) {\n            width += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n\n        return width;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const groupByRecords = this.getGroupByRecords();\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const groupByRecord = groupByRecords[rowIndex];\n\n            if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n                this.toggleGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        return this.getColumnByName(expression.fieldName).header || expression.fieldName;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n        super.ngAfterContentInit();\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        super.ngDoCheck();\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n    }\n\n    getSelectedData(): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.verticalScrollContainer.igxForOf.forEach(process);\n            return this.extractDataFromSelection(source);\n        } else {\n            return super.getSelectedData();\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-strategy';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPreGroupBy',\n    pure: true\n})\nexport class IgxGridPreGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            return {\n                data: collection,\n                metadata: collection\n            };\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.group(cloneArray(collection), state, grid, groupsRecords);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPostGroupBy',\n    pure: true\n})\nexport class IgxGridPostGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult, expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, pipeTrigger: number): any[] {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return collection.data;\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.restoreGroups({\n            data: cloneArray(collection.data),\n            metadata: cloneArray(collection.metadata)\n        }, state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: IGroupByResult = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = { expressionsTree: expressionsTree };\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent)}]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, selection, element, cdr);\n        }\n\n        @HostBinding('class.igx-grid__tr--mrl')\n        get hasColumnLayouts(): boolean {\n            return this.grid.hasColumnLayouts;\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(flatData: any[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(id, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: any[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n\n            if (grid.isGroupByRecord(record)) {\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max:  maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n    }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPreGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selection.is_item_selected(grid.id, child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ElementRef,\n    HostBinding,\n    Input,\n    IterableDiffers,\n    ViewContainerRef,\n    Output,\n    EventEmitter,\n    Inject,\n    NgZone,\n    forwardRef,\n    Optional,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxColumnComponent } from '../column.component';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService, IgxGridCRUDService, IgxTreeGridNavigationService, IgxGridSummaryService,\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) }, IgxFilteringService, IgxForOfSyncService]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions(): IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState> {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.cdr.markForCheck();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    private _gridAPI: IgxTreeGridAPIService;\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxTreeGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService, crudService, gridAPI, selection,\n                _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                filteringService, overlayService, summaryService, _displayDensityOptions);\n        this._gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.cdr.markForCheck();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selection.first_item(`${this.id}-cell`);\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.rowIndex, cellID.columnID);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID) {\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.cdr.markForCheck();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    getSelectedData(): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.verticalScrollContainer.igxForOf.forEach(process);\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, ElementRef, ChangeDetectorRef, DoCheck } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> implements DoCheck {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxTreeGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, crudService, selectionService, selection, element, cdr);\n    }\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        if (collection && grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject, ChangeDetectionStrategy, NgZone, OnInit, Input } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html'\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                selection: IgxSelectionAPIService,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                @Inject(DOCUMENT) public document) {\n        super(selectionService, crudService, gridAPI, selection, cdr, element, zone);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef })\n    public defaultContentElement: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxSelectionAPIService } from '../../core/selection';\nimport { Injectable } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n\n/** @hidden */\nexport class IgxHierarchicalSelectionAPIService extends IgxSelectionAPIService {\n    protected hSelection: Map<string,  Map<string, any>> = new Map<string,   Map<string, any>>();\n\n    public add_sub_item(rootID: string,  parentID: string, cell: any) {\n        const selItem = new Map<string, any>();\n        selItem.set(parentID, cell);\n        this.hSelection.set(rootID, selItem);\n    }\n\n    public get_sub_item(rootID: string) {\n        let selItem;\n        const sel = this.hSelection.get(rootID);\n        if (sel) {\n            selItem = {\n                gridID: this.hSelection.get(rootID).keys().next().value ,\n                cell: this.hSelection.get(rootID).values().next().value\n            };\n        }\n        return selItem;\n    }\n\n    public clear_sub_item(rootID: string) {\n        return this.hSelection.set(rootID, null);\n    }\n\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { FilterMode } from '../grid-base.component';\nimport { IgxColumnComponent } from '../../grids/column.component';\nimport { ISelectionNode } from '../../core/grid-selection';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                    row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = grid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop +  grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.verticalScrollContainer.igxForOf[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow =  this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const prevElem = rowElement.previousElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (prevElem) {\n            const nodeName =  prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, selectedNode);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, selectedNode);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n                // move to prev row in sibling layout or parent\n                this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const nextElem = rowElement.nextElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName =  nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.verticalScrollContainer.igxForOf.length - 1) {\n             // scroll next in view\n             super.navigateDown(rowElement, selectedNode);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {\n                // move to next row in sibling layout or in parent\n                this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n\n            if (verticalScroll.scrollTop === 0) {\n                this._focusScrollCellInView(visibleColumnIndex);\n            } else {\n                this.scrollGrid(this.grid, 'top',\n                () => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        this._focusScrollCellInView(visibleColumnIndex);\n                     }\n                });\n            }\n\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                () => {\n                    const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n            row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? this.grid :\n                this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1) ;\n        const isLastColumn =  this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else {\n                this.navigateDown(currentRowEl, { row:  rowIndex, column: 0});\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            // navigating in child summary, next is parent summary or next parent row\n            const parent = this.grid.parent;\n            const parentHasSummary = parent.summariesRowList.toArray().length > 0;\n            const parentRowIndex = parseInt(\n                this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n            const isLastRowInParent = parent.verticalScrollContainer.igxForOf.length - 1 === parentRowIndex;\n            // check if next is sibling\n            const childRowContainer = this.getChildGridRowContainer(this.grid);\n            const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n            if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n                // next is parent summary\n                const parentSummary = parent.summariesRowList.toArray()[0].nativeElement;\n                parent.navigation.focusNextRow(parentSummary, 0, this.grid.rootGrid, true);\n            } else {\n                // next is sibling or parent\n                this.focusNext(0);\n            }\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, selectedNode);\n        }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row:  rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    const selNode = {\n                        row:  rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n                if (verticalScroll.scrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n        }\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.toArray().length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else {\n                // move to next cell\n                this.navigateUp(currentRowEl, { row : rowIndex, column: lastIndex});\n            }\n    }\n\n    private _focusScrollCellInView(visibleColumnIndex) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const cells = this.grid.nativeElement.querySelectorAll(\n            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        const cell = cells[0];\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const scrTop = this.grid.parent.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const dc = childContainer.parentNode.parentNode;\n        const scrWith = parseInt(dc.style.top, 10);\n        if (scrTop === 0 || scrWith === 0) {\n            // cell is in view\n            cell.focus({preventScroll: true});\n        } else {\n            // scroll parent so that cell is in view\n            this.scrollGrid(this.grid.parent, scrWith , () => cell.focus({preventScroll: true}));\n        }\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.verticalScrollContainer.igxForOf.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n            () => {\n            parentContainer = this.getChildContainer(grid);\n            childRowContainer = this.getChildGridRowContainer(grid);\n            prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n            });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem};\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getVerticalScroll();\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize ) {\n            this.scrollGrid(nextParentGrid, 'next',\n            () => {\n                nextParentElem = parentInfo.nextElement;\n                childRowContainer = this.getChildGridRowContainer();\n                next = childRowContainer.nextElementSibling || nextParentElem;\n                if (next && nextIsSiblingChild) {\n                    this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                } else if (next) {\n                    this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                }\n            });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        let scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n        Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cell =\n            elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView =  diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n        Math.round(scrollTop +  closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            const cellElem = elem.querySelector(`${cellSelector}`);\n            const rowIndex = parseInt(cellElem.getAttribute('data-rowindex'), 10);\n            grid.navigation.performHorizontalScrollToCell(rowIndex, visibleColumnIndex);\n        }\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells =  elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? grid :\n             this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n            grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const diff = cell.getBoundingClientRect().bottom -\n            cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        grid.dataRowList.toArray()[0].virtDirRow.scrollTo(unpinnedIndex);\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        grid.nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top' : grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom' : grid.verticalScrollContainer.scrollTo(grid.verticalScrollContainer.igxForOf.length - 1); break;\n                    case 'next' :  grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev' :  grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex}));\n        } else {\n            super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex});\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n        childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex}));\n        } else {\n            super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex});\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n}\n","import {\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nexport interface IGridCreatedEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\n\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n     * @hidden\n     */\n    // public get layout() {\n    //     const layout = (this.gridAPI as IgxHierarchicalGridAPIService).getLayout(`igx-row-island-` + this.rowData.key);\n    //    return layout;\n    // }\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid')\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        private selectionAPI: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        // setting child data only once on init\n        // due to context change issues when moving cached views containing hierarchical child grids\n        this.hGrid.data = this.rowData.childGridsData[this.layout.key];\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        if (this.hGrid.isPercentHeight) {\n            this.hGrid._autoSize = true;\n        }\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy,\n    ContentChild\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        this._hierarchicalState = val;\n        if (this.parent) {\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    this._displayDensity = this.rootGrid._displayDensity;\n                    if (document.body.contains(this.nativeElement)) {\n                        this.reflow();\n                    } else {\n                        this.updateOnRender = true;\n                    }\n                });\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n            this.cdr.detectChanges();\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this === this.rootGrid ? null : this.rootGrid.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        super.ngAfterContentInit();\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        super.onColumnsChanged(change);\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            if (!layout.rootGrid && !this.parent) {\n                // If the layout doesn't have rootGrid set and this is the root, set it\n                layout.rootGrid = this;\n            }\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        super.ngOnDestroy();\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.offsetWidth || this.getDefaultExpanderWidth();\n        }\n\n        return width;\n    }\n\n    private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n    public collapseAllRows() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.reflow();\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getVerticalScroll();\n        const hScr = this.parentVirtDir.getHorizontalScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth() {\n        let computedWidth = this.calcWidth || parseInt(\n            this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        computedWidth -= this.headerHierarchyExpander.nativeElement.clientWidth;\n        return super.getPossibleColumnWidth(computedWidth);\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n\n    private updateParentSizes() {\n        let currGrid = this.parent;\n        while (currGrid) {\n            const hadScrollbar = currGrid.hasVerticalSroll();\n            const virt = currGrid.verticalScrollContainer;\n            virt.recalcUpdateSizes();\n            const offset = parseInt(virt.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            const scr = virt.getVerticalScroll();\n            scr.scrollTop = virt.getScrollForIndex(virt.state.startIndex) - offset;\n\n            if (hadScrollbar !== currGrid.hasVerticalSroll()) {\n                // If after recalculations the grid should show vertical scrollbar it should also reflow.\n                currGrid.reflow();\n            }\n\n            currGrid = currGrid.parent;\n        }\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html'\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        ) {\n            super(selectionService, crudService, gridAPI, selection, cdr, helement, zone);\n            this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey && !this.row.added) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ChangeDetectorRef,\n    ViewChildren,\n    QueryList,\n    ViewChild\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridCRUDService, IgxGridSelectionService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef })\n    public expander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n        requestAnimationFrame(() => {\n            grid.reflow();\n        });\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private hselection: IgxHierarchicalSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            super(gridAPI, crudService, selectionService, hselection, element, cdr);\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule\n  ],\n  providers: [\n    IgxRowIslandAPIService,\n    IgxHierarchicalSelectionAPIService\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public isOpen = false;\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 60px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '60px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside') private _drawer: ElementRef;\n    @ViewChild('overlay') private _overlay: ElementRef;\n    @ViewChild('dummy') private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        window.requestAnimationFrame(() => {\n            if (this.drawer) {\n                this.renderer.setElementStyle(this.drawer, 'width', width);\n            }\n        });\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setElementStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform',\n                    x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import {\n    NgModule,\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _timer;\n    private _isActiveLabel = false;\n    private _destroy$ = new Subject<boolean>();\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public fromHandler: boolean;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.fromHandler;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return !this.fromHandler;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.fromHandler && this._isActiveLabel;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return !this.fromHandler && this._isActiveLabel;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor (private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n    }\n\n    public showThumbLabel() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.continuous) {\n            return;\n        }\n\n        if (this._timer !== null) {\n            clearTimeout(this._timer);\n        }\n\n        this._isActiveLabel = true;\n    }\n\n\n    public hideThumbLabel() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.continuous) {\n            return;\n        }\n\n        this._timer = setTimeout(\n            () => this._isActiveLabel = false,\n            this.thumbLabelVisibilityDuration\n        );\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n}\n","import { Directive } from '@angular/core';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    AfterContentInit,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    SliderType,\n    ISliderValueChangeEventArgs\n} from './slider.common';\n\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentInit,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _countinuous = false;\n    private _disabled = false;\n    private _step = 1;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = SliderType.SLIDER;\n\n    private _destroy$ = new Subject<boolean>();\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track')\n    private track: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks')\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: SliderType) {\n        this._type = type;\n\n        if (type === SliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = 1;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.positionHandlesAndUpdateTrack();\n            this.setTickInterval(labels);\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * return {\n     *  $implicit: {@link value},\n     *  labels: {@link labels}\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._countinuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not shows bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        if (this.labelsViewEnabled) {\n            return;\n        }\n\n        this._countinuous = continuous;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`IgxSliderComponent \\`isContinuous\\` property is deprecated.\\nUse \\`continuous\\` instead.`)\n    public get isContinuous(): boolean {\n        return this.continuous;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public set isContinuous(continuous: boolean) {\n        this.continuous = continuous;\n    }\n\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh time travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound) || 0;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound) || 1;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link SliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number;\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this._hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n\n    constructor(private renderer: Renderer2, private _el: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        this.showThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup')\n    public onPointerUp() {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        this.hideThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.hideThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    @HostListener('panstart')\n    public onPanStart() {\n        this.showThumbLabels();\n    }\n\n    @HostListener('panend')\n    public onPanEnd() {\n        this.hideThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('tap', ['$event'])\n    public onTapListener($event) {\n        this.onTap($event);\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === SliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(this.labels);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroy$)).subscribe(change => {\n            const t = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            this.positionHandle(t, this.lowerValue);\n            this.subscribeTo(t, this.thumbChanged.bind(this));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // Calculates the distance between every step in pixels.\n        this.stepDistance = this.calculateStepDistance();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        if (!value) {\n            return;\n        }\n\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public onTap($event) {\n        this.update($event.srcEvent.clientX);\n    }\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleThumbLabels();\n    }\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n\n        return value;\n    }\n\n    private findClosestThumb(event) {\n        if (this.isRange) {\n            this.closestHandle(event.clientX);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n\n        event.preventDefault();\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this.value === this.upperBound) {\n            this.value = this.lowerBound;\n        }\n\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandle(handle: ElementRef, position: number) {\n        if (!handle) {\n            return;\n        }\n\n        handle.nativeElement.style.left = `${this.valueToFraction(position) * 100}%`;\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle(mouseX) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = mouseX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === toOffset) {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval(labels) {\n        if (this.continuous) {\n            return;\n        }\n\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));\n    }\n\n    private showThumbLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.thumbTo.showThumbLabel();\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbLabel();\n        }\n    }\n\n    private hideThumbLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.thumbTo.hideThumbLabel();\n        if (this.thumbFrom) {\n            this.thumbFrom.hideThumbLabel();\n        }\n    }\n\n    private toggleThumbLabels() {\n        this.showThumbLabels();\n        this.hideThumbLabels();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroy$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSliderComponent, IgxThumbFromTemplateDirective, IgxThumbToTemplateDirective, IgxSliderThumbComponent],\n    exports: [IgxSliderComponent, IgxThumbFromTemplateDirective, IgxThumbToTemplateDirective, IgxSliderThumbComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    animate,\n    AnimationEvent,\n    state,\n    style,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\n\nexport interface ISelectTabEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent)) public tabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent)) public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        this.selectedIndex = args.panel.index;\n\n        this.panels.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectPanel(p);\n            }\n        });\n    }\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\n\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanelIsSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public isSelected = false;\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this.isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\n\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role') public role = 'tab';\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input() public relatedPanel: IgxTabPanelComponent;\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get disabled(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.disabled;\n        }\n    }\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get isSelected(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.isSelected;\n        }\n    }\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get index(): number {\n        return this._tabBar.tabs.toArray().indexOf(this);\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        this.relatedPanel.select();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    scrollElement(element: any, scrollRight: boolean) {}\n}\n\n/** @hidden */\nexport interface IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    select(focusDelay?: number);\n}\n\n/** @hidden */\nexport interface IgxTabsGroupBase {\n    select(focusDelay?: number);\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent implements IgxTabItemBase {\n\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        this._nativeTabItem = _element;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    get disabled(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.disabled;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    get isSelected(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        return this._tabs.tabs.toArray().indexOf(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public select(focusDelay = 200): void {\n        this.relatedGroup.select(focusDelay);\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select(200);\n    }\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent implements IgxTabsGroupBase, AfterContentInit, AfterViewChecked {\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    public isSelected = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this.transformContentAnimation(0);\n        }\n    }\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n\n        if (this.isSelected) {\n            const tabItem = this.relatedTab.nativeTabItem.nativeElement;\n            this.transformContentAnimation(0);\n            this.transformIndicatorAnimation(tabItem);\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     * @param focusDelay A number representing the expected delay.\n     */\n    public select(focusDelay = 200): void {\n        if (this.disabled || this.isSelected) {\n            return;\n        }\n\n        this.isSelected = true;\n        this.relatedTab.tabindex = 0;\n\n        if (focusDelay !== 0) {\n            setTimeout(() => {\n                this.relatedTab.nativeTabItem.nativeElement.focus();\n            }, focusDelay);\n        }\n        this.handleSelection();\n        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });\n    }\n\n    private handleSelection(): void {\n        const tabElement = this.relatedTab.nativeTabItem.nativeElement;\n\n        // Scroll to the left\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        }\n\n        // Scroll to the right\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const delta = (tabElement.offsetLeft + tabElement.offsetWidth) - (viewPortOffsetWidth + this._tabs.offset);\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        this.transformContentAnimation(0.2);\n        this.transformIndicatorAnimation(tabElement);\n    }\n\n    private transformContentAnimation(duration: number): void {\n        const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `${duration}s`;\n        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    private transformIndicatorAnimation(element: HTMLElement): void {\n        this._tabs.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase } from './tabs.common';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.tabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        this._selectedIndex = index;\n        this.setSelectedGroup();\n    }\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output() public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer')\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer')\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer')\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer')\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort')\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public tabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFound = this.groups.find((group) => group.icon != null && group.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFound !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabItemSelected', ['$event'])\n    public selectedGroupHandler(args) {\n        const prevSelectedIndex = this.selectedIndex;\n        if (prevSelectedIndex !== -1 && this.groups.toArray()[prevSelectedIndex] !== undefined) {\n            this.onTabItemDeselected.emit(\n                {\n                    tab: this.groups.toArray()[prevSelectedIndex].relatedTab,\n                    group: this.groups.toArray()[prevSelectedIndex]\n                });\n        }\n\n        this.selectedIndex = args.group.index;\n        this.groups.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this.deselectGroup(p);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        requestAnimationFrame(() => {\n            this.setSelectedGroup();\n        });\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n    }\n\n    private setSelectedGroup(): void {\n        requestAnimationFrame(() => {\n            if (this.selectedIndex <= 0 || this.selectedIndex >= this.groups.length) {\n                // if nothing is selected - select the first tabs group\n                this.selectGroupByIndex(0);\n            } else {\n                this.selectGroupByIndex(this.selectedIndex);\n            }\n        });\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        setTimeout(() => {\n            if (this.groups.toArray()[this.selectedIndex] !== undefined) {\n                // persist the selected index and applied it to the new collection\n                this.selectGroupByIndex(this.selectedIndex);\n            } else {\n                if (this.selectedIndex >= this.groups.length) {\n                    // in case the selected index is no longer valid, select the last group in the new collection\n                    this.selectGroupByIndex(this.groups.length - 1);\n                }\n            }\n        }, 0);\n    }\n\n    private selectGroupByIndex(selectedIndex: number): void {\n        const selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);\n        const group = selectableGroups[selectedIndex];\n\n        if (group) {\n            group.select(0);\n        }\n    }\n\n    private deselectGroup(group: IgxTabsGroupComponent): void {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (group.disabled || this.selectedTabItem.index === group.index) {\n            return;\n        }\n\n        group.isSelected = false;\n        group.relatedTab.tabindex = -1;\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n        let hour, minutes, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, CancelableBrowserEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxTimePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     * Emitted when a timePicker is being closed.\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxTimePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('container')\n    public container: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('input', { read: ElementRef })\n    private input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('group', { read: IgxInputGroupComponent })\n    private group: IgxInputGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _onTouchedCallback: () => void = () => { };\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n    */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.input) {\n            fromEvent(this.input.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.container && this.group) {\n            this.container.nativeElement.style.width = this.group.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n\n                if (this._input) {\n                    this._input.nativeElement.focus();\n                }\n\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n\n                // TODO: remove this line after deprecating 'onClose'\n                this._onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n\n                // TODO: remove this line after deprecating 'onOpen'\n                this._onOpen.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog();\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        date.setSeconds(0);\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n            this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM;\n    }\n\n    private _getCursorPosition(): number {\n        return this.input.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this.input.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._input.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this.value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     * opens the dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.openDialog();\n     * ```\n     */\n    public openDialog(timePicker: IgxTimePickerComponent = this): void {\n        if (this.toggleRef.collapsed) {\n            let settings;\n            if (this.mode === InteractionMode.Dialog) {\n                settings = this.overlaySettings || this._dialogOverlaySettings;\n            }\n\n            if (this.mode === InteractionMode.DropDown) {\n                settings = this.overlaySettings || this._dropDownOverlaySettings;\n                const posStrategy = settings.positionStrategy;\n\n                if (this.group && posStrategy) {\n                    posStrategy.settings.target = this.group.element.nativeElement;\n                } else if (this.templateDropDownTarget && posStrategy) {\n                    posStrategy.settings.target = this.templateDropDownTarget.nativeElement;\n                } else if (!posStrategy || (posStrategy && !posStrategy.settings.target)) {\n                    throw new Error('There is no target element for the dropdown to attach.' +\n                        'Mark a DOM element with #dropDownTarget ref variable or provide correct overlay positionStrategy.');\n                }\n            }\n\n            if (this.outlet) {\n                settings.outlet = this.outlet;\n            }\n\n            this.toggleRef.open(settings);\n            this._initializeContainer();\n\n        } else if (this.mode === InteractionMode.DropDown) {\n            this.close();\n        }\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        const value = event.target.value;\n\n        this.isNotEmpty = value !== '';\n        this.displayValue = value;\n\n        if (value && value !== this.parseMask()) {\n            if (this._isEntryValid(value)) {\n                const newVal = this._convertMinMaxValue(value);\n                if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: value,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n\n            if (this.showHoursList && HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (this.showMinutesList &&\n                ((this.showHoursList && MINUTES_POS.indexOf(cursor) !== -1) || (!this.showHoursList && HOURS_POS.indexOf(cursor) !== -1))) {\n                this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (this.showAmPmList) {\n                if (((!this.showHoursList || !this.showMinutesList) && MINUTES_POS.indexOf(cursor) !== -1) ||\n                    (this.showHoursList && this.showMinutesList && AMPM_POS.indexOf(cursor) !== -1)) {\n\n                    const sections = this.displayValue.split(/[\\s:]+/);\n                    sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                    currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                    this.value = currentVal;\n                }\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this.input.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public isVisible = false;\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, HostBinding, Input, DoCheck } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /** @hidden @internal */\n    public get itemText() {\n        return this.elementRef.nativeElement.innerText.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, getViewportRect } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectComponent } from './select.component';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectComponent, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private listContainerBoundRect: DOMRect;\n    private itemTextToInputTextDiff: number;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.itemTextToInputTextDiff }px`;\n        this.deltaY = CURRENT_POSITION_Y -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top - this.itemTextToInputTextDiff;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.itemTextToInputTextDiff + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        const inputFontSize = window.getComputedStyle(inputElement).fontSize;\n        const numericInputFontSize = parseInt(inputFontSize.slice(0, inputFontSize.indexOf('p')), 10) || 0;\n        const itemFontSize = window.getComputedStyle(itemElement).fontSize;\n        const numericItemFontSize = parseInt(itemFontSize.slice(0, itemFontSize.indexOf('p')), 10) || 0;\n        const inputTextToInputTop = (inputHeight - numericInputFontSize) / 2;\n        const itemTextToItemTop = (itemHeight - numericItemFontSize) / 2;\n        this.itemTextToInputTextDiff = itemTextToItemTop - inputTextToInputTop;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const selectItemPaddingHorizontal = 24;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericLeftPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericLeftPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericLeftPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + selectItemPaddingHorizontal * 2 + 'px';\n        this.deltaX = START.X - numericLeftPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                        // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional, Inject,\n    Injector, OnInit, AfterViewInit, OnDestroy\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _statusChanges$: Subscription;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective)) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * An @Input property that sets what display density to be used for the input group.\n     * The allowed values are `compact`, `cosy` and `comfortable`. The default is `comfortable`.\n     * ```html\n     *<igx-select [displayDensity]=\"'compact'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public displayDensity = 'comfortable';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void { }\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        if (this.ngControl && !this.ngControl.valid) {\n             this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get(NgControl, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.selection.clear(this.id);\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n"]}