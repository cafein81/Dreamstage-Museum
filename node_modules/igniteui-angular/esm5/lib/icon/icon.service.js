/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, SecurityContext, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
/**
 * **Ignite UI for Angular Icon Service** -
 *
 * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.
 * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.
 *
 * Example:
 * ```typescript
 * this.iconService.registerFontSetAlias('material', 'material-icons');
 * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
 * ```
 */
var IgxIconService = /** @class */ (function () {
    function IgxIconService(_sanitizer, _document) {
        this._sanitizer = _sanitizer;
        this._document = _document;
        this._fontSet = 'material-icons';
        this._fontSetAliases = new Map();
        this._cachedSvgIcons = new Set();
    }
    Object.defineProperty(IgxIconService.prototype, "defaultFontSet", {
        /**
         *  Returns the default font set.
         *```typescript
         *   const defaultFontSet = this.iconService.defaultFontSet;
         * ```
         */
        get: /**
         *  Returns the default font set.
         * ```typescript
         *   const defaultFontSet = this.iconService.defaultFontSet;
         * ```
         * @return {?}
         */
        function () {
            return this._fontSet;
        },
        /**
         *  Sets the default font set.
         *```typescript
         *   this.iconService.defaultFontSet = 'svg-flags';
         * ```
         */
        set: /**
         *  Sets the default font set.
         * ```typescript
         *   this.iconService.defaultFontSet = 'svg-flags';
         * ```
         * @param {?} className
         * @return {?}
         */
        function (className) {
            this._fontSet = className;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.
     *```typescript
     *   this.iconService.registerFontSetAlias('material', 'material-icons');
     * ```
     */
    /**
     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.
     * ```typescript
     *   this.iconService.registerFontSetAlias('material', 'material-icons');
     * ```
     * @template THIS
     * @this {THIS}
     * @param {?} alias
     * @param {?=} className
     * @return {THIS}
     */
    IgxIconService.prototype.registerFontSetAlias = /**
     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.
     * ```typescript
     *   this.iconService.registerFontSetAlias('material', 'material-icons');
     * ```
     * @template THIS
     * @this {THIS}
     * @param {?} alias
     * @param {?=} className
     * @return {THIS}
     */
    function (alias, className) {
        if (className === void 0) { className = alias; }
        (/** @type {?} */ (this))._fontSetAliases.set(alias, className);
        return (/** @type {?} */ (this));
    };
    /**
     *  Returns the custom class, if any, associated to a given fontSet.
     *```typescript
     *   const fontSetClass = this.iconService.fontSetClassName('material');
     * ```
     */
    /**
     *  Returns the custom class, if any, associated to a given fontSet.
     * ```typescript
     *   const fontSetClass = this.iconService.fontSetClassName('material');
     * ```
     * @param {?} alias
     * @return {?}
     */
    IgxIconService.prototype.fontSetClassName = /**
     *  Returns the custom class, if any, associated to a given fontSet.
     * ```typescript
     *   const fontSetClass = this.iconService.fontSetClassName('material');
     * ```
     * @param {?} alias
     * @return {?}
     */
    function (alias) {
        return this._fontSetAliases.get(alias) || alias;
    };
    /**
     *  Adds an SVG image to the cache. SVG source is an url.
     *```typescript
     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
     * ```
     */
    /**
     *  Adds an SVG image to the cache. SVG source is an url.
     * ```typescript
     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?} url
     * @param {?=} fontSet
     * @return {?}
     */
    IgxIconService.prototype.addSvgIcon = /**
     *  Adds an SVG image to the cache. SVG source is an url.
     * ```typescript
     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?} url
     * @param {?=} fontSet
     * @return {?}
     */
    function (iconName, url, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        if (iconName && url) {
            /** @type {?} */
            var safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);
            if (!safeUrl) {
                throw new Error("The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"" + url + "\".");
            }
            /** @type {?} */
            var sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);
            if (!sanitizedUrl) {
                throw new Error("The URL provided was not trusted as a resource URL: \"" + url + "\".");
            }
            this.fetchSvg(iconName, url, fontSet);
        }
        else {
            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');
        }
    };
    /**
     *  Adds an SVG image to the cache. SVG source is its text.
     *```typescript
     *   this.iconService.addSvgIcon('simple', '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
     *   <path d="M74 74h54v54H74" /></svg>', 'svg-flags');
     * ```
     */
    /**
     *  Adds an SVG image to the cache. SVG source is its text.
     * ```typescript
     *   this.iconService.addSvgIcon('simple', '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
     *   <path d="M74 74h54v54H74" /></svg>', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?} iconText
     * @param {?=} fontSet
     * @return {?}
     */
    IgxIconService.prototype.addSvgIconFromText = /**
     *  Adds an SVG image to the cache. SVG source is its text.
     * ```typescript
     *   this.iconService.addSvgIcon('simple', '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
     *   <path d="M74 74h54v54H74" /></svg>', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?} iconText
     * @param {?=} fontSet
     * @return {?}
     */
    function (iconName, iconText, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        if (iconName && iconText) {
            this.cacheSvgIcon(iconName, iconText, fontSet);
        }
        else {
            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');
        }
    };
    /**
     *  Returns whether a given SVG image is present in the cache.
     *```typescript
     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');
     * ```
     */
    /**
     *  Returns whether a given SVG image is present in the cache.
     * ```typescript
     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?=} fontSet
     * @return {?}
     */
    IgxIconService.prototype.isSvgIconCached = /**
     *  Returns whether a given SVG image is present in the cache.
     * ```typescript
     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?=} fontSet
     * @return {?}
     */
    function (iconName, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        /** @type {?} */
        var iconKey = this.getSvgIconKey(iconName, fontSet);
        return this._cachedSvgIcons.has(iconKey);
    };
    /**
     *  Returns the key of a cached SVG image.
     *```typescript
     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');
     * ```
     */
    /**
     *  Returns the key of a cached SVG image.
     * ```typescript
     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?=} fontSet
     * @return {?}
     */
    IgxIconService.prototype.getSvgIconKey = /**
     *  Returns the key of a cached SVG image.
     * ```typescript
     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');
     * ```
     * @param {?} iconName
     * @param {?=} fontSet
     * @return {?}
     */
    function (iconName, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        return fontSet + '_' + iconName;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} iconName
     * @param {?} url
     * @param {?=} fontSet
     * @return {?}
     */
    IgxIconService.prototype.fetchSvg = /**
     * @hidden
     * @private
     * @param {?} iconName
     * @param {?} url
     * @param {?=} fontSet
     * @return {?}
     */
    function (iconName, url, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        /** @type {?} */
        var instance = this;
        /** @type {?} */
        var httpRequest = new XMLHttpRequest();
        httpRequest.open('GET', url, true);
        httpRequest.responseType = 'text';
        // load â€“ when the result is ready, that includes HTTP errors like 404.
        httpRequest.onload = function (event) {
            /** @type {?} */
            var request = (/** @type {?} */ (event.target));
            if (request.status === 200) {
                instance.cacheSvgIcon(iconName, request.responseText, fontSet);
            }
            else {
                throw new Error("Could not fetch SVG from url: " + url + "; error: " + request.status + " (" + request.statusText + ")");
            }
        };
        // error â€“ when the request couldnâ€™t be made, e.g.network down or invalid URL.
        httpRequest.onerror = function (event) {
            /** @type {?} */
            var request = (/** @type {?} */ (event.target));
            throw new Error("Could not fetch SVG from url: " + url + "; error status code: " + request.status + " (" + request.statusText + ")");
        };
        httpRequest.send();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} iconName
     * @param {?} value
     * @param {?=} fontSet
     * @return {?}
     */
    IgxIconService.prototype.cacheSvgIcon = /**
     * @hidden
     * @private
     * @param {?} iconName
     * @param {?} value
     * @param {?=} fontSet
     * @return {?}
     */
    function (iconName, value, fontSet) {
        if (fontSet === void 0) { fontSet = ''; }
        if (iconName && value) {
            this.ensureSvgContainerCreated();
            /** @type {?} */
            var div = this._document.createElement('DIV');
            div.innerHTML = value;
            /** @type {?} */
            var svg = (/** @type {?} */ (div.querySelector('svg')));
            if (svg) {
                /** @type {?} */
                var iconKey = this.getSvgIconKey(iconName, fontSet);
                svg.setAttribute('id', iconKey);
                svg.setAttribute('fit', '');
                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
                if (this._cachedSvgIcons.has(iconKey)) {
                    /** @type {?} */
                    var oldChild = this._svgContainer.querySelector("svg[id='" + iconKey + "']");
                    this._svgContainer.removeChild(oldChild);
                }
                this._svgContainer.appendChild(svg);
                this._cachedSvgIcons.add(iconKey);
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    IgxIconService.prototype.ensureSvgContainerCreated = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        if (!this._svgContainer) {
            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');
            if (!this._svgContainer) {
                this._svgContainer = this._document.createElement('DIV');
                this._svgContainer.classList.add('igx-svg-container');
                this._document.documentElement.appendChild(this._svgContainer);
            }
        }
    };
    IgxIconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IgxIconService.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ IgxIconService.ngInjectableDef = i0.defineInjectable({ factory: function IgxIconService_Factory() { return new IgxIconService(i0.inject(i1.DomSanitizer), i0.inject(i2.DOCUMENT)); }, token: IgxIconService, providedIn: "root" });
    return IgxIconService;
}());
export { IgxIconService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxIconService.prototype._fontSet;
    /**
     * @type {?}
     * @private
     */
    IgxIconService.prototype._fontSetAliases;
    /**
     * @type {?}
     * @private
     */
    IgxIconService.prototype._svgContainer;
    /**
     * @type {?}
     * @private
     */
    IgxIconService.prototype._cachedSvgIcons;
    /**
     * @type {?}
     * @private
     */
    IgxIconService.prototype._sanitizer;
    /**
     * @type {?}
     * @private
     */
    IgxIconService.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,