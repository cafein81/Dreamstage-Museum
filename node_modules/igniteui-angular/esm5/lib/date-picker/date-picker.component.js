/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule, formatDate } from '@angular/common';
import { Component, ContentChild, EventEmitter, HostBinding, Input, NgModule, Output, ViewChild, ElementRef, TemplateRef, Inject, ChangeDetectorRef, HostListener, NgModuleRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarModule, IgxCalendarSubheaderTemplateDirective, WEEKDAYS, isDateInRanges } from '../calendar/index';
import { IgxIconModule } from '../icon/index';
import { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';
import { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';
import { filter, takeUntil, throttle } from 'rxjs/operators';
import { IgxOverlayService, AbsoluteScrollStrategy, AutoPositionStrategy } from '../services/index';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxMaskModule } from '../directives/mask/mask.directive';
import { DatePickerUtil } from './date-picker.utils';
import { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';
import { isIE } from '../core/utils';
import { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';
import { IgxCalendarContainerComponent } from './calendar-container.component';
import { InteractionMode } from '../core/enums';
import { fadeIn, fadeOut } from '../animations/fade';
import { DeprecateProperty } from '../core/deprecateDecorators';
/** @type {?} */
var NEXT_ID = 0;
/**
 * This interface is used to provide information about date picker reference and its current value
 * when onDisabledDate event is fired.
 * @record
 */
export function IDatePickerDisabledDateEventArgs() { }
if (false) {
    /** @type {?} */
    IDatePickerDisabledDateEventArgs.prototype.datePicker;
    /** @type {?} */
    IDatePickerDisabledDateEventArgs.prototype.currentValue;
}
/**
 * This interface is used to provide information about date picker reference and its previously valid value
 * when onValidationFailed event is fired.
 * @record
 */
export function IDatePickerValidationFailedEventArgs() { }
if (false) {
    /** @type {?} */
    IDatePickerValidationFailedEventArgs.prototype.datePicker;
    /** @type {?} */
    IDatePickerValidationFailedEventArgs.prototype.prevValue;
}
/**
 * This interface is used to configure calendar format view options.
 * @record
 */
export function IFormatViews() { }
if (false) {
    /** @type {?|undefined} */
    IFormatViews.prototype.day;
    /** @type {?|undefined} */
    IFormatViews.prototype.month;
    /** @type {?|undefined} */
    IFormatViews.prototype.year;
}
/**
 * This interface is used to configure calendar format options.
 * @record
 */
export function IFormatOptions() { }
if (false) {
    /** @type {?|undefined} */
    IFormatOptions.prototype.day;
    /** @type {?|undefined} */
    IFormatOptions.prototype.month;
    /** @type {?|undefined} */
    IFormatOptions.prototype.weekday;
    /** @type {?|undefined} */
    IFormatOptions.prototype.year;
}
/** @enum {string} */
var PredefinedFormatOptions = {
    ShortDate: 'shortDate',
    MediumDate: 'mediumDate',
    LongDate: 'longDate',
    FullDate: 'fullDate',
};
export { PredefinedFormatOptions };
/**
 * **Ignite UI for Angular Date Picker** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)
 *
 * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.
 *
 * Example:
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
var IgxDatePickerComponent = /** @class */ (function () {
    function IgxDatePickerComponent(_overlayService, element, _cdr, _moduleRef) {
        this._overlayService = _overlayService;
        this.element = element;
        this._cdr = _cdr;
        this._moduleRef = _moduleRef;
        /**
         * An \@Input property that sets the `IgxDatePickerComponent` label.
         * The default label is 'Date'.
         * ```html
         * <igx-date-picker [label]="Calendar"></igx-date-picker>
         * ```
         */
        this.label = 'Date';
        /**
         * An \@Input property that sets the `IgxDatePickerComponent` label visibility.
         * By default the visibility is set to true.
         * <igx-date-picker [labelVisibility]="false"></igx-date-picker>
         */
        this.labelVisibility = true;
        /**
         * An \@Input property that sets on which day the week starts.
         * ```html
         * <igx-date-picker [weekStart]="WEEKDAYS.FRIDAY" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
         * ```html
         * <igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.id = "igx-date-picker-" + NEXT_ID++;
        /**
         * An \@Input property that sets the orientation of the `IgxDatePickerComponent` header.
         * ```html
         * <igx-date-picker [vertical]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.vertical = false;
        /**
         * An \@Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.
         * ```html
         * <igx-date-picker mode="dropdown"></igx-date-picker>
         * ```
         */
        this.mode = InteractionMode.Dialog;
        /**
         * An \@Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.
         * ```html
         * <igx-date-picker [isSpinLoop]="false"></igx-date-picker>
         * ```
         */
        this.isSpinLoop = true;
        /**
         * An event that is emitted when the `IgxDatePickerComponent` calendar is opened.
         */
        this.onOpened = new EventEmitter();
        /**
         * An event that is emitted after the `IgxDatePickerComponent` is closed.
         */
        this.onClosed = new EventEmitter();
        /**
         * An event that is emitted when the `IgxDatePickerComponent` is being closed.
         */
        this.onClosing = new EventEmitter();
        /**
         * An \@Output property that is fired when selection is made in the calendar.
         * ```typescript
         * public selection(event){
         *    alert("A date has been selected!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onSelection)="selection($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.onSelection = new EventEmitter();
        /**
         * An \@Output property that fires when the user types/spins to a disabled date in the date-picker editor.
         * ```typescript
         * public onDisabledDate(event){
         *    alert("This date is disabled!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onDisabledDate)="onDisabledDate($event)"></igx-date-picker>
         * ```
         */
        this.onDisabledDate = new EventEmitter();
        /**
         * An \@Output property that fires when the user types/spins invalid date in the date-picker editor.
         * ```typescript
         * public onValidationFailed(event){
         *    alert("This date is not valid!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onValidationFailed)="onValidationFailed($event)"></igx-date-picker>
         * ```
         */
        this.onValidationFailed = new EventEmitter();
        this.hasHeader = true;
        this.collapsed = true;
        this.displayValuePipe = new DatePickerDisplayValuePipe(this);
        this.inputValuePipe = new DatePickerInputValuePipe(this);
        this.dateFormatParts = [];
        this.isEmpty = true;
        this.invalidDate = '';
        this.spinDelta = 1;
        this.defaultLocale = 'en';
        this.calendarHeight = 400;
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        this._destroy$ = new Subject();
        this._disabledDates = null;
        this._specialDates = null;
        this._onOpen = new EventEmitter();
        this._onClose = new EventEmitter();
        this._onTouchedCallback = function () { };
        this._onChangeCallback = function () { };
    }
    Object.defineProperty(IgxDatePickerComponent.prototype, "formatOptions", {
        /**
         *Returns the format options of the `IgxDatePickerComponent`.
         *```typescript
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *ngAfterViewInit(){
         *    let formatOptions = this.datePicker.formatOptions;
         *}
         *```
         */
        get: /**
         * Returns the format options of the `IgxDatePickerComponent`.
         * ```typescript
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * ngAfterViewInit(){
         *    let formatOptions = this.datePicker.formatOptions;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._formatOptions;
        },
        /**
         *Sets the format options of the `IgxDatePickerComponent`.
         *```typescript
         *public Options;
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *ngAfterViewInit(){
         *    this.Options = {
         *        day: "numeric",
         *        month: "long",
         *        weekday: "long",
         *        year: "numeric"
         *    }
         *this.datePicker.formatOptions = this.Options;
         *}
         *```
         */
        set: /**
         * Sets the format options of the `IgxDatePickerComponent`.
         * ```typescript
         * public Options;
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * ngAfterViewInit(){
         *    this.Options = {
         *        day: "numeric",
         *        month: "long",
         *        weekday: "long",
         *        year: "numeric"
         *    }
         * this.datePicker.formatOptions = this.Options;
         * }
         * ```
         * @param {?} formatOptions
         * @return {?}
         */
        function (formatOptions) {
            this._formatOptions = Object.assign(this._formatOptions, formatOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "format", {
        /**
         *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.
         *```typescript
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *ngAfterViewInit(){
         *    let format = this.datePicker.format;
         *}
         *```
         */
        get: /**
         * Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.
         * ```typescript
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * ngAfterViewInit(){
         *    let format = this.datePicker.format;
         * }
         * ```
         * @return {?}
         */
        function () {
            return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;
        },
        /**
        *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.
        *```typescript
        *@ViewChild("MyDatePicker")
        *public datePicker: IgxDatePickerComponent;
        *this.datePicker.format = 'yyyy-M-d';
        *}
        *```
        */
        set: /**
         * Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.
         * ```typescript
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * this.datePicker.format = 'yyyy-M-d';
         * }
         * ```
         * @param {?} format
         * @return {?}
         */
        function (format) {
            this._format = format;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "formatViews", {
        /**
         *Returns the format views of the `IgxDatePickerComponent`.
         *```typescript
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *ngAfterViewInit(){
         *    let formatViews = this.datePicker.formatViews;
         *}
         *```
         */
        get: /**
         * Returns the format views of the `IgxDatePickerComponent`.
         * ```typescript
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * ngAfterViewInit(){
         *    let formatViews = this.datePicker.formatViews;
         * }
         * ```
         * @return {?}
         */
        function () {
            return this._formatViews;
        },
        /**
         *Sets the format views of the `IgxDatePickerComponent`.
         *```typescript
         *public Views;
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *ngAfterViewInit(){
         *    this.Views = {day:false, month: false, year:false};
         *    this.datePicker.formatViews = this.Views;
         *}
         *```
         */
        set: /**
         * Sets the format views of the `IgxDatePickerComponent`.
         * ```typescript
         * public Views;
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * ngAfterViewInit(){
         *    this.Views = {day:false, month: false, year:false};
         *    this.datePicker.formatViews = this.Views;
         * }
         * ```
         * @param {?} formatViews
         * @return {?}
         */
        function (formatViews) {
            this._formatViews = Object.assign(this._formatViews, formatViews);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "disabledDates", {
        /**
         * Gets the disabled dates descriptors.
         * ```typescript
         * let disabledDates = this.datepicker.disabledDates;
         * ```
         */
        get: /**
         * Gets the disabled dates descriptors.
         * ```typescript
         * let disabledDates = this.datepicker.disabledDates;
         * ```
         * @return {?}
         */
        function () {
            return this._disabledDates;
        },
        /**
         * Sets the disabled dates' descriptors.
         * ```typescript
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *ngAfterViewInit(){
         *    this.datePicker.disabledDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         *}
         *```
         */
        set: /**
         * Sets the disabled dates' descriptors.
         * ```typescript
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * ngAfterViewInit(){
         *    this.datePicker.disabledDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledDates = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "specialDates", {
        /**
         * Gets the special dates descriptors.
         * ```typescript
         * let specialDates = this.datepicker.specialDates;
         * ```
         */
        get: /**
         * Gets the special dates descriptors.
         * ```typescript
         * let specialDates = this.datepicker.specialDates;
         * ```
         * @return {?}
         */
        function () {
            return this._specialDates;
        },
        /**
         * Sets the special dates' descriptors.
         * ```typescript
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *ngAfterViewInit(){
         *    this.datePicker.specialDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         *}
         *```
         */
        set: /**
         * Sets the special dates' descriptors.
         * ```typescript
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * ngAfterViewInit(){
         *    this.datePicker.specialDates = [
         *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
         *     {type: DateRangeType.Weekends}];
         * }
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._specialDates = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "modalOverlaySettings", {
        get: /**
         * @return {?}
         */
        function () {
            return this._modalOverlay;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._modalOverlay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "dropDownOverlaySettings", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dropDownOverlay;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dropDownOverlay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "displayData", {
        /**
         *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.
         *```typescript
         *@ViewChild("MyDatePicker")
         *public datePicker: IgxDatePickerComponent;
         *public selection(event){
         *    let selectedDate = this.datePicker.displayData;
         *    alert(selectedDate);
         *}
         *```
         *```html
         *<igx-date-picker #MyDatePicker (onSelection)="selection()" todayButtonLabel="today"></igx-date-picker>
         *```
         */
        get: /**
         * Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.
         * ```typescript
         * \@ViewChild("MyDatePicker")
         * public datePicker: IgxDatePickerComponent;
         * public selection(event){
         *    let selectedDate = this.datePicker.displayData;
         *    alert(selectedDate);
         * }
         * ```
         * ```html
         * <igx-date-picker #MyDatePicker (onSelection)="selection()" todayButtonLabel="today"></igx-date-picker>
         * ```
         * @return {?}
         */
        function () {
            if (this.value) {
                return this._customFormatChecker(this.formatter, this.value);
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "transformedDate", {
        /**
         hidden
         */
        get: /**
         * hidden
         * @return {?}
         */
        function () {
            if (this._value) {
                this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);
                this.isEmpty = false;
            }
            else {
                this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';
            }
            return this._transformedDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._transformedDate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "template", {
        /**
         * Gets the input group template.
         * ```typescript
         * let template = this.template();
         * ```
         * @memberof IgxDatePickerComponent
         */
        get: /**
         * Gets the input group template.
         * ```typescript
         * let template = this.template();
         * ```
         * \@memberof IgxDatePickerComponent
         * @return {?}
         */
        function () {
            if (this.datePickerTemplateDirective) {
                return this.datePickerTemplateDirective.template;
            }
            return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "context", {
        /**
         * Gets the context passed to the input group template.
         * @memberof IgxDatePickerComponent
         */
        get: /**
         * Gets the context passed to the input group template.
         * \@memberof IgxDatePickerComponent
         * @return {?}
         */
        function () {
            var _this = this;
            return {
                disabled: this.disabled,
                disabledDates: this.disabledDates,
                displayData: this.displayData,
                format: this.format,
                isSpinLoop: this.isSpinLoop,
                label: this.label,
                labelVisibility: this.labelVisibility,
                locale: this.locale,
                mask: this.mask,
                mode: this.mode,
                specialDates: this.specialDates,
                value: this.value,
                openDialog: function () { _this.openDialog(); }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "value", {
        /**
         *An @Input property that gets/sets the selected date.
         *```typescript
         *public date: Date = new Date();
         *```
         *```html
         *<igx-date-picker [value]="date"></igx-date-picker>
         *```
         */
        get: /**
         * An \@Input property that gets/sets the selected date.
         * ```typescript
         * public date: Date = new Date();
         * ```
         * ```html
         * <igx-date-picker [value]="date"></igx-date-picker>
         * ```
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._value = date;
            this._onChangeCallback(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "onOpen", {
        /**
         * @deprecated Use 'onOpened' instead.
         *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.
         *```typescript
         *public open(event){
         *    alert("The date-picker calendar has been opened!");
         *}
         *```
         *```html
         *<igx-date-picker (onOpen)="open($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         *```
         */
        get: /**
         * @deprecated Use 'onOpened' instead.
         * An event that is emitted when the `IgxDatePickerComponent` calendar is opened.
         * ```typescript
         * public open(event){
         *    alert("The date-picker calendar has been opened!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onOpen)="open($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         * @return {?}
         */
        function () {
            return this._onOpen;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._onOpen = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDatePickerComponent.prototype, "onClose", {
        /**
         * @deprecated Use 'onClosed' instead.
         *"An event that is emitted when the `IgxDatePickerComponent` is closed.
         *```typescript
         *public close(event){
         *    alert("The date-picker has been closed!");
         *}
         *```
         *```html
         *<igx-date-picker (onClose)="close($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         *```
         */
        get: /**
         * @deprecated Use 'onClosed' instead.
         * "An event that is emitted when the `IgxDatePickerComponent` is closed.
         * ```typescript
         * public close(event){
         *    alert("The date-picker has been closed!");
         * }
         * ```
         * ```html
         * <igx-date-picker (onClose)="close($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         * @return {?}
         */
        function () {
            return this._onClose;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._onClose = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * @hidden
    */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDatePickerComponent.prototype.onSpaceClick = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.openDialog();
        event.preventDefault();
    };
    /**
     *Method that sets the selected date.
     *```typescript
     *public date = new Date();
     *@ViewChild("MyDatePicker")
     *public datePicker: IgxDatePickerComponent;
     *ngAfterViewInit(){
     *    this.datePicker.writeValue(this.date);
     *}
     *```
     *@param value The date you want to select.
     *@memberOf {@link IgxDatePickerComponent}
     */
    /**
     * Method that sets the selected date.
     * ```typescript
     * public date = new Date();
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    this.datePicker.writeValue(this.date);
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @param {?} value The date you want to select.
     * @return {?}
     */
    IgxDatePickerComponent.prototype.writeValue = /**
     * Method that sets the selected date.
     * ```typescript
     * public date = new Date();
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    this.datePicker.writeValue(this.date);
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @param {?} value The date you want to select.
     * @return {?}
     */
    function (value) {
        this.value = value;
        this._cdr.markForCheck();
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxDatePickerComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onChangeCallback = fn; };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxDatePickerComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onTouchedCallback = fn; };
    /** @hidden */
    /**
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.getEditElement = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputElement;
        if (this.mode === InteractionMode.DropDown) {
            inputElement = (this.editableInput) ? this.editableInput : this.input;
        }
        else {
            inputElement = (this.readonlyInput) ? this.readonlyInput : this.input;
        }
        return (inputElement) ? inputElement.nativeElement : null;
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this._positionSettings = {
            openAnimation: fadeIn,
            closeAnimation: fadeOut
        };
        this._dropDownOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy(this._positionSettings),
            outlet: this.outlet
        };
        this._modalOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true,
            outlet: this.outlet
        };
        this._overlayService.onOpening.pipe(filter(function (overlay) { return overlay.id === _this._componentID; }), takeUntil(this._destroy$)).subscribe(function (eventArgs) {
            _this._onOpening(eventArgs);
        });
        this._overlayService.onOpened.pipe(filter(function (overlay) { return overlay.id === _this._componentID; }), takeUntil(this._destroy$)).subscribe(function (eventArgs) {
            _this._onOpened(eventArgs);
        });
        this._overlayService.onClosed.pipe(filter(function (overlay) { return overlay.id === _this._componentID; }), takeUntil(this._destroy$)).subscribe(function () {
            _this._onClosed();
        });
        this._overlayService.onClosing.pipe(filter(function (overlay) { return overlay.id === _this._componentID; }), takeUntil(this._destroy$)).subscribe(function (event) {
            _this.onClosing.emit(event);
        });
        if (this.mode === InteractionMode.DropDown) {
            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);
            if (this.mask === undefined) {
                this.mask = DatePickerUtil.getMask(this.dateFormatParts);
            }
            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.mode === InteractionMode.DropDown && this.editableInput) {
            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(throttle(function () { return interval(0, animationFrameScheduler); }), takeUntil(this._destroy$)).subscribe(function (res) { return _this.onKeyDown(res); });
        }
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._componentID) {
            this._overlayService.hide(this._componentID);
        }
        this._destroy$.next(true);
        this._destroy$.complete();
    };
    /**
     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.
     *```typescript
     *@ViewChild("MyDatePicker")
     *public datePicker: IgxDatePickerComponent;
     *ngAfterViewInit(){
     *this.datePicker.triggerTodaySelection();
     *}
     *```
     *@memberOf {@link IgxDatePickerComponent}
     */
    /**
     * Selects today's date from calendar and change the input field value, \@calendar.viewDate and \@calendar.value.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.triggerTodaySelection();
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @return {?}
     */
    IgxDatePickerComponent.prototype.triggerTodaySelection = /**
     * Selects today's date from calendar and change the input field value, \@calendar.viewDate and \@calendar.value.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.triggerTodaySelection();
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @return {?}
     */
    function () {
        /** @type {?} */
        var today = new Date(Date.now());
        this.handleSelection(today);
    };
    /**
     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,
     * which will fire @handleSelection method.
     *```typescript
     *@ViewChild("MyDatePicker")
     *public datePicker: IgxDatePickerComponent;
     *ngAfterViewInit(){
     *this.datePicker.selectDate(this.date);
     *}
     * ```
     * @param date passed date that has to be set to the calendar.
     * @memberOf {@link IgxDatePickerComponent}
     */
    /**
     * Change the calendar selection and calling this method will emit the \@calendar.onSelection event,
     * which will fire \@handleSelection method.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.selectDate(this.date);
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @param {?} date passed date that has to be set to the calendar.
     * @return {?}
     */
    IgxDatePickerComponent.prototype.selectDate = /**
     * Change the calendar selection and calling this method will emit the \@calendar.onSelection event,
     * which will fire \@handleSelection method.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.selectDate(this.date);
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @param {?} date passed date that has to be set to the calendar.
     * @return {?}
     */
    function (date) {
        this.value = date;
        this.onSelection.emit(date);
        this._onChangeCallback(date);
    };
    /**
     * Deselects the calendar date.
     *```typescript
     *@ViewChild("MyDatePicker")
     *public datePicker: IgxDatePickerComponent;
     *ngAfterViewInit(){
     *this.datePicker.deselectDate();
     *}
     * ```
     * @memberOf {@link IgxDatePickerComponent}
     */
    /**
     * Deselects the calendar date.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.deselectDate();
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @return {?}
     */
    IgxDatePickerComponent.prototype.deselectDate = /**
     * Deselects the calendar date.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     * this.datePicker.deselectDate();
     * }
     * ```
     * \@memberOf {\@link IgxDatePickerComponent}
     * @return {?}
     */
    function () {
        this.value = null;
        if (this.calendar) {
            this.calendar.deselectDate();
        }
        this._onChangeCallback(null);
    };
    /**
     * Open the calendar.
     *
     * @hidden
     */
    /**
     * Open the calendar.
     *
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.openDialog = /**
     * Open the calendar.
     *
     * @hidden
     * @return {?}
     */
    function () {
        if (!this.collapsed) {
            return;
        }
        switch (this.mode) {
            case InteractionMode.Dialog: {
                this.hasHeader = true;
                /** @type {?} */
                var modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;
                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);
                this._overlayService.show(this._componentID, modalOverlay);
                break;
            }
            case InteractionMode.DropDown: {
                this.hasHeader = false;
                /** @type {?} */
                var dropDownOverlay = void 0;
                // dropdown overlay settings are modified via input
                if (this.dropDownOverlaySettings !== undefined) {
                    dropDownOverlay = this._dropDownOverlay;
                }
                else {
                    dropDownOverlay = this._dropDownOverlaySettings;
                    /** @type {?} */
                    var dropDownTarget = void 0;
                    if (this.editableInputGroup) {
                        dropDownTarget = this.editableInputGroup.nativeElement;
                    }
                    else {
                        if (this.templateDropDownTarget) {
                            // if the date picker is re-templated, set an element marked with #dropDownTarget as a target to the drop-down
                            dropDownTarget = this.templateDropDownTarget.nativeElement;
                        }
                        else {
                            throw new Error('There is no target element for the dropdown to attach. Mark an element with #dropDownTarget.');
                        }
                    }
                    dropDownOverlay.positionStrategy.settings.target = dropDownTarget;
                }
                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, dropDownOverlay, this._moduleRef);
                this._overlayService.show(this._componentID, dropDownOverlay);
                break;
            }
        }
    };
    /**
     * Close the calendar.
     *
     * @hidden
     */
    /**
     * Close the calendar.
     *
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.closeCalendar = /**
     * Close the calendar.
     *
     * @hidden
     * @return {?}
     */
    function () {
        this._overlayService.hide(this._componentID);
    };
    /**
     * Clear the input field, date picker value and calendar selection.
     *
     * @hidden
     */
    /**
     * Clear the input field, date picker value and calendar selection.
     *
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.clear = /**
     * Clear the input field, date picker value and calendar selection.
     *
     * @hidden
     * @return {?}
     */
    function () {
        this.isEmpty = true;
        this.invalidDate = '';
        this.deselectDate();
        this._setCursorPosition(0);
    };
    /**
     * Evaluates when @calendar.onSelection event was fired
     * and update the input value.
     *
     * @param event selected value from calendar.
     *
     * @hidden
     */
    /**
     * Evaluates when \@calendar.onSelection event was fired
     * and update the input value.
     *
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxDatePickerComponent.prototype.handleSelection = /**
     * Evaluates when \@calendar.onSelection event was fired
     * and update the input value.
     *
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.value) {
            date.setHours(this.value.getHours());
            date.setMinutes(this.value.getMinutes());
            date.setSeconds(this.value.getSeconds());
            date.setMilliseconds(this.value.getMilliseconds());
        }
        this.value = date;
        this.calendar.viewDate = date;
        this._onChangeCallback(date);
        this.closeCalendar();
        this.onSelection.emit(date);
    };
    /**
    * Evaluates when the input blur event was fired
    * and re-calculate the date picker value.
    *
    * @param event
    *
    * @hidden
    */
    /**
     * Evaluates when the input blur event was fired
     * and re-calculate the date picker value.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    IgxDatePickerComponent.prototype.onBlur = /**
     * Evaluates when the input blur event was fired
     * and re-calculate the date picker value.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    function (event) {
        this._isInEditMode = false;
        this.calculateDate(event.target.value, event.type);
    };
    /**
    * Evaluates when the input focus event was fired
    * and re-calculate the editor text.
    *
    * @param event
    * @hidden
    */
    /**
     * Evaluates when the input focus event was fired
     * and re-calculate the editor text.
     *
     * @hidden
     * @return {?}
     */
    IgxDatePickerComponent.prototype.onFocus = /**
     * Evaluates when the input focus event was fired
     * and re-calculate the editor text.
     *
     * @hidden
     * @return {?}
     */
    function () {
        this._isInEditMode = true;
        if (this.value && this.invalidDate === '') {
            this._transformedDate = this._getEditorDate(this.value);
        }
    };
    /**
    * Evaluates when the keydown event was fired for up/down keys
    * to provide spinning of date parts.
    *
    * @param event
    *
    * @hidden
    */
    /**
     * Evaluates when the keydown event was fired for up/down keys
     * to provide spinning of date parts.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    IgxDatePickerComponent.prototype.onKeyDown = /**
     * Evaluates when the keydown event was fired for up/down keys
     * to provide spinning of date parts.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    function (event) {
        switch (event.key) {
            case "ArrowUp" /* UP_ARROW */:
            case "Up" /* UP_ARROW_IE */:
                event.preventDefault();
                event.stopPropagation();
                this.spinValue(event.target.value, 1, event.type);
                break;
            case "ArrowDown" /* DOWN_ARROW */:
            case "Down" /* DOWN_ARROW_IE */:
                if (event.altKey) {
                    this.openDialog();
                }
                else {
                    event.preventDefault();
                    event.stopPropagation();
                    this.spinValue(event.target.value, -1, event.type);
                }
                break;
            default:
                break;
        }
    };
    /**
    * Evaluates when the mouse wheel event was fired
    * to provide spinning of date parts.
    *
    * @param event
    *
    * @hidden
    */
    /**
     * Evaluates when the mouse wheel event was fired
     * to provide spinning of date parts.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    IgxDatePickerComponent.prototype.onWheel = /**
     * Evaluates when the mouse wheel event was fired
     * to provide spinning of date parts.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    function (event) {
        if (this._isInEditMode) {
            event.preventDefault();
            event.stopPropagation();
            /** @type {?} */
            var sign = (event.deltaY > 0) ? -1 : 1;
            this.spinValue(event.target.value, sign, event.type);
        }
    };
    /**
    * Evaluates when input event was fired in editor.
    *
    * @param event
    *
    * @hidden
    */
    /**
     * Evaluates when input event was fired in editor.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    IgxDatePickerComponent.prototype.onInput = /**
     * Evaluates when input event was fired in editor.
     *
     * @hidden
     * @param {?} event
     *
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var targetValue = event.target.value;
        /** @type {?} */
        var cursorPosition = this._getCursorPosition();
        /** @type {?} */
        var checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);
        this._isInEditMode = true;
        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {
            this.isEmpty = false;
        }
        // If all date parts are completed, change the date-picker value, stay in edit mode
        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {
            this._transformedDate = targetValue;
            this.calculateDate(targetValue, event.type);
            this._setCursorPosition(cursorPosition);
        }
        else if (checkInput === 'partial') {
            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.
            this.deselectDate();
            requestAnimationFrame(function () {
                _this.getEditElement().value = targetValue;
                _this._setCursorPosition(cursorPosition);
            });
        }
        else if (checkInput === 'empty') {
            // Total clean-up as input is deleted.
            this.isEmpty = true;
            this.deselectDate();
        }
    };
    /**
     * @private
     * @param {?} dateString
     * @param {?} invokedByEvent
     * @return {?}
     */
    IgxDatePickerComponent.prototype.calculateDate = /**
     * @private
     * @param {?} dateString
     * @param {?} invokedByEvent
     * @return {?}
     */
    function (dateString, invokedByEvent) {
        if (dateString !== '') {
            /** @type {?} */
            var prevDateValue = this.value;
            /** @type {?} */
            var inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;
            /** @type {?} */
            var newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);
            if (newDateArray.state === "valid" /* Valid */) {
                /** @type {?} */
                var newValue = newDateArray.date;
                // Restore the time part if any
                if (prevDateValue) {
                    newValue.setHours(prevDateValue.getHours());
                    newValue.setMinutes(prevDateValue.getMinutes());
                    newValue.setSeconds(prevDateValue.getSeconds());
                    newValue.setMilliseconds(prevDateValue.getMilliseconds());
                }
                if (this.disabledDates === null
                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {
                    this.value = newValue;
                    this.invalidDate = '';
                    this._onChangeCallback(newValue);
                }
                else {
                    /** @type {?} */
                    var args = {
                        datePicker: this,
                        currentValue: newValue,
                    };
                    this.onDisabledDate.emit(args);
                }
            }
            else {
                /** @type {?} */
                var args = {
                    datePicker: this,
                    prevValue: prevDateValue
                };
                this.invalidDate = dateString;
                this.onValidationFailed.emit(args);
            }
        }
    };
    /**
     * @private
     * @param {?} inputValue
     * @param {?} sign
     * @param {?} eventType
     * @return {?}
     */
    IgxDatePickerComponent.prototype.spinValue = /**
     * @private
     * @param {?} inputValue
     * @param {?} sign
     * @param {?} eventType
     * @return {?}
     */
    function (inputValue, sign, eventType) {
        this._isInEditMode = true;
        this.isEmpty = false;
        /** @type {?} */
        var cursorPosition = this._getCursorPosition();
        /** @type {?} */
        var modifiedInputValue = DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);
        this.getEditElement().value = modifiedInputValue;
        this._setCursorPosition(cursorPosition);
        /** @type {?} */
        var checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);
        if (checkInput === 'complete') {
            this._isInEditMode = true;
            this.calculateDate(modifiedInputValue, eventType);
            this._setCursorPosition(cursorPosition);
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxDatePickerComponent.prototype._onOpening = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._initializeCalendarContainer(event.componentRef.instance);
        this.collapsed = false;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxDatePickerComponent.prototype._onOpened = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._onTouchedCallback();
        this.onOpened.emit(this);
        // TODO: remove this line after deprecating 'onOpen'
        this._onOpen.emit(this);
        if (this.calendar) {
            this._focusCalendarDate();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxDatePickerComponent.prototype._onClosed = /**
     * @private
     * @return {?}
     */
    function () {
        this.collapsed = true;
        this._componentID = null;
        this.onClosed.emit(this);
        // TODO: remove this line after deprecating 'onClose'
        this.onClose.emit(this);
        if (this.getEditElement()) {
            this.getEditElement().focus();
        }
    };
    /**
     * @private
     * @param {?} componentInstance
     * @return {?}
     */
    IgxDatePickerComponent.prototype._initializeCalendarContainer = /**
     * @private
     * @param {?} componentInstance
     * @return {?}
     */
    function (componentInstance) {
        var _this = this;
        this.calendar = componentInstance.calendar;
        /** @type {?} */
        var isVertical = (this.vertical && this.mode === InteractionMode.Dialog);
        this.calendar.hasHeader = this.hasHeader;
        this.calendar.formatOptions = this.formatOptions;
        this.calendar.formatViews = this.formatViews;
        this.calendar.locale = this.locale;
        this.calendar.vertical = isVertical;
        this.calendar.weekStart = this.weekStart;
        this.calendar.specialDates = this.specialDates;
        this.calendar.disabledDates = this.disabledDates;
        this.calendar.headerTemplate = this.headerTemplate;
        this.calendar.subheaderTemplate = this.subheaderTemplate;
        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe(function (ev) { return _this.handleSelection(ev); });
        if (this.value) {
            this.calendar.value = this.value;
            this.calendar.viewDate = this.value;
        }
        componentInstance.mode = this.mode;
        componentInstance.vertical = isVertical;
        componentInstance.cancelButtonLabel = this.cancelButtonLabel;
        componentInstance.todayButtonLabel = this.todayButtonLabel;
        componentInstance.datePickerActions = this.datePickerActionsDirective;
        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(function () { return _this.closeCalendar(); });
        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(function () { return _this.triggerTodaySelection(); });
    };
    // Focus a date, after the calendar appearance into DOM.
    // Focus a date, after the calendar appearance into DOM.
    /**
     * @private
     * @return {?}
     */
    IgxDatePickerComponent.prototype._focusCalendarDate = 
    // Focus a date, after the calendar appearance into DOM.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        requestAnimationFrame(function () {
            _this.calendar.daysView.focusActiveDate();
        });
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxDatePickerComponent.prototype._setLocaleToDate = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (isIE()) {
            // this is a workaround fixing the following IE11 issue:
            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that
            // precedes each portion that comprises the total date... For more information read this article:
            // tslint:disable-next-line: max-line-length
            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/
            /** @type {?} */
            var localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());
            return localeDateStrIE.toLocaleDateString(this.locale);
        }
        return value.toLocaleDateString(this.locale);
    };
    /**
     * @private
     * @return {?}
     */
    IgxDatePickerComponent.prototype._getCursorPosition = /**
     * @private
     * @return {?}
     */
    function () {
        return this.getEditElement().selectionStart;
    };
    /**
     * @private
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    IgxDatePickerComponent.prototype._setCursorPosition = /**
     * @private
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    function (start, end) {
        var _this = this;
        if (end === void 0) { end = start; }
        requestAnimationFrame(function () {
            _this.getEditElement().setSelectionRange(start, end);
        });
    };
    /**
     * Apply custom user formatter upon date.
     * @param formatter custom formatter function.
     * @param date passed date
     */
    /**
     * Apply custom user formatter upon date.
     * @private
     * @param {?} formatter custom formatter function.
     * @param {?} date passed date
     * @return {?}
     */
    IgxDatePickerComponent.prototype._customFormatChecker = /**
     * Apply custom user formatter upon date.
     * @private
     * @param {?} formatter custom formatter function.
     * @param {?} date passed date
     * @return {?}
     */
    function (formatter, date) {
        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);
    };
    /*
    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode
    * using @angular/common formatDate method: https://angular.io/api/common/formatDate
    * @param  value: string | number | Date
    * @returns formatted string
    */
    /*
        * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode
        * using @angular/common formatDate method: https://angular.io/api/common/formatDate
        * @param  value: string | number | Date
        * @returns formatted string
        */
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxDatePickerComponent.prototype._getDisplayDate = /*
        * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode
        * using @angular/common formatDate method: https://angular.io/api/common/formatDate
        * @param  value: string | number | Date
        * @returns formatted string
        */
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.format && !this.formatter) {
            /** @type {?} */
            var locale = this.locale || this.defaultLocale;
            return formatDate(value, this.format, locale);
        }
        else {
            return this._customFormatChecker(this.formatter, value);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxDatePickerComponent.prototype._getEditorDate = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var locale = this.locale || this.defaultLocale;
        /** @type {?} */
        var changedValue = (value) ? formatDate(value, this.mask, locale) : '';
        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);
    };
    IgxDatePickerComponent.decorators = [
        { type: Component, args: [{
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxDatePickerComponent,
                            multi: true
                        }],
                    // tslint:disable-next-line:component-selector
                    selector: 'igx-date-picker',
                    template: "<ng-template #readOnlyDatePickerTemplate>\n    <igx-input-group (click)=\"openDialog()\">\n        <igx-prefix>\n            <igx-icon>today</igx-icon>\n        </igx-prefix>\n        <label *ngIf=\"labelVisibility\" igxLabel>{{label}}</label>\n        <input #readonlyInput class=\"igx-date-picker__input-date\" igxInput [value]=\"displayData || ''\"\n            [disabled]=\"disabled\" readonly />\n    </igx-input-group>\n</ng-template>\n\n<ng-template #editableDatePickerTemplate>\n    <igx-input-group #editableInputGroup [supressInputAutofocus]=\"true\">\n        <igx-prefix (click)=\"openDialog()\">\n            <igx-icon>today</igx-icon>\n        </igx-prefix>\n        <label *ngIf=\"labelVisibility\" igxLabel>{{label}}</label>\n        <input #editableInput class=\"igx-date-picker__input-date\" igxInput type=\"text\" [value]=\"transformedDate\"\n            [igxMask]=\"inputMask\" [placeholder]=\"mask\" [disabled]=\"disabled\" [displayValuePipe]=\"displayValuePipe\"\n            [focusedValuePipe]=\"inputValuePipe\" (blur)=\"onBlur($event)\" (wheel)=\"onWheel($event)\"\n            (input)=\"onInput($event)\" (focus)=\"onFocus()\" />\n        <igx-suffix *ngIf=\"!isEmpty\" (click)=\"clear()\">\n            <igx-icon>clear</igx-icon>\n        </igx-suffix>\n    </igx-input-group>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>",
                    styles: ["\n        :host {\n            display: block;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    IgxDatePickerComponent.ctorParameters = function () { return [
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: NgModuleRef }
    ]; };
    IgxDatePickerComponent.propDecorators = {
        label: [{ type: Input }],
        labelVisibility: [{ type: Input }],
        locale: [{ type: Input }],
        weekStart: [{ type: Input }],
        formatOptions: [{ type: Input }],
        format: [{ type: Input }],
        mask: [{ type: Input }],
        formatViews: [{ type: Input }],
        disabledDates: [{ type: Input }],
        specialDates: [{ type: Input }],
        modalOverlaySettings: [{ type: Input }],
        dropDownOverlaySettings: [{ type: Input }],
        value: [{ type: Input }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        formatter: [{ type: Input }],
        disabled: [{ type: Input }],
        vertical: [{ type: Input }],
        todayButtonLabel: [{ type: Input }],
        cancelButtonLabel: [{ type: Input }],
        mode: [{ type: Input }],
        isSpinLoop: [{ type: Input }],
        outlet: [{ type: Input }],
        onOpen: [{ type: Output }],
        onOpened: [{ type: Output }],
        onClose: [{ type: Output }],
        onClosed: [{ type: Output }],
        onClosing: [{ type: Output }],
        onSelection: [{ type: Output }],
        onDisabledDate: [{ type: Output }],
        onValidationFailed: [{ type: Output }],
        readOnlyDatePickerTemplate: [{ type: ViewChild, args: ['readOnlyDatePickerTemplate', { read: TemplateRef },] }],
        editableDatePickerTemplate: [{ type: ViewChild, args: ['editableDatePickerTemplate', { read: TemplateRef },] }],
        editableInputGroup: [{ type: ViewChild, args: ['editableInputGroup', { read: ElementRef },] }],
        templateDropDownTarget: [{ type: ContentChild, args: ['dropDownTarget', { read: ElementRef },] }],
        editableInput: [{ type: ViewChild, args: ['editableInput', { read: ElementRef },] }],
        readonlyInput: [{ type: ViewChild, args: ['readonlyInput', { read: ElementRef },] }],
        input: [{ type: ContentChild, args: [IgxInputDirective,] }],
        datePickerTemplateDirective: [{ type: ContentChild, args: [IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective },] }],
        headerTemplate: [{ type: ContentChild, args: [IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective },] }],
        subheaderTemplate: [{ type: ContentChild, args: [IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective },] }],
        datePickerActionsDirective: [{ type: ContentChild, args: [IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective },] }],
        onSpaceClick: [{ type: HostListener, args: ['keydown.spacebar', ['$event'],] }, { type: HostListener, args: ['keydown.space', ['$event'],] }]
    };
    tslib_1.__decorate([
        DeprecateProperty("'onOpen' @Output property is deprecated. Use 'onOpened' instead."),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [EventEmitter])
    ], IgxDatePickerComponent.prototype, "onOpen", null);
    tslib_1.__decorate([
        DeprecateProperty("'onClose' @Output property is deprecated. Use 'onClosed' instead."),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [EventEmitter])
    ], IgxDatePickerComponent.prototype, "onClose", null);
    return IgxDatePickerComponent;
}());
export { IgxDatePickerComponent };
if (false) {
    /**
     * An \@Input property that sets the `IgxDatePickerComponent` label.
     * The default label is 'Date'.
     * ```html
     * <igx-date-picker [label]="Calendar"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.label;
    /**
     * An \@Input property that sets the `IgxDatePickerComponent` label visibility.
     * By default the visibility is set to true.
     * <igx-date-picker [labelVisibility]="false"></igx-date-picker>
     * @type {?}
     */
    IgxDatePickerComponent.prototype.labelVisibility;
    /**
     * An \@Input property that sets locales. Default locale is en.
     * ```html
     * <igx-date-picker locale="ja-JP" [value]="date"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.locale;
    /**
     * An \@Input property that sets on which day the week starts.
     * ```html
     * <igx-date-picker [weekStart]="WEEKDAYS.FRIDAY" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.weekStart;
    /**
     * Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.
     * ```typescript
     * \@ViewChild("MyDatePicker")
     * public datePicker: IgxDatePickerComponent;
     * ngAfterViewInit(){
     *    let mask = this.datePicker.mask;
     * }
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.mask;
    /**
     * An \@Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.id;
    /**
     * An \@Input property that applies a custom formatter function on the selected or passed date.
     * ```typescript
     * public date: Date = new Date();
     * private dayFormatter = new Intl.DateTimeFormat("en", { weekday: "long" });
     * private monthFormatter = new Intl.DateTimeFormat("en", { month: "long" });
     * public formatter = (date: Date) => { return `You selected
     *                     ${this.dayFormatter.format(date)},
     *                     ${date.getDate()} ${this.monthFormatter.format(date)},
     *                     ${date.getFullYear()}`;
     * }
     * ```
     * ```html
     * <igx-date-picker [value]="date" [formatter]="formatter"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.formatter;
    /**
     * An \@Input property that disables the `IgxDatePickerComponent`.
     * ```html
     * <igx-date-picker [disabled]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.disabled;
    /**
     * An \@Input property that sets the orientation of the `IgxDatePickerComponent` header.
     * ```html
     * <igx-date-picker [vertical]="'true'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.vertical;
    /**
     * An \@Input property that renders today button with custom label.
     * ```html
     * <igx-date-picker cancelButtonLabel="cancel" todayButtonLabel="Tomorrow"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.todayButtonLabel;
    /**
     * An \@Input property that renders cancel button with custom label.
     * ```html
     * <igx-date-picker cancelButtonLabel="Close" todayButtonLabel="Today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.cancelButtonLabel;
    /**
     * An \@Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.
     * ```html
     * <igx-date-picker mode="dropdown"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.mode;
    /**
     * An \@Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.
     * ```html
     * <igx-date-picker [isSpinLoop]="false"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.isSpinLoop;
    /**
     * Determines the container the popup element should be attached to.
     *
     * ```html
     * <div igxOverlayOutlet #outlet="overlay-outlet"></div>
     * //..
     * <igx-date-picker [outlet]="outlet"></igx-date-picker>
     * //..
     * ```
     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.
     * @type {?}
     */
    IgxDatePickerComponent.prototype.outlet;
    /**
     * An event that is emitted when the `IgxDatePickerComponent` calendar is opened.
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onOpened;
    /**
     * An event that is emitted after the `IgxDatePickerComponent` is closed.
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onClosed;
    /**
     * An event that is emitted when the `IgxDatePickerComponent` is being closed.
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onClosing;
    /**
     * An \@Output property that is fired when selection is made in the calendar.
     * ```typescript
     * public selection(event){
     *    alert("A date has been selected!");
     * }
     * ```
     * ```html
     * <igx-date-picker (onSelection)="selection($event)" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onSelection;
    /**
     * An \@Output property that fires when the user types/spins to a disabled date in the date-picker editor.
     * ```typescript
     * public onDisabledDate(event){
     *    alert("This date is disabled!");
     * }
     * ```
     * ```html
     * <igx-date-picker (onDisabledDate)="onDisabledDate($event)"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onDisabledDate;
    /**
     * An \@Output property that fires when the user types/spins invalid date in the date-picker editor.
     * ```typescript
     * public onValidationFailed(event){
     *    alert("This date is not valid!");
     * }
     * ```
     * ```html
     * <igx-date-picker (onValidationFailed)="onValidationFailed($event)"></igx-date-picker>
     * ```
     * @type {?}
     */
    IgxDatePickerComponent.prototype.onValidationFailed;
    /**
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.readOnlyDatePickerTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.editableDatePickerTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.editableInputGroup;
    /**
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.templateDropDownTarget;
    /**
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.editableInput;
    /**
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.readonlyInput;
    /**
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.input;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxDatePickerComponent.prototype.datePickerTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.headerTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.subheaderTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxDatePickerComponent.prototype.datePickerActionsDirective;
    /** @type {?} */
    IgxDatePickerComponent.prototype.calendar;
    /** @type {?} */
    IgxDatePickerComponent.prototype.hasHeader;
    /** @type {?} */
    IgxDatePickerComponent.prototype.collapsed;
    /** @type {?} */
    IgxDatePickerComponent.prototype.displayValuePipe;
    /** @type {?} */
    IgxDatePickerComponent.prototype.inputValuePipe;
    /** @type {?} */
    IgxDatePickerComponent.prototype.dateFormatParts;
    /** @type {?} */
    IgxDatePickerComponent.prototype.rawDateString;
    /** @type {?} */
    IgxDatePickerComponent.prototype.inputMask;
    /** @type {?} */
    IgxDatePickerComponent.prototype.isEmpty;
    /** @type {?} */
    IgxDatePickerComponent.prototype.invalidDate;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype.spinDelta;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype.defaultLocale;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype.calendarHeight;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._formatOptions;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._formatViews;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._componentID;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._isInEditMode;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._disabledDates;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._specialDates;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._modalOverlay;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._dropDownOverlay;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._positionSettings;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._dropDownOverlaySettings;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._modalOverlaySettings;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._transformedDate;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._onOpen;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._onClose;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._overlayService;
    /** @type {?} */
    IgxDatePickerComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._cdr;
    /**
     * @type {?}
     * @private
     */
    IgxDatePickerComponent.prototype._moduleRef;
}
/**
 * @hidden
 */
var IgxDatePickerModule = /** @class */ (function () {
    function IgxDatePickerModule() {
    }
    IgxDatePickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent, IgxDatePickerActionsDirective,
                        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],
                    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective,
                        DatePickerDisplayValuePipe, DatePickerInputValuePipe],
                    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule, IgxRippleModule, IgxMaskModule],
                    entryComponents: [IgxCalendarContainerComponent]
                },] }
    ];
    return IgxDatePickerModule;
}());
export { IgxDatePickerModule };
//# sourceMappingURL=data:application/json;base64,