/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ComponentFactoryResolver, ContentChildren, ContentChild, ElementRef, EventEmitter, HostBinding, Inject, Input, IterableDiffers, NgZone, Output, QueryList, TemplateRef, ViewChild, ViewChildren, ViewContainerRef, InjectionToken, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, first, filter } from 'rxjs/operators';
import { IgxSelectionAPIService } from '../core/selection';
import { cloneArray, isEdge, isNavigationKey, flatten, mergeObjects } from '../core/utils';
import { DataType } from '../data-operations/data-util';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';
import { AbsoluteScrollStrategy, HorizontalAlignment, VerticalAlignment, IgxOverlayService } from '../services/index';
import { IgxCheckboxComponent } from './../checkbox/checkbox.component';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
import { DropPosition, ContainerPositioningStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';
import { IgxGridToolbarComponent } from './grid-toolbar.component';
import { IgxRowComponent } from './row.component';
import { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/index';
import { IgxRowEditTemplateDirective, IgxRowEditTabStopDirective, IgxRowEditTextDirective, IgxRowEditActionsDirective } from './grid.rowEdit.directive';
import { IgxGridNavigationService } from './grid-navigation.service';
import { DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';
import { IgxFilteringService } from './filtering/grid-filtering.service';
import { WatchChanges } from './watch-changes';
import { IgxGridHeaderGroupComponent } from './grid-header-group.component';
import { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { IgxGridSummaryService } from './summaries/grid-summary.service';
import { IgxSummaryRowComponent } from './summaries/summary-row.component';
import { IgxGridSelectionService, IgxGridCRUDService, IgxRow, IgxCell } from '../core/grid-selection';
import { DragScrollDirection } from './drag-select.directive';
import { IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';
import { IgxExcelStyleSortingTemplateDirective, IgxExcelStylePinningTemplateDirective, IgxExcelStyleHidingTemplateDirective, IgxExcelStyleMovingTemplateDirective } from './filtering/excel-style/grid.excel-style-filtering.component';
import { IgxGridColumnResizerComponent } from './grid-column-resizer.component';
import { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';
import { DeprecateProperty } from '../core/deprecateDecorators';
/** @type {?} */
var MINIMUM_COLUMN_WIDTH = 136;
/** @type {?} */
var FILTER_ROW_HEIGHT = 50;
// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.
// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.
// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.
// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,
// but in the same time we need to set row editing overlay outlet before opening the overlay itself.
/** @type {?} */
var MIN_ROW_EDITING_COUNT_THRESHOLD = 2;
/** @type {?} */
export var IgxGridTransaction = new InjectionToken('IgxGridTransaction');
/**
 * @record
 */
export function IGridCellEventArgs() { }
if (false) {
    /** @type {?} */
    IGridCellEventArgs.prototype.cell;
    /** @type {?} */
    IGridCellEventArgs.prototype.event;
}
/**
 * @record
 */
export function IGridEditEventArgs() { }
if (false) {
    /** @type {?} */
    IGridEditEventArgs.prototype.rowID;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.cellID;
    /** @type {?} */
    IGridEditEventArgs.prototype.oldValue;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.newValue;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.event;
}
/**
 * @record
 */
export function IPinColumnEventArgs() { }
if (false) {
    /** @type {?} */
    IPinColumnEventArgs.prototype.column;
    /** @type {?} */
    IPinColumnEventArgs.prototype.insertAtIndex;
    /** @type {?} */
    IPinColumnEventArgs.prototype.isPinned;
}
/**
 * @record
 */
export function IPageEventArgs() { }
if (false) {
    /** @type {?} */
    IPageEventArgs.prototype.previous;
    /** @type {?} */
    IPageEventArgs.prototype.current;
}
/**
 * @record
 */
export function IRowDataEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDataEventArgs.prototype.data;
}
/**
 * @record
 */
export function IColumnResizeEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnResizeEventArgs.prototype.column;
    /** @type {?} */
    IColumnResizeEventArgs.prototype.prevWidth;
    /** @type {?} */
    IColumnResizeEventArgs.prototype.newWidth;
}
/**
 * @record
 */
export function IRowSelectionEventArgs() { }
if (false) {
    /** @type {?} */
    IRowSelectionEventArgs.prototype.oldSelection;
    /** @type {?} */
    IRowSelectionEventArgs.prototype.newSelection;
    /** @type {?|undefined} */
    IRowSelectionEventArgs.prototype.row;
    /** @type {?|undefined} */
    IRowSelectionEventArgs.prototype.event;
}
/**
 * @record
 */
export function ISearchInfo() { }
if (false) {
    /** @type {?} */
    ISearchInfo.prototype.searchText;
    /** @type {?} */
    ISearchInfo.prototype.caseSensitive;
    /** @type {?} */
    ISearchInfo.prototype.exactMatch;
    /** @type {?} */
    ISearchInfo.prototype.activeMatchIndex;
    /** @type {?} */
    ISearchInfo.prototype.matchInfoCache;
}
/**
 * @record
 */
export function IGridToolbarExportEventArgs() { }
if (false) {
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.grid;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.exporter;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.options;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IColumnMovingStartEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingStartEventArgs.prototype.source;
}
/**
 * @record
 */
export function IColumnMovingEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingEventArgs.prototype.source;
    /** @type {?} */
    IColumnMovingEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IColumnMovingEndEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingEndEventArgs.prototype.source;
    /** @type {?} */
    IColumnMovingEndEventArgs.prototype.target;
}
/**
 * @record
 */
export function IFocusChangeEventArgs() { }
if (false) {
    /** @type {?} */
    IFocusChangeEventArgs.prototype.cell;
    /** @type {?} */
    IFocusChangeEventArgs.prototype.event;
    /** @type {?} */
    IFocusChangeEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IGridKeydownEventArgs() { }
if (false) {
    /** @type {?} */
    IGridKeydownEventArgs.prototype.targetType;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.target;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.event;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function ICellPosition() { }
if (false) {
    /** @type {?} */
    ICellPosition.prototype.rowIndex;
    /** @type {?} */
    ICellPosition.prototype.visibleColumnIndex;
}
/**
 * @record
 */
export function IGridDataBindable() { }
if (false) {
    /** @type {?} */
    IGridDataBindable.prototype.data;
    /** @type {?} */
    IGridDataBindable.prototype.filteredData;
}
/**
 * @record
 */
export function IRowDragEndEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDragEndEventArgs.prototype.owner;
    /** @type {?} */
    IRowDragEndEventArgs.prototype.dragData;
    /** @type {?} */
    IRowDragEndEventArgs.prototype.animation;
}
/**
 * @record
 */
export function IRowDragStartEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDragStartEventArgs.prototype.owner;
    /** @type {?} */
    IRowDragStartEventArgs.prototype.dragData;
}
/** @enum {string} */
var GridSummaryPosition = {
    top: 'top',
    bottom: 'bottom',
};
export { GridSummaryPosition };
/** @enum {string} */
var GridSummaryCalculationMode = {
    rootLevelOnly: 'rootLevelOnly',
    childLevelsOnly: 'childLevelsOnly',
    rootAndChildLevels: 'rootAndChildLevels',
};
export { GridSummaryCalculationMode };
/** @enum {string} */
var FilterMode = {
    quickFilter: 'quickFilter',
    excelStyleFilter: 'excelStyleFilter',
};
export { FilterMode };
/** @enum {string} */
var GridKeydownTargetType = {
    dataCell: 'dataCell',
    summaryCell: 'summaryCell',
    groupRow: 'groupRow',
    hierarchicalRow: 'hierarchicalRow',
};
export { GridKeydownTargetType };
/**
 * @abstract
 */
var IgxGridBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGridBaseComponent, _super);
    function IgxGridBaseComponent(selectionService, crudService, gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.selectionService = selectionService;
        _this.crudService = crudService;
        _this.gridAPI = gridAPI;
        _this.selection = selection;
        _this._transactions = _transactions;
        _this.elementRef = elementRef;
        _this.zone = zone;
        _this.document = document;
        _this.cdr = cdr;
        _this.resolver = resolver;
        _this.differs = differs;
        _this.viewRef = viewRef;
        _this.navigation = navigation;
        _this.filteringService = filteringService;
        _this.overlayService = overlayService;
        _this.summaryService = summaryService;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._resourceStrings = CurrentResourceStrings.GridResStrings;
        _this._emptyGridMessage = null;
        _this._emptyFilteredGridMessage = null;
        _this._isLoading = false;
        _this._locale = null;
        _this._destroyed = false;
        _this.overlayIDs = [];
        /**
         * An \@Input property that autogenerates the `IgxGridComponent` columns.
         * The default value is false.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.autoGenerate = false;
        /**
         * @hidden
         * \@internal
         */
        _this.rowDragging = false;
        /**
         * An \@Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-even-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.evenRowCSS = 'igx-grid__tr--even';
        /**
         * An \@Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-odd-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.oddRowCSS = 'igx-grid__tr--odd';
        /**
         * An \@Input property that sets the title to be displayed in the built-in column hiding UI.
         * ```html
         * <igx-grid [showToolbar]="true" [columnHiding]="true" columnHidingTitle="Column Hiding"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.columnHidingTitle = '';
        /**
         * An \@Input property that sets the title to be displayed in the UI of the column pinning.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [columnPinningTitle]="'Column Hiding'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.columnPinningTitle = '';
        /**
         * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onCellClick)="onCellClick($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClick(e){
         *     alert("The cell has been clicked!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onCellClick = new EventEmitter();
        /**
         * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onSelection)="onCellSelect($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellSelect(e){
         *     alert("The cell has been selected!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onSelection = new EventEmitter();
        /**
         *  Emitted when `IgxGridRowComponent` is selected.
         * ```html
         * <igx-grid #grid (onRowSelectionChange)="onRowClickChange($event)" [data]="localData" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClickChange(e){
         *     alert("The selected row has been changed!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowSelectionChange = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is pinned.
         * The index that the column is inserted at may be changed through the `insertAtIndex` property.
         * ```typescript
         * public columnPinning(event) {
         *     if (event.column.field === "Name") {
         *       event.insertAtIndex = 0;
         *     }
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnPinning = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent`
         * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editCancel(event: IGridEditEventArgs){
         *    const rowID: IgxColumnComponent = event.rowID;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridComponent
         */
        _this.onCellEditCancel = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent` enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editStart(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridComponent
         */
        _this.onCellEditEnter = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.
         * Event is fired after editing is completed, when the cell is exiting edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editDone(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onCellEdit = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" a row enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editStart(event: IGridEditEventArgs) {
         *          const editedRowObj = event.oldValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridComponent
         */
        _this.onRowEditEnter = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(true)` is called.
         * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,
         * performing paging operation, column resizing, pinning, moving or hitting  `Done`
         * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         *
         * ```typescript
         *      editDone(event: IGridEditEventArgs) {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowEdit = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(false)` is called.
         * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button
         * in the row editing overlay.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowEditCancel = new EventEmitter();
        /**
         * Emitted when a grid column is initialized. Returns the column object.
         * ```html
         * <igx-grid #grid [data]="localData" [onColumnInit]="initColumns($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * initColumns(event: IgxColumnComponent) {
         * const column: IgxColumnComponent = event;
         *       column.filterable = true;
         *       column.sortable = true;
         *       column.editable = true;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnInit = new EventEmitter();
        /**
         * Emitted when sorting is performed through the UI. Returns the sorting expression.
         * ```html
         * <igx-grid #grid [data]="localData" [autoGenerate]="true" (onSortingDone)="sortingDone($event)"></igx-grid>
         * ```
         * ```typescript
         * sortingDone(event: SortingDirection){
         *     const sortingDirection = event;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onSortingDone = new EventEmitter();
        /**
         * Emitted when filtering is performed through the UI.
         * Returns the filtering expressions tree of the column for which filtering was performed.
         * ```typescript
         * filteringDone(event: IFilteringExpressionsTree){
         *     const filteringTree = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onFilteringDone)="filteringDone($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onFilteringDone = new EventEmitter();
        /**
         * Emitted when paging is performed. Returns an object consisting of the previous and next pages.
         * ```typescript
         * pagingDone(event: IPageEventArgs){
         *     const paging = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onPagingDone)="pagingDone($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onPagingDone = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.
         * Returns the data for the new `IgxGridRowComponent` object.
         * ```typescript
         * rowAdded(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowAdded)="rowAdded($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowAdded = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.
         * Returns an `IRowDataEventArgs` object.
         * ```typescript
         * rowDeleted(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowDeleted)="rowDeleted($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onRowDeleted = new EventEmitter();
        /**
         * Emitted when a new chunk of data is loaded from virtualization.
         * ```typescript
         *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onDataPreLoad = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is resized.
         * Returns the `IgxColumnComponent` object's old and new width.
         * ```typescript
         * resizing(event: IColumnResizeEventArgs){
         *     const grouping = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onColumnResized)="resizing($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnResized = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * contextMenu(event: IGridCellEventArgs){
         *     const resizing = event;
         *     console.log(resizing);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onContextMenu)="contextMenu($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onContextMenu = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * dblClick(event: IGridCellEventArgs){
         *     const dblClick = event;
         *     console.log(dblClick);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onDoubleClick)="dblClick($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onDoubleClick = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }
         * ```typescript
         * visibilityChanged(event: IColumnVisibilityChangedEventArgs){
         *    const visiblity = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnVisibilityChanged)="visibilityChanged($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnVisibilityChanged = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.
         * ```typescript
         * movingStart(event: IColumnMovingStartEventArgs){
         *     const movingStarts = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingStart)="movingStart($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnMovingStart = new EventEmitter();
        /**
         * Emitted throughout the `IgxColumnComponent` moving operation.
         * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.
         * ```typescript
         * moving(event: IColumnMovingEventArgs){
         *     const moving = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMoving)="moving($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnMoving = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving ends.
         * Returns the source and target `IgxColumnComponent` objects.
         * ```typescript
         * movingEnds(event: IColumnMovingEndEventArgs){
         *     const movingEnds = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingEnd)="movingEnds($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onColumnMovingEnd = new EventEmitter();
        /**
         * Emitted when keydown is triggered over element inside grid's body.
         * This event is fired only if the key combination is supported in the grid.
         * Return the target type, target object and the original event. This event is cancelable.
         * ```typescript
         * customKeydown(args: IGridKeydownEventArgs) {
         *  const keydownEvent = args.event;
         * }
         * ```
         * ```html
         *  <igx-grid (onGridKeydown)="customKeydown($event)"></igx-grid>
         * ```
         */
        _this.onGridKeydown = new EventEmitter();
        /**
         * Emitted when start dragging a row.
         * Return the dragged row.
         */
        _this.onRowDragStart = new EventEmitter();
        /**
         * Emitted when dropping a row.
         * Return the dropped row.
         */
        _this.onRowDragEnd = new EventEmitter();
        /**
         * @hidden
         */
        _this.tabindex = 0;
        /**
         * @hidden
         */
        _this.hostRole = 'grid';
        /**
         * @hidden
         */
        _this.columnsWithNoSetWidths = null;
        /* Toolbar related definitions */
        _this._showToolbar = false;
        _this._exportExcel = false;
        _this._exportCsv = false;
        _this._toolbarTitle = null;
        _this._exportText = null;
        _this._exportExcelText = null;
        _this._exportCsvText = null;
        _this._rowEditable = false;
        _this._filteredSortedData = null;
        /**
         * Provides access to the `IgxToolbarComponent`.
         * ```typescript
         * const gridToolbar = this.grid.toolbar;
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.toolbar = null;
        _this.toolbarHtml = null;
        /**
         * Emitted when an export process is initiated by the user.
         * ```typescript
         * toolbarExporting(event: IGridToolbarExportEventArgs){
         *     const toolbarExporting = event;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        _this.onToolbarExporting = new EventEmitter();
        /* End of toolbar related definitions */
        // TODO: Document
        _this.onRangeSelection = new EventEmitter();
        /**
         * @hidden
         */
        _this.calcHeight = 0;
        /**
         * @hidden
         */
        _this.chipsGoupingExpressions = [];
        /**
         * @hidden
         */
        _this.allRowsSelected = false;
        /**
         * @hidden
         */
        _this.disableTransitions = false;
        /**
         * @hidden
         */
        _this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        /**
         * @hidden
         */
        _this.columnWidthSetByUser = false;
        // abstract dataLength;
        /**
         * @hidden
         */
        _this.destroy$ = new Subject();
        /**
         * @hidden
         */
        _this._perPage = 15;
        /**
         * @hidden
         */
        _this._page = 0;
        /**
         * @hidden
         */
        _this._paging = false;
        /**
         * @hidden
         */
        _this._rowSelection = false;
        /**
         * @hidden
         */
        _this._rowDrag = false;
        /**
         * @hidden
         */
        _this._pipeTrigger = 0;
        /**
         * @hidden
         */
        _this._summaryPipeTrigger = 0;
        /**
         * @hidden
         */
        _this._columns = [];
        /**
         * @hidden
         */
        _this._pinnedColumns = [];
        /**
         * @hidden
         */
        _this._unpinnedColumns = [];
        /**
         * @hidden
         */
        _this._filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);
        /**
         * @hidden
         */
        _this._sortingExpressions = [];
        /**
         * @hidden
         */
        _this._maxLevelHeaderDepth = null;
        /**
         * @hidden
         */
        _this._columnHiding = false;
        /**
         * @hidden
         */
        _this._columnPinning = false;
        /**
         * @hidden
         */
        _this._keydownListener = null;
        /**
         * @hidden
         */
        _this._vScrollListener = null;
        /**
         * @hidden
         */
        _this._hScrollListener = null;
        /**
         * @hidden
         */
        _this._wheelListener = null;
        _this._allowFiltering = false;
        _this._filterMode = FilterMode.quickFilter;
        _this._hiddenColumnsText = '';
        _this._pinnedColumnsText = '';
        _this._height = '100%';
        _this._width = '100%';
        _this._autoSize = false;
        _this._ngAfterViewInitPassed = false;
        _this._multiRowLayoutRowSize = 1;
        // Caches
        _this._totalWidth = NaN;
        _this._pinnedVisible = [];
        _this._unpinnedVisible = [];
        _this._pinnedWidth = NaN;
        _this._unpinnedWidth = NaN;
        _this._visibleColumns = [];
        _this._columnGroups = false;
        _this._defaultTargetRecordNumber = 10;
        _this._onFocusChange = new EventEmitter();
        _this._summaryPosition = GridSummaryPosition.bottom;
        _this._summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;
        _this.rowEditPositioningStrategy = new ContainerPositioningStrategy({
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom,
            closeAnimation: null
        });
        _this.rowEditSettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false,
            outlet: _this.rowOutletDirective,
            positionStrategy: _this.rowEditPositioningStrategy
        };
        _this.resizeHandler = function () {
            _this.zone.run(function () { return _this.calculateGridSizes(); });
        };
        return _this;
    }
    Object.defineProperty(IgxGridBaseComponent.prototype, "scrollWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "resourceStrings", {
        /**
         * An accessor that returns the resource strings.
        */
        get: /**
         * An accessor that returns the resource strings.
         * @return {?}
         */
        function () {
            return this._resourceStrings;
        },
        /**
         * An accessor that sets the resource strings.
         * By default it uses EN resources.
        */
        set: /**
         * An accessor that sets the resource strings.
         * By default it uses EN resources.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._resourceStrings = Object.assign({}, this._resourceStrings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filteringLogic", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filteringExpressionsTree.operator;
        },
        /**
         * Sets the filtering logic of the `IgxGridComponent`.
         * The default is AND.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [filteringLogic]="filtering"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the filtering logic of the `IgxGridComponent`.
         * The default is AND.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [filteringLogic]="filtering"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteringExpressionsTree.operator = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filteringExpressionsTree", {
        /**
         * Returns the filtering state of `IgxGridComponent`.
         * ```typescript
         * let filteringExpressionsTree = this.grid.filteringExpressionsTree;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the filtering state of `IgxGridComponent`.
         * ```typescript
         * let filteringExpressionsTree = this.grid.filteringExpressionsTree;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._filteringExpressionsTree;
        },
        /**
         * Sets the filtering state of the `IgxGridComponent`.
         * ```typescript
         * const logic = new FilteringExpressionsTree(FilteringLogic.And, "ID");
         * logic.filteringOperands = [
         *     {
         *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
         *          fieldName: 'ID',
         *          searchVal: 1
         *     }
         * ];
         * this.grid.filteringExpressionsTree = (logic);
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the filtering state of the `IgxGridComponent`.
         * ```typescript
         * const logic = new FilteringExpressionsTree(FilteringLogic.And, "ID");
         * logic.filteringOperands = [
         *     {
         *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
         *          fieldName: 'ID',
         *          searchVal: 1
         *     }
         * ];
         * this.grid.filteringExpressionsTree = (logic);
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value instanceof FilteringExpressionsTree) {
                /** @type {?} */
                var val = ((/** @type {?} */ (value)));
                for (var index = 0; index < val.filteringOperands.length; index++) {
                    if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {
                        /** @type {?} */
                        var newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);
                        newExpressionsTree.filteringOperands.push((/** @type {?} */ (val.filteringOperands[index])));
                        val.filteringOperands[index] = newExpressionsTree;
                    }
                }
                // clone the filtering expression tree in order to trigger the filtering pipe
                /** @type {?} */
                var filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);
                filteringExpressionTreeClone.filteringOperands = value.filteringOperands;
                this._filteringExpressionsTree = filteringExpressionTreeClone;
                if (this.filteringService.isFilteringExpressionsTreeEmpty()) {
                    this.filteredData = null;
                }
                this.filteringService.refreshExpressions();
                this.summaryService.clearSummaryCache();
                this.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "locale", {
        /**
         * Returns the locale of the grid.
         * If not set, returns browser's language.
         */
        get: /**
         * Returns the locale of the grid.
         * If not set, returns browser's language.
         * @return {?}
         */
        function () {
            if (this._locale) {
                return this._locale;
            }
            else {
                return 'en';
            }
        },
        /**
         * Sets the locale of the grid.
         */
        set: /**
         * Sets the locale of the grid.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "paging", {
        /**
         * Returns whether the paging feature is enabled/disabled.
         * The default state is disabled (false).
         * ```
         * const paging = this.grid.paging;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the paging feature is enabled/disabled.
         * The default state is disabled (false).
         * ```
         * const paging = this.grid.paging;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._paging;
        },
        /**
         * Enables/Disables the paging feature.
         * ```html
         * <igx-grid #grid [data]="Data" [autoGenerate]="true" [paging]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Enables/Disables the paging feature.
         * ```html
         * <igx-grid #grid [data]="Data" [autoGenerate]="true" [paging]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._paging = value;
            this._pipeTrigger++;
            if (this._ngAfterViewInitPassed) {
                this.cdr.detectChanges();
                this.calculateGridHeight();
                this.cdr.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "page", {
        /**
         * Returns the current page index.
         * ```html
         * let gridPage = this.grid.page;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the current page index.
         * ```html
         * let gridPage = this.grid.page;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._page;
        },
        /**
         * Sets the current page index.
         * <igx-grid #grid [data]="Data" [paging]="true" [page]="5" [autoGenerate]="true"></igx-grid>
         */
        set: /**
         * Sets the current page index.
         * <igx-grid #grid [data]="Data" [paging]="true" [page]="5" [autoGenerate]="true"></igx-grid>
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val === this._page || val < 0 || val > this.totalPages - 1) {
                return;
            }
            this.onPagingDone.emit({ previous: this._page, current: val });
            this._page = val;
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "perPage", {
        /**
         * Returns the number of visible items per page of the `IgxGridComponent`.
         * The default is 15.
         * ```html
         * let itemsPerPage = this.grid.perPage;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the number of visible items per page of the `IgxGridComponent`.
         * The default is 15.
         * ```html
         * let itemsPerPage = this.grid.perPage;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._perPage;
        },
        /**
         * Sets the number of visible items per page of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [perPage]="5" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the number of visible items per page of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [paging]="true" [perPage]="5" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val < 0) {
                return;
            }
            this.selectionService.clear();
            this._perPage = val;
            this.page = 0;
            this.endEdit(true);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columnHiding", {
        /**
         * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.
         * By default it is disabled (false).
         * ```typescript
         * let gridColHiding = this.grid.columnHiding;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.
         * By default it is disabled (false).
         * ```typescript
         * let gridColHiding = this.grid.columnHiding;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnHiding;
        },
        /**
         * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.
         * In order for the UI to work, you need to enable the toolbar as shown in the example below.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [showToolbar]="true" [columnHiding]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.
         * In order for the UI to work, you need to enable the toolbar as shown in the example below.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true" [showToolbar]="true" [columnHiding]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._columnHiding !== value) {
                this._columnHiding = value;
                if (this.gridAPI.grid) {
                    this.markForCheck();
                    if (this._ngAfterViewInitPassed) {
                        this.calculateGridSizes();
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowSelectable", {
        /**
         * Sets whether the `IgxGridRowComponent` selection is enabled.
         * By default it is set to false.
         * ```typescript
         * let rowSelectable = this.grid.rowSelectable;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Sets whether the `IgxGridRowComponent` selection is enabled.
         * By default it is set to false.
         * ```typescript
         * let rowSelectable = this.grid.rowSelectable;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._rowSelection;
        },
        /**
         * Sets whether rows can be selected.
         * ```html
         * <igx-grid #grid [showToolbar]="true" [rowSelectable]="true" [columnHiding]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets whether rows can be selected.
         * ```html
         * <igx-grid #grid [showToolbar]="true" [rowSelectable]="true" [columnHiding]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rowSelection = val;
            if (this.gridAPI.grid && this.columnList) {
                // should selection persist?
                this.allRowsSelected = false;
                this.deselectAllRows();
                this.calculateGridSizes();
                this.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowDraggable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rowDrag;
        },
        /**
         * Sets whether rows can be moved.
         * ```html
         * <igx-grid #grid [rowDraggable]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets whether rows can be moved.
         * ```html
         * <igx-grid #grid [rowDraggable]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rowDrag = val;
            if (this.gridAPI.grid && this.columnList) {
                this.calculateGridSizes();
                this.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowEditable", {
        /**
     * Sets whether the `IgxGridRowComponent` is editable.
     * By default it is set to false.
     * ```typescript
     * let rowEditable = this.grid.rowEditable;
     * ```
     * @memberof IgxGridBaseComponent
     */
        get: /**
         * Sets whether the `IgxGridRowComponent` is editable.
         * By default it is set to false.
         * ```typescript
         * let rowEditable = this.grid.rowEditable;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._rowEditable;
        },
        /**
        * Sets whether rows can be edited.
        * ```html
        * <igx-grid #grid [showToolbar]="true" [rowEditable]="true" [primaryKey]="'ProductID'" [columnHiding]="true"></igx-grid>
        * ```
        * @memberof IgxGridBaseComponent
        */
        set: /**
         * Sets whether rows can be edited.
         * ```html
         * <igx-grid #grid [showToolbar]="true" [rowEditable]="true" [primaryKey]="'ProductID'" [columnHiding]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._rowEditable = val;
            if (this.gridAPI.grid) {
                this.refreshGridState();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "height", {
        /**
         * Returns the height of the `IgxGridComponent`.
         * ```typescript
         * let gridHeight = this.grid.height;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the height of the `IgxGridComponent`.
         * ```typescript
         * let gridHeight = this.grid.height;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * Sets the height of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the height of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this._height !== value) {
                this._height = value;
                this._autoSize = false;
                requestAnimationFrame(function () {
                    if (!_this._destroyed) {
                        _this.reflow();
                        _this.cdr.markForCheck();
                    }
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "width", {
        /**
         * Returns the width of the `IgxGridComponent`.
         * ```typescript
         * let gridWidth = this.grid.width;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the width of the `IgxGridComponent`.
         * ```typescript
         * let gridWidth = this.grid.width;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._width;
        },
        /**
         * Sets the width of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [width]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the width of the `IgxGridComponent`.
         * ```html
         * <igx-grid #grid [data]="Data" [width]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this._width !== value) {
                this._width = value;
                requestAnimationFrame(function () {
                    // Calling reflow(), because the width calculation
                    // might make the horizontal scrollbar appear/disappear.
                    // This will change the height, which should be recalculated.
                    if (!_this._destroyed) {
                        _this.reflow();
                    }
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerWidth", {
        /**
         * Returns the width of the header of the `IgxGridComponent`.
         * ```html
         * let gridHeaderWidth = this.grid.headerWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the width of the header of the `IgxGridComponent`.
         * ```html
         * let gridHeaderWidth = this.grid.headerWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return parseInt(this._width, 10) - 17;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowHeight", {
        /**
         * Returns the row height.
         * ```typescript
         * const rowHeight = this.grid.rowHeight;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the row height.
         * ```typescript
         * const rowHeight = this.grid.rowHeight;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._rowHeight ? this._rowHeight : this.defaultRowHeight;
        },
        /**
         * Sets the row height.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [rowHeight]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the row height.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [rowHeight]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._rowHeight = parseInt(value, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columnWidth", {
        /**
         * An @Input property that sets the default width of the `IgxGridComponent`'s columns.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [columnWidth]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * An \@Input property that sets the default width of the `IgxGridComponent`'s columns.
         * ```html
         * <igx-grid #grid [data]="localData" [showToolbar]="true" [columnWidth]="100" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columnWidth = value;
            this.columnWidthSetByUser = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "emptyGridMessage", {
        /**
         * An accessor that returns the message displayed when there are no records.
        */
        get: /**
         * An accessor that returns the message displayed when there are no records.
         * @return {?}
         */
        function () {
            return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;
        },
        /**
         * An @Input property that sets the message displayed when there are no records.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * An \@Input property that sets the message displayed when there are no records.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._emptyGridMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isLoading", {
        /**
         * An accessor that returns whether the grid is showing loading indicator.
         */
        get: /**
         * An accessor that returns whether the grid is showing loading indicator.
         * @return {?}
         */
        function () {
            return this._isLoading;
        },
        /**
         * An @Input property that sets whether the grid is going to show loading indicator.
         * ```html
         * <igx-grid #grid [data]="Data" [isLoading]="true" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * An \@Input property that sets whether the grid is going to show loading indicator.
         * ```html
         * <igx-grid #grid [data]="Data" [isLoading]="true" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isLoading = value;
            if (this.gridAPI.grid) {
                this.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "emptyFilteredGridMessage", {
        /**
         * An accessor that returns the message displayed when there are no records and the grid is filtered.
        */
        get: /**
         * An accessor that returns the message displayed when there are no records and the grid is filtered.
         * @return {?}
         */
        function () {
            return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;
        },
        /**
         * An @Input property that sets the message displayed when there are no records and the grid is filtered.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * An \@Input property that sets the message displayed when there are no records and the grid is filtered.
         * ```html
         * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._emptyFilteredGridMessage = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columnPinning", {
        /**
         * Returns if the built-in column pinning UI should be shown in the toolbar.
         * ```typescript
         *  let colPinning = this.grid.columnPinning;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the built-in column pinning UI should be shown in the toolbar.
         * ```typescript
         *  let colPinning = this.grid.columnPinning;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnPinning;
        },
        /**
         * Sets if the built-in column pinning UI should be shown in the toolbar.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets if the built-in column pinning UI should be shown in the toolbar.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._columnPinning !== value) {
                this._columnPinning = value;
                if (this.gridAPI.grid) {
                    this.markForCheck();
                    if (this._ngAfterViewInitPassed) {
                        this.calculateGridSizes();
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "allowFiltering", {
        /**
         * Returns if the filtering is enabled.
         * ```typescript
         *  let filtering = this.grid.allowFiltering;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the filtering is enabled.
         * ```typescript
         *  let filtering = this.grid.allowFiltering;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._allowFiltering;
        },
        /**
         * Sets if the filtering is enabled.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [allowFiltering]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets if the filtering is enabled.
         * By default it's disabled.
         * ```html
         * <igx-grid #grid [data]="localData" [allowFiltering]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._allowFiltering !== value) {
                this._allowFiltering = value;
                if (this.calcHeight) {
                    this.calcHeight += value ? -FILTER_ROW_HEIGHT : FILTER_ROW_HEIGHT;
                }
                if (this._ngAfterViewInitPassed) {
                    if (this.maxLevelHeaderDepth) {
                        this.theadRow.nativeElement.style.height = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +
                            (value && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1 + "px";
                    }
                }
                this.filteringService.isFilterRowVisible = false;
                this.filteringService.filteredColumn = null;
                this.filteringService.registerSVGIcons();
                if (this.gridAPI.grid) {
                    this.markForCheck();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filterMode", {
        /**
         * Returns the filter mode.
         * ```typescript
         *  let filtering = this.grid.filterMode;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the filter mode.
         * ```typescript
         *  let filtering = this.grid.filterMode;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * Sets filter mode.
         * By default it's set to FilterMode.quickFilter.
         * ```html
         * <igx-grid #grid [data]="localData" [filterMode]="'quickFilter'" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets filter mode.
         * By default it's set to FilterMode.quickFilter.
         * ```html
         * <igx-grid #grid [data]="localData" [filterMode]="'quickFilter'" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filterMode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summaryPosition", {
        /**
         * Returns the summary position.
         * ```typescript
         *  let summaryPosition = this.grid.summaryPosition;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the summary position.
         * ```typescript
         *  let summaryPosition = this.grid.summaryPosition;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._summaryPosition;
        },
        /**
         * Sets summary position.
         * By default it is bottom.
         * ```html
         * <igx-grid #grid [data]="localData" summaryPosition="top" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets summary position.
         * By default it is bottom.
         * ```html
         * <igx-grid #grid [data]="localData" summaryPosition="top" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._summaryPosition = value;
            if (this.gridAPI.grid) {
                this.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summaryCalculationMode", {
        /**
         * Returns the summary calculation mode.
         * ```typescript
         *  let summaryCalculationMode = this.grid.summaryCalculationMode;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the summary calculation mode.
         * ```typescript
         *  let summaryCalculationMode = this.grid.summaryCalculationMode;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._summaryCalculationMode;
        },
        /**
         * Sets summary calculation mode.
         * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.
         * ```html
         * <igx-grid #grid [data]="localData" summaryCalculationMode="rootLevelOnly" [autoGenerate]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets summary calculation mode.
         * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.
         * ```html
         * <igx-grid #grid [data]="localData" summaryCalculationMode="rootLevelOnly" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._summaryCalculationMode = value;
            if (this.gridAPI.grid) {
                this.summaryService.resetSummaryHeight();
                this.endEdit(true);
                this.calculateGridHeight();
                this.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "onFocusChange", {
        /**
         * @deprecated you should use onGridKeydown event
         */
        get: /**
         * @deprecated you should use onGridKeydown event
         * @return {?}
         */
        function () {
            return this._onFocusChange;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._onFocusChange = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerGroupsList", {
        /**
         * A list of all `IgxGridHeaderGroupComponent`.
         * ```typescript
         * const headerGroupsList = this.grid.headerGroupsList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of all `IgxGridHeaderGroupComponent`.
         * ```typescript
         * const headerGroupsList = this.grid.headerGroupsList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerCellList", {
        /**
         * A list of all `IgxGridHeaderComponent`.
         * ```typescript
         * const headers = this.grid.headerCellList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of all `IgxGridHeaderComponent`.
         * ```typescript
         * const headers = this.grid.headerCellList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.headerGroupsList.map(function (headerGroup) { return headerGroup.headerCell; }).filter(function (headerCell) { return headerCell; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "filterCellList", {
        /**
         * A list of all `IgxGridFilteringCellComponent`.
         * ```typescript
         * const filterCells = this.grid.filterCellList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of all `IgxGridFilteringCellComponent`.
         * ```typescript
         * const filterCells = this.grid.filterCellList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.headerGroupsList.map(function (headerGroup) { return headerGroup.filterCell; }).filter(function (filterCell) { return filterCell; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summariesRowList", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = new QueryList();
            if (!this._summaryRowList) {
                return res;
            }
            /** @type {?} */
            var sumList = this._summaryRowList.filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            });
            res.reset(sumList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowList", {
        /**
         * A list of `IgxGridRowComponent`.
         * ```typescript
         * const rowList = this.grid.rowList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of `IgxGridRowComponent`.
         * ```typescript
         * const rowList = this.grid.rowList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = new QueryList();
            if (!this._rowList) {
                return res;
            }
            /** @type {?} */
            var rList = this._rowList
                .filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            })
                .sort(function (a, b) {
                return a.index - b.index;
            });
            res.reset(rList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "dataRowList", {
        /**
         * A list of `IgxGridRowComponent`, currently rendered.
         * ```typescript
         * const dataList = this.grid.dataRowList;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * A list of `IgxGridRowComponent`, currently rendered.
         * ```typescript
         * const dataList = this.grid.dataRowList;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            /** @type {?} */
            var res = new QueryList();
            if (!this._dataRowList) {
                return res;
            }
            /** @type {?} */
            var rList = this._dataRowList.filter(function (item) {
                return item.element.nativeElement.parentElement !== null;
            }).sort(function (a, b) {
                return a.index - b.index;
            });
            res.reset(rList);
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "toolbarCustomContentTemplate", {
        /**
         * Returns the template which will be used by the toolbar to show custom content.
         * ```typescript
         * let customContentTemplate = this.grid.toolbarCustomContentTemplate;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the template which will be used by the toolbar to show custom content.
         * ```typescript
         * let customContentTemplate = this.grid.toolbarCustomContentTemplate;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.toolbarCustomContentTemplates.first;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "outletDirective", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowOutletDirective", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.rowEditingOutletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "parentRowOutletDirective", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowEditContainer", {
        /** @hidden */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowInEditMode", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var editRowState = this.crudService.row;
            return editRowState !== null ? this.rowList.find(function (e) { return e.rowID === editRowState.id; }) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "firstEditableColumnIndex", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var index = tslib_1.__spread(this.pinnedColumns, this.unpinnedColumns).filter(function (e) { return !e.columnGroup; }).findIndex(function (e) { return e.editable; });
            return index !== -1 ? index : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "lastEditableColumnIndex", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var orderedColumns = tslib_1.__spread(this.pinnedColumns, this.unpinnedColumns).filter(function (e) { return !e.columnGroup; });
            /** @type {?} */
            var index = orderedColumns.reverse().findIndex(function (e) { return e.editable; });
            return index !== -1 ? orderedColumns.length - 1 - index : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowEditTabs", {
        /**
         * @hidden
         * TODO: Nav service logic doesn't handle 0 results from this querylist
         */
        get: /**
         * @hidden
         * TODO: Nav service logic doesn't handle 0 results from this querylist
         * @return {?}
         */
        function () {
            return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hostClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.getComponentDensityClass('igx-grid');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "bannerClass", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';
            return this.getComponentDensityClass('igx-banner') + " " + position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pipeTrigger", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._pipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summaryPipeTrigger", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._summaryPipeTrigger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "sortingExpressions", {
        /**
         * Returns the sorting state of the `IgxGridComponent`.
         * ```typescript
         * const sortingState = this.grid.sortingExpressions;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the sorting state of the `IgxGridComponent`.
         * ```typescript
         * const sortingState = this.grid.sortingExpressions;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._sortingExpressions;
        },
        /**
         * Sets the sorting state of the `IgxGridComponent`.
         * ```typescript
         * this.grid.sortingExpressions = [{
         *     fieldName: "ID",
         *     dir: SortingDirection.Desc,
         *     ignoreCase: true
         * }];
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the sorting state of the `IgxGridComponent`.
         * ```typescript
         * this.grid.sortingExpressions = [{
         *     fieldName: "ID",
         *     dir: SortingDirection.Desc,
         *     ignoreCase: true
         * }];
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sortingExpressions = cloneArray(value);
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "virtualizationState", {
        /**
         * Returns the state of the grid virtualization, including the start index and how many records are rendered.
         * ```typescript
         * const gridVirtState = this.grid1.virtualizationState;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the state of the grid virtualization, including the start index and how many records are rendered.
         * ```typescript
         * const gridVirtState = this.grid1.virtualizationState;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.verticalScrollContainer.state;
        },
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} state
         * @return {?}
         */
        function (state) {
            this.verticalScrollContainer.state = state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalItemCount", {
        /**
         * Returns the total number of records in the data source.
         * Works only with remote grid virtualization.
         * ```typescript
         * const itemCount = this.grid1.totalItemCount;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total number of records in the data source.
         * Works only with remote grid virtualization.
         * ```typescript
         * const itemCount = this.grid1.totalItemCount;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.verticalScrollContainer.totalItemCount;
        },
        /**
         * Sets the total number of records in the data source.
         * This property is required for virtualization to function when the grid is bound remotely.
         * ```typescript
         * this.grid1.totalItemCount = 55;
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the total number of records in the data source.
         * This property is required for virtualization to function when the grid is bound remotely.
         * ```typescript
         * this.grid1.totalItemCount = 55;
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} count
         * @return {?}
         */
        function (count) {
            this.verticalScrollContainer.totalItemCount = count;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "maxLevelHeaderDepth", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (this._maxLevelHeaderDepth === null) {
                this._maxLevelHeaderDepth = this.hasColumnLayouts ?
                    this.columnList.reduce(function (acc, col) { return Math.max(acc, col.rowStart); }, 0) :
                    this.columnList.reduce(function (acc, col) { return Math.max(acc, col.level); }, 0);
            }
            return this._maxLevelHeaderDepth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hiddenColumnsCount", {
        /**
         * Returns the number of hidden `IgxColumnComponent`.
         * ```typescript
         * const hiddenCol = this.grid.hiddenColumnsCount;
         * ``
         */
        get: /**
         * Returns the number of hidden `IgxColumnComponent`.
         * ```typescript
         * const hiddenCol = this.grid.hiddenColumnsCount;
         * ``
         * @return {?}
         */
        function () {
            return this.columnList.filter(function (col) { return col.columnGroup === false && col.hidden === true; }).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hiddenColumnsText", {
        /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * const hiddenColText = this.grid.hiddenColumnsText;
         * ``
         */
        get: /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * const hiddenColText = this.grid.hiddenColumnsText;
         * ``
         * @return {?}
         */
        function () {
            return this._hiddenColumnsText;
        },
        /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * <igx-grid [columnHiding]="true" [showToolbar]="true" [hiddenColumnsText]="'Hidden Columns'"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column hiding UI of the`IgxColumnComponent`.
         * ```typescript
         * <igx-grid [columnHiding]="true" [showToolbar]="true" [hiddenColumnsText]="'Hidden Columns'"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hiddenColumnsText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pinnedColumnsText", {
        /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```typescript
         * const pinnedText = this.grid.pinnedColumnsText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```typescript
         * const pinnedText = this.grid.pinnedColumnsText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._pinnedColumnsText;
        },
        /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```html
         * <igx-grid [pinnedColumnsText]="'PinnedCols Text" [data]="data" [width]="'100%'" [height]="'500px'"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the text to be displayed inside the toggle button
         * for the built-in column pinning UI of the`IgxColumnComponent`.
         * ```html
         * <igx-grid [pinnedColumnsText]="'PinnedCols Text" [data]="data" [width]="'100%'" [height]="'500px'"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pinnedColumnsText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "transactions", {
        /**
         * Get transactions service for the grid.
         */
        get: /**
         * Get transactions service for the grid.
         * @return {?}
         */
        function () {
            return this._transactions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "currentRowState", {
        /**
         * @hidden
        */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._currentRowState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "showToolbar", {
        /**
         * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.
         * ```typescript
         * const toolbarGrid = this.grid.showToolbar;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.
         * ```typescript
         * const toolbarGrid = this.grid.showToolbar;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._showToolbar;
        },
        /**
         * Shows or hides the `IgxGridComponent`'s toolbar.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" ></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Shows or hides the `IgxGridComponent`'s toolbar.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" ></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._showToolbar !== newValue) {
                this._showToolbar = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "toolbarTitle", {
        /**
         * Returns the toolbar's title.
         * ```typescript
         * const toolbarTitle  = this.grid.toolbarTitle;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the toolbar's title.
         * ```typescript
         * const toolbarTitle  = this.grid.toolbarTitle;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._toolbarTitle;
        },
        /**
         * Sets the toolbar's title.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [toolbarTitle]="'My Grid'"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the toolbar's title.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [toolbarTitle]="'My Grid'"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._toolbarTitle !== newValue) {
                this._toolbarTitle = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportExcel", {
        /**
         * Returns whether the option for exporting to MS Excel is enabled or disabled.
         * ```typescript
         * cosnt excelExporter = this.grid.exportExcel;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the option for exporting to MS Excel is enabled or disabled.
         * ```typescript
         * cosnt excelExporter = this.grid.exportExcel;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.getExportExcel();
        },
        /**
         * Enable or disable the option for exporting to MS Excel.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportExcel]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Enable or disable the option for exporting to MS Excel.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportExcel]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportExcel !== newValue) {
                this._exportExcel = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportCsv", {
        /**
         * Returns whether the option for exporting to CSV is enabled or disabled.
         * ```typescript
         * const exportCsv = this.grid.exportCsv;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns whether the option for exporting to CSV is enabled or disabled.
         * ```typescript
         * const exportCsv = this.grid.exportCsv;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.getExportCsv();
        },
        /**
         * Enable or disable the option for exporting to CSV.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Enable or disable the option for exporting to CSV.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportCsv]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportCsv !== newValue) {
                this._exportCsv = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportText", {
        /**
         * Returns the textual content for the main export button.
         * ```typescript
         * const exportText = this.grid.exportText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the textual content for the main export button.
         * ```typescript
         * const exportText = this.grid.exportText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._exportText;
        },
        /**
         * Sets the textual content for the main export button.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the textual content for the main export button.
         * ```html
         * <igx-grid [data]="localData" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportText !== newValue) {
                this._exportText = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportExcelText", {
        /**
         * Returns the textual content for the MS Excel export button.
         * ```typescript
         * const excelText = this.grid.exportExcelText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the textual content for the MS Excel export button.
         * ```typescript
         * const excelText = this.grid.exportExcelText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._exportExcelText;
        },
        /**
         * Sets the textual content for the MS Excel export button.
         * ```html
         * <igx-grid [exportExcelText]="'My Excel Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the textual content for the MS Excel export button.
         * ```html
         * <igx-grid [exportExcelText]="'My Excel Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportExcelText !== newValue) {
                this._exportExcelText = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "exportCsvText", {
        /**
         * Returns the textual content for the CSV export button.
         * ```typescript
         * const csvText = this.grid.exportCsvText;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the textual content for the CSV export button.
         * ```typescript
         * const csvText = this.grid.exportCsvText;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._exportCsvText;
        },
        /**
         * Sets the textual content for the CSV export button.
         * ```html
         * <igx-grid [exportCsvText]="'My Csv Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportExcel]="true"></igx-grid>
         * ```
         * @memberof IgxGridBaseComponent
         */
        set: /**
         * Sets the textual content for the CSV export button.
         * ```html
         * <igx-grid [exportCsvText]="'My Csv Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportExcel]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            if (this._exportCsvText !== newValue) {
                this._exportCsvText = newValue;
                this.cdr.markForCheck();
                if (this._ngAfterViewInitPassed) {
                    this.calculateGridSizes();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.verticalScrollHandler = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.verticalScrollContainer.onScroll(event);
        if (isEdge()) {
            this.wheelHandler(false);
        }
        this.disableTransitions = true;
        this.zone.run(function () {
            _this.zone.onStable.pipe(first()).subscribe(function () {
                _this.verticalScrollContainer.onChunkLoad.emit(_this.verticalScrollContainer.state);
            });
            if (_this.rowEditable) {
                _this.changeRowEditingOverlayStateOnScroll(_this.rowInEditMode);
            }
            _this.disableTransitions = false;
        });
        this.hideOverlays();
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.horizontalScrollHandler = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var scrollLeft = event.target.scrollLeft;
        if (isEdge()) {
            this.wheelHandler(true);
        }
        this.headerContainer.onHScroll(scrollLeft);
        this._horizontalForOfs.forEach(function (vfor) { return vfor.onHScroll(scrollLeft); });
        this.cdr.markForCheck();
        this.zone.run(function () {
            _this.zone.onStable.pipe(first()).subscribe(function () {
                _this.parentVirtDir.onChunkLoad.emit(_this.headerContainer.state);
            });
        });
        this.hideOverlays();
    };
    /**
    * @hidden
    * @internal
    */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.hideOverlays = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        this.overlayIDs.forEach(function (overlayID) {
            _this.overlayService.hide(overlayID);
            _this.overlayService.onClosed.pipe(filter(function (o) { return o.id === overlayID; }), takeUntil(_this.destroy$)).subscribe(function () {
                _this.nativeElement.focus();
            });
        });
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.keydownHandler = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.key.toLowerCase();
        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {
            event.preventDefault();
            if (key === 'pagedown') {
                this.verticalScrollContainer.scrollNextPage();
                this.nativeElement.focus();
            }
            else if (key === 'pageup') {
                this.verticalScrollContainer.scrollPrevPage();
                this.nativeElement.focus();
            }
        }
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype._setupServices = /**
     * @return {?}
     */
    function () {
        this.gridAPI.grid = this;
        this.crudService.grid = this;
        this.navigation.grid = this;
        this.filteringService.grid = this;
        this.summaryService.grid = this;
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype._setupListeners = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var destructor = takeUntil(this.destroy$);
        this.onRowAdded.pipe(destructor).subscribe(function (args) { return _this.refreshGridState(args); });
        this.onRowDeleted.pipe(destructor).subscribe(function (args) {
            _this.summaryService.deleteOperation = true;
            _this.summaryService.clearSummaryCache(args);
        });
        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(function () {
            _this.summaryService.clearSummaryCache();
            _this._pipeTrigger++;
            _this.markForCheck();
            if (_this.transactions.getAggregatedChanges(false).length === 0) {
                // Needs better check, calling 'transactions.clear()' will also trigger this
                if (_this.gridAPI.atInexistingPage()) {
                    _this.page--;
                }
            }
        });
        this.onPagingDone.pipe(destructor).subscribe(function () {
            _this.endEdit(true);
            _this.selectionService.clear();
            _this.selectionService.activeElement = null;
        });
        this.onColumnMoving.pipe(destructor).subscribe(function () { return _this.endEdit(true); });
        this.onColumnResized.pipe(destructor).subscribe(function () { return _this.endEdit(true); });
        this.overlayService.onOpened.pipe(takeUntil(this.destroy$)).subscribe(function (event) {
            if (_this.overlayService.getOverlayById(event.id).settings.outlet === _this.outletDirective &&
                _this.overlayIDs.indexOf(event.id) < 0) {
                _this.overlayIDs.push(event.id);
            }
        });
        this.overlayService.onClosed.pipe(takeUntil(this.destroy$)).subscribe(function (event) {
            /** @type {?} */
            var ind = _this.overlayIDs.indexOf(event.id);
            if (ind !== -1) {
                _this.overlayIDs.splice(ind, 1);
            }
        });
    };
    // TODO: Refactor
    /**
     * @hidden
     */
    // TODO: Refactor
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngOnInit = 
    // TODO: Refactor
    /**
     * @hidden
     * @return {?}
     */
    function () {
        this._setupServices();
        this._setupListeners();
        this.columnListDiffer = this.differs.find([]).create(null);
        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;
        this.shouldGenerate = this.autoGenerate;
        this._scrollWidth = this.getScrollWidth();
    };
    /**
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.setupColumns = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.autoGenerate) {
            this.autogenerateColumns();
        }
        this.initColumns(this.columnList, function (col) { return _this.onColumnInit.emit(col); });
        this.columnListDiffer.diff(this.columnList);
        this.markForCheck();
        this.resetCaches();
        this.columnList.changes
            .pipe(takeUntil(this.destroy$))
            .subscribe(function (change) { _this.onColumnsChanged(change); });
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetColumnsCaches = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this.columnList.forEach(function (column) { return column.resetCaches(); });
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetForOfCache = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        /** @type {?} */
        var firstVirtRow = this.dataRowList.first;
        if (firstVirtRow) {
            firstVirtRow.virtDirRow.assumeMaster();
        }
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetColumnCollections = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this._visibleColumns.length = 0;
        this._pinnedVisible.length = 0;
        this._unpinnedVisible.length = 0;
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetCachedWidths = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this._unpinnedWidth = NaN;
        this._pinnedWidth = NaN;
        this._totalWidth = NaN;
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resetCaches = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this.resetForOfCache();
        this.resetColumnsCaches();
        this.resetColumnCollections();
        this.resetCachedWidths();
        this._columnGroups = this.columnList.some(function (col) { return col.columnGroup; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.setupColumns();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.document.defaultView.addEventListener('resize', _this.resizeHandler);
            _this._keydownListener = _this.keydownHandler.bind(_this);
            _this.nativeElement.addEventListener('keydown', _this._keydownListener);
        });
        this.initPinning();
        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(function () {
            requestAnimationFrame(function () {
                _this.summaryService.summaryHeight = 0;
                _this.reflow();
                _this.verticalScrollContainer.recalcUpdateSizes();
            });
        });
        this._ngAfterViewInitPassed = true;
        this.calculateGridSizes();
        // In some rare cases we get the AfterViewInit before the grid is added to the DOM
        // and as a result we get 0 width and can't size ourselves properly.
        // In order to prevent that add a mutation observer that watches if we have been added.
        if (!this.isAttachedToDom) {
            /** @type {?} */
            var config = { childList: true, subtree: true };
            /** @type {?} */
            var callback = function (mutationsList) {
                /** @type {?} */
                var childListHasChanged = mutationsList.filter(function (mutation) {
                    return mutation.type === 'childList';
                }).length > 0;
                if (childListHasChanged && _this.isAttachedToDom) {
                    _this.reflow();
                    _this._observer.disconnect();
                    _this._observer = null;
                }
            };
            this._observer = new MutationObserver(callback);
            this._observer.observe(this.document.body, config);
        }
        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(function (list) {
            return _this._horizontalForOfs = _this.combineForOfCollections(list.toArray()
                .filter(function (item) { return item.element.nativeElement.parentElement !== null; }), _this._summaryRowList);
        });
        this._summaryRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(function (summaryList) {
            return _this._horizontalForOfs - _this.combineForOfCollections(_this._dataRowList, summaryList.toArray()
                .filter(function (item) { return item.element.nativeElement.parentElement !== null; }));
        });
        this.zone.runOutsideAngular(function () {
            _this._vScrollListener = _this.verticalScrollHandler.bind(_this);
            _this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', _this._vScrollListener);
        });
        this.zone.runOutsideAngular(function () {
            _this._hScrollListener = _this.horizontalScrollHandler.bind(_this);
            _this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', _this._hScrollListener);
        });
        this._horizontalForOfs = this.combineForOfCollections(this._dataRowList, this._summaryRowList);
        /** @type {?} */
        var vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
        vertScrDC.addEventListener('scroll', function (evt) { _this.scrollHandler(evt); });
        vertScrDC.addEventListener('wheel', function () { _this.wheelHandler(); });
        this.verticalScrollContainer.onDataChanging.pipe(takeUntil(this.destroy$)).subscribe(function ($event) {
            _this.calculateGridHeight();
            $event.containerSize = _this.calcHeight;
        });
        this.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(function () {
            requestAnimationFrame(function () {
                if (!_this._destroyed) {
                    _this.reflow();
                }
            });
        });
    };
    /**
     * @private
     * @param {?} dataList
     * @param {?} summaryList
     * @return {?}
     */
    IgxGridBaseComponent.prototype.combineForOfCollections = /**
     * @private
     * @param {?} dataList
     * @param {?} summaryList
     * @return {?}
     */
    function (dataList, summaryList) {
        return dataList.map(function (row) { return row.virtDirRow; }).concat(summaryList.map(function (row) { return row.virtDirRow; }));
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.tmpOutlets.forEach(function (tmplOutlet) {
            tmplOutlet.cleanCache();
        });
        this.zone.runOutsideAngular(function () {
            _this.document.defaultView.removeEventListener('resize', _this.resizeHandler);
            _this.nativeElement.removeEventListener('keydown', _this._keydownListener);
            _this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', _this._vScrollListener);
            _this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', _this._hScrollListener);
            /** @type {?} */
            var vertScrDC = _this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
            vertScrDC.removeEventListener('scroll', function (evt) { _this.scrollHandler(evt); });
            vertScrDC.removeEventListener('wheel', function () { _this.wheelHandler(); });
        });
        if (this._observer) {
            this._observer.disconnect();
        }
        this.destroy$.next(true);
        this.destroy$.complete();
        this._destroyed = true;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.dataLoading = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onDataPreLoad.emit(event);
    };
    /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} args
     * @return {?}
     */
    IgxGridBaseComponent.prototype.toggleColumnVisibility = /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var col = args.column ? this.columnList.find(function (c) { return c === args.column; }) : undefined;
        if (!col) {
            return;
        }
        col.hidden = args.newValue;
        this.onColumnVisibilityChanged.emit(args);
        this.markForCheck();
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "nativeElement", {
        /**
         * Returns the native element of the `IgxGridComponent`.
         * ```typescript
         * const nativeEl = this.grid.nativeElement.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the native element of the `IgxGridComponent`.
         * ```typescript
         * const nativeEl = this.grid.nativeElement.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "outlet", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this.outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultRowHeight", {
        /**
         * Returns the `IgxGridComponent`'s rows height.
         * ```typescript
         * const rowHeigh = this.grid.defaultRowHeight;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the `IgxGridComponent`'s rows height.
         * ```typescript
         * const rowHeigh = this.grid.defaultRowHeight;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 40;
                case DisplayDensity.compact:
                    return 32;
                default:
                    return 50;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultSummaryHeight", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 30;
                case DisplayDensity.compact:
                    return 24;
                default:
                    return 36;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultHeaderGroupMinWidth", {
        /**
         * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.
         * Used internally for restricting header group component width.
         * The values below depend on the header cell default right/left padding values.
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.
         * Used internally for restricting header group component width.
         * The values below depend on the header cell default right/left padding values.
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            switch (this.displayDensity) {
                case DisplayDensity.cosy:
                    return 32;
                case DisplayDensity.compact:
                    return 24;
                default:
                    return 48;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "calcPinnedContainerMaxWidth", {
        /**
         * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.
         * The width is 80% of the total grid width.
         * ```typescript
         * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.
         * The width is 80% of the total grid width.
         * ```typescript
         * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return (this.calcWidth * 80) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "unpinnedAreaMinWidth", {
        /**
         * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.
         * The width is 20% of the total grid width.
         * ```typescript
         * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.
         * The width is 20% of the total grid width.
         * ```typescript
         * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return (this.calcWidth * 20) / 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pinnedWidth", {
        /**
         * Returns the current width of the container for the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedWidth = this.grid.getPinnedWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the current width of the container for the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedWidth = this.grid.getPinnedWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (!isNaN(this._pinnedWidth)) {
                return this._pinnedWidth;
            }
            this._pinnedWidth = this.getPinnedWidth();
            return this._pinnedWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "unpinnedWidth", {
        /**
         * Returns the current width of the container for the unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedWidth = this.grid.getUnpinnedWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the current width of the container for the unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedWidth = this.grid.getUnpinnedWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (!isNaN(this._unpinnedWidth)) {
                return this._unpinnedWidth;
            }
            this._unpinnedWidth = this.getUnpinnedWidth();
            return this._unpinnedWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "featureColumnsWidth", {
        /**
         * @hidden
         * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
         * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.
         */
        get: /**
         * @hidden
         * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
         * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.
         * @return {?}
         */
        function () {
            return this.getFeatureColumnsWidth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "summariesMargin", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.featureColumnsWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "columns", {
        /**
         * Returns an array of `IgxColumnComponent`s.
         * ```typescript
         * const colums = this.grid.columns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of `IgxColumnComponent`s.
         * ```typescript
         * const colums = this.grid.columns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "pinnedColumns", {
        /**
         * Returns an array of the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedColumns = this.grid.pinnedColumns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of the pinned `IgxColumnComponent`s.
         * ```typescript
         * const pinnedColumns = this.grid.pinnedColumns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this._pinnedVisible.length) {
                return this._pinnedVisible;
            }
            this._pinnedVisible = this._pinnedColumns.filter(function (col) { return !col.hidden; });
            return this._pinnedVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "unpinnedColumns", {
        /**
         * Returns an array of unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedColumns = this.grid.unpinnedColumns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of unpinned `IgxColumnComponent`s.
         * ```typescript
         * const unpinnedColumns = this.grid.unpinnedColumns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this._unpinnedVisible.length) {
                return this._unpinnedVisible;
            }
            this._unpinnedVisible = this._unpinnedColumns.filter(function (col) { return !col.hidden; });
            return this._unpinnedVisible;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getHeaderGroupWidth = /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (this.hasColumnLayouts) {
            return '';
        }
        /** @type {?} */
        var colWidth = column.width;
        /** @type {?} */
        var minWidth = this.defaultHeaderGroupMinWidth;
        /** @type {?} */
        var isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {
            return minWidth.toString();
        }
        return column.width;
    };
    /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * @param name
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getColumnByName = /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.columnList.find(function (col) { return col.field === name; });
    };
    /**
     * Returns the `IgxColumnComponent` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * @param index
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `IgxColumnComponent` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getRowByIndex = /**
     * Returns the `IgxColumnComponent` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.gridAPI.get_row_by_index(index);
    };
    /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * @param keyValue
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} keyValue
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getRowByKey = /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} keyValue
     * @return {?}
     */
    function (keyValue) {
        return this.gridAPI.get_row_by_key(keyValue);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "visibleColumns", {
        /**
         * Returns an array of visible `IgxColumnComponent`s.
         * ```typescript
         * const visibleColumns = this.grid.visibleColumns.
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of visible `IgxColumnComponent`s.
         * ```typescript
         * const visibleColumns = this.grid.visibleColumns.
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this._visibleColumns.length) {
                return this._visibleColumns;
            }
            this._visibleColumns = this.columnList.filter(function (c) { return !c.hidden; });
            return this._visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * @param rowIndex
     * @param columnField
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?} columnField
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getCellByColumn = /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?} columnField
     * @return {?}
     */
    function (rowIndex, columnField) {
        /** @type {?} */
        var columnId = this.columnList.map(function (column) { return column.field; }).indexOf(columnField);
        if (columnId !== -1) {
            return this.gridAPI.get_cell_by_index(rowIndex, columnId);
        }
    };
    /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * @param rowSelector match any rowID
     * @param columnField
     * @memberof IgxGridBaseComponent
     */
    /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector match any rowID
     * @param {?} columnField
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getCellByKey = /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector match any rowID
     * @param {?} columnField
     * @return {?}
     */
    function (rowSelector, columnField) {
        return this.gridAPI.get_cell_by_key(rowSelector, columnField);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalPages", {
        /**
         * Returns the total number of pages.
         * ```typescript
         * const totalPages = this.grid.totalPages;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total number of pages.
         * ```typescript
         * const totalPages = this.grid.totalPages;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countPages;
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalRecords", {
        /**
         * Returns the total number of records.
         * Only functions when paging is enabled.
         * ```typescript
         * const totalRecords = this.grid.totalRecords;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total number of records.
         * Only functions when paging is enabled.
         * ```typescript
         * const totalRecords = this.grid.totalRecords;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this.pagingState) {
                return this.pagingState.metadata.countRecords;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isFirstPage", {
        /**
         * Returns if the current page is the first page.
         * ```typescript
         * const firstPage = this.grid.isFirstPage;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the current page is the first page.
         * ```typescript
         * const firstPage = this.grid.isFirstPage;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.page === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isLastPage", {
        /**
         * Returns if the current page is the last page.
         * ```typescript
         * const lastPage = this.grid.isLastPage;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the current page is the last page.
         * ```typescript
         * const lastPage = this.grid.isLastPage;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.page + 1 >= this.totalPages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "totalWidth", {
        /**
         * Returns the total width of the `IgxGridComponent`.
         * ```typescript
         * const gridWidth = this.grid.totalWidth;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns the total width of the `IgxGridComponent`.
         * ```typescript
         * const gridWidth = this.grid.totalWidth;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (!isNaN(this._totalWidth)) {
                return this._totalWidth;
            }
            // Take only top level columns
            /** @type {?} */
            var cols = this.visibleColumns.filter(function (col) { return col.level === 0 && !col.pinned; });
            /** @type {?} */
            var totalWidth = 0;
            /** @type {?} */
            var i = 0;
            for (i; i < cols.length; i++) {
                totalWidth += parseInt(cols[i].calcWidth, 10) || 0;
            }
            this._totalWidth = totalWidth;
            return totalWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "showRowCheckboxes", {
        get: /**
         * @return {?}
         */
        function () {
            return this.rowSelectable && this.columns.length > this.hiddenColumnsCount;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    IgxGridBaseComponent.prototype._moveColumns = /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    function (from, to, pos) {
        /** @type {?} */
        var list = this.columnList.toArray();
        /** @type {?} */
        var fromIndex = list.indexOf(from);
        /** @type {?} */
        var toIndex = list.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
            if (toIndex < 0) {
                toIndex = 0;
            }
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        list.splice.apply(list, tslib_1.__spread([toIndex, 0], list.splice(fromIndex, 1)));
        /** @type {?} */
        var newList = this._resetColumnList(list);
        this.columnList.reset(newList);
        this.columnList.notifyOnChanges();
        this._columns = this.columnList.toArray();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?=} list
     * @return {?}
     */
    IgxGridBaseComponent.prototype._resetColumnList = /**
     * @hidden
     * @protected
     * @param {?=} list
     * @return {?}
     */
    function (list) {
        if (!list) {
            list = this.columnList.toArray();
        }
        /** @type {?} */
        var newList = [];
        list.filter(function (c) { return c.level === 0; }).forEach(function (p) {
            newList.push(p);
            if (p.columnGroup) {
                newList = newList.concat(p.allChildren);
            }
        });
        return newList;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} position
     * @return {?}
     */
    IgxGridBaseComponent.prototype._reorderPinnedColumns = /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} position
     * @return {?}
     */
    function (from, to, position) {
        /** @type {?} */
        var pinned = this._pinnedColumns;
        /** @type {?} */
        var dropIndex = pinned.indexOf(to);
        if (to.columnGroup) {
            dropIndex += to.allChildren.length;
        }
        if (position === DropPosition.BeforeDropTarget) {
            dropIndex--;
        }
        if (position === DropPosition.AfterDropTarget) {
            dropIndex++;
        }
        pinned.splice.apply(pinned, tslib_1.__spread([dropIndex, 0], pinned.splice(pinned.indexOf(from), 1)));
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} parent
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    IgxGridBaseComponent.prototype._moveChildColumns = /**
     * @hidden
     * @protected
     * @param {?} parent
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    function (parent, from, to, pos) {
        /** @type {?} */
        var buffer = parent.children.toArray();
        /** @type {?} */
        var fromIndex = buffer.indexOf(from);
        /** @type {?} */
        var toIndex = buffer.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        buffer.splice.apply(buffer, tslib_1.__spread([toIndex, 0], buffer.splice(fromIndex, 1)));
        parent.children.reset(buffer);
    };
    /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
      * @memberof IgxGridBaseComponent
      */
    /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @param {?} dropTarget
     * @param {?=} pos
     * @return {?}
     */
    IgxGridBaseComponent.prototype.moveColumn = /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @param {?} dropTarget
     * @param {?=} pos
     * @return {?}
     */
    function (column, dropTarget, pos) {
        if (pos === void 0) { pos = DropPosition.None; }
        /** @type {?} */
        var position = pos;
        /** @type {?} */
        var fromIndex = column.visibleIndex;
        /** @type {?} */
        var toIndex = dropTarget.visibleIndex;
        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {
            position = DropPosition.BeforeDropTarget;
        }
        else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {
            position = DropPosition.AfterDropTarget;
        }
        else {
            position = DropPosition.None;
        }
        if ((column.level !== dropTarget.level) ||
            (column.topLevelParent !== dropTarget.topLevelParent)) {
            return;
        }
        this.endEdit(true);
        if (column.level) {
            this._moveChildColumns(column.parent, column, dropTarget, position);
        }
        if (dropTarget.pinned && column.pinned) {
            this._reorderPinnedColumns(column, dropTarget, position);
        }
        if (dropTarget.pinned && !column.pinned) {
            column.pin();
            this._reorderPinnedColumns(column, dropTarget, position);
        }
        if (!dropTarget.pinned && column.pinned) {
            column.unpin();
            /** @type {?} */
            var list = this.columnList.toArray();
            /** @type {?} */
            var fi = list.indexOf(column);
            /** @type {?} */
            var ti = list.indexOf(dropTarget);
            if (pos === DropPosition.BeforeDropTarget && fi < ti) {
                position = DropPosition.BeforeDropTarget;
            }
            else if (pos === DropPosition.AfterDropTarget && fi > ti) {
                position = DropPosition.AfterDropTarget;
            }
            else {
                position = DropPosition.None;
            }
        }
        this._moveColumns(column, dropTarget, position);
        this.cdr.detectChanges();
        if (this.hasColumnLayouts) {
            this.columns.filter(function (x) { return x.columnLayout; }).forEach(function (x) { return x.populateVisibleIndexes(); });
        }
        /** @type {?} */
        var args = {
            source: column,
            target: dropTarget
        };
        this.onColumnMovingEnd.emit(args);
    };
    /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.nextPage = /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        if (!this.isLastPage) {
            this.page += 1;
        }
    };
    /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.previousPage = /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    };
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * @param val
     * @memberof IgxGridBaseComponent
     */
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    IgxGridBaseComponent.prototype.paginate = /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.page = val;
    };
    /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.markForCheck = /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.cdr.detectChanges();
    };
    /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * @param data
     * @memberof IgxGridBaseComponent
     */
    /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} data
     * @return {?}
     */
    IgxGridBaseComponent.prototype.addRow = /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.gridAPI.addRowToData(data);
        this.onRowAdded.emit({ data: data });
        this._pipeTrigger++;
        this.cdr.markForCheck();
    };
    /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * @param rowSelector
     * @memberof IgxGridBaseComponent
     */
    /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deleteRow = /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector
     * @return {?}
     */
    function (rowSelector) {
        if (this.primaryKey !== undefined && this.primaryKey !== null) {
            this.deleteRowById(rowSelector);
        }
    };
    /** @hidden */
    /**
     * @hidden
     * @param {?} rowId
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deleteRowById = /**
     * @hidden
     * @param {?} rowId
     * @return {?}
     */
    function (rowId) {
        this.gridAPI.deleteRowById(rowId);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deleteRowFromData = /**
     * @hidden
     * @protected
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (rowID, index) {
        //  if there is a row (index !== 0) delete it
        //  if there is a row in ADD or UPDATE state change it's state to DELETE
        if (index !== -1) {
            if (this.transactions.enabled) {
                /** @type {?} */
                var transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };
                this.transactions.add(transaction, this.data[index]);
            }
            else {
                this.data.splice(index, 1);
            }
        }
        else {
            /** @type {?} */
            var state = this.transactions.getState(rowID);
            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);
        }
    };
    /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * @param value the new value which is to be set.
     * @param rowSelector corresponds to rowID.
     * @param column corresponds to column field.
     * @memberof IgxGridBaseComponent
     */
    /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value the new value which is to be set.
     * @param {?} rowSelector corresponds to rowID.
     * @param {?} column corresponds to column field.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.updateCell = /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value the new value which is to be set.
     * @param {?} rowSelector corresponds to rowID.
     * @param {?} column corresponds to column field.
     * @return {?}
     */
    function (value, rowSelector, column) {
        if (this.isDefined(this.primaryKey)) {
            /** @type {?} */
            var col = this.columnList.toArray().find(function (c) { return c.field === column; });
            if (col) {
                // Simplify
                /** @type {?} */
                var rowData = this.gridAPI.getRowData(rowSelector);
                /** @type {?} */
                var index = this.gridAPI.get_row_index_in_data(rowSelector);
                // If row passed is invalid
                if (index < 0) {
                    return;
                }
                /** @type {?} */
                var id = {
                    rowID: rowSelector,
                    columnID: col.index,
                    rowIndex: index
                };
                /** @type {?} */
                var cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);
                /** @type {?} */
                var args = this.gridAPI.update_cell(cell, value);
                if (this.crudService.cell && this.crudService.sameCell(cell)) {
                    if (args.cancel) {
                        return;
                    }
                    this.gridAPI.escape_editMode();
                }
                this.cdr.markForCheck();
            }
        }
    };
    /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * @param value
     * @param rowSelector correspond to rowID
     * @memberof IgxGridBaseComponent
     */
    /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} rowSelector correspond to rowID
     * @return {?}
     */
    IgxGridBaseComponent.prototype.updateRow = /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} rowSelector correspond to rowID
     * @return {?}
     */
    function (value, rowSelector) {
        if (this.isDefined(this.primaryKey)) {
            /** @type {?} */
            var editableCell = this.crudService.cell;
            if (editableCell && editableCell.id.rowID === rowSelector) {
                this.gridAPI.escape_editMode();
            }
            /** @type {?} */
            var row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));
            this.gridAPI.update_row(row, value);
            this.cdr.markForCheck();
        }
    };
    /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} expression
     * @return {?}
     */
    IgxGridBaseComponent.prototype.sort = /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        this.endEdit(false);
        if (expression instanceof Array) {
            this.gridAPI.sort_multiple(expression);
        }
        else {
            this.gridAPI.sort(expression);
        }
        this.onSortingDone.emit(expression);
    };
    /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * @param name
     * @param value
     * @param conditionOrExpressionTree
     * @param ignoreCase
     * @memberof IgxGridBaseComponent
     */
    /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    IgxGridBaseComponent.prototype.filter = /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    function (name, value, conditionOrExpressionTree, ignoreCase) {
        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);
    };
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * @param value
     * @param condition
     * @param ignoreCase
     * @memberof IgxGridBaseComponent
     */
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    IgxGridBaseComponent.prototype.filterGlobal = /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    function (value, condition, ignoreCase) {
        this.filteringService.filterGlobal(value, condition, ignoreCase);
    };
    /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * @param rest
     * @memberof IgxGridBaseComponent
     */
    /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    IgxGridBaseComponent.prototype.enableSummaries = /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._multipleSummaries(rest[0], true);
        }
        else {
            this._summaries(rest[0], true, rest[1]);
        }
        this.calculateGridHeight();
        this.cdr.detectChanges();
    };
    /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    IgxGridBaseComponent.prototype.disableSummaries = /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    function () {
        var rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rest[_i] = arguments[_i];
        }
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._disableMultipleSummaries(rest[0]);
        }
        else {
            this._summaries(rest[0], false);
        }
    };
    /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * @param name
     * @memberof IgxGridBaseComponent
     */
    /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearFilter = /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        this.filteringService.clearFilter(name);
    };
    /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * @param name
     * @memberof IgxGridBaseComponent
     */
    /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearSort = /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            this.sortingExpressions = [];
            return;
        }
        if (!this.gridAPI.get_column_by_name(name)) {
            return;
        }
        this.gridAPI.clear_sort(name);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} args
     * @return {?}
     */
    IgxGridBaseComponent.prototype.refreshGridState = /**
     * @hidden
     * @param {?=} args
     * @return {?}
     */
    function (args) {
        this.endEdit(true);
        this.summaryService.clearSummaryCache(args);
    };
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * @param columnName
     * @param index
     * @memberof IgxGridBaseComponent
     */
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.pinColumn = 
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    function (columnName, index) {
        /** @type {?} */
        var col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.pin(index);
    };
    /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * @param columnName
     * @param index
     * @memberof IgxGridBaseComponent
     */
    /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    IgxGridBaseComponent.prototype.unpinColumn = /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    function (columnName, index) {
        /** @type {?} */
        var col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.unpin(index);
    };
    /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.reflow = /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.calculateGridSizes();
    };
    /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * @param text the string to search.
     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @memberof IgxGridBaseComponent
     */
    /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @return {?}
     */
    IgxGridBaseComponent.prototype.findNext = /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @return {?}
     */
    function (text, caseSensitive, exactMatch) {
        return this.find(text, 1, caseSensitive, exactMatch);
    };
    /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ````
     * @param text the string to search.
     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param exactMatch optionally, if the text should match the entire value (defaults to false).
     * @memberof IgxGridBaseComponent
     */
    /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ````
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value (defaults to false).
     * @return {?}
     */
    IgxGridBaseComponent.prototype.findPrev = /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ````
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value (defaults to false).
     * @return {?}
     */
    function (text, caseSensitive, exactMatch) {
        return this.find(text, -1, caseSensitive, exactMatch);
    };
    /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * @param updateActiveInfo
     * @memberof IgxGridBaseComponent
     */
    /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} updateActiveInfo
     * @return {?}
     */
    IgxGridBaseComponent.prototype.refreshSearch = /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} updateActiveInfo
     * @return {?}
     */
    function (updateActiveInfo) {
        var _this = this;
        if (this.lastSearchInfo.searchText) {
            this.rebuildMatchCache();
            if (updateActiveInfo) {
                /** @type {?} */
                var activeInfo_1 = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
                this.lastSearchInfo.matchInfoCache.forEach(function (match, i) {
                    if (match.column === activeInfo_1.column &&
                        match.row === activeInfo_1.row &&
                        match.index === activeInfo_1.index) {
                        _this.lastSearchInfo.activeMatchIndex = i;
                    }
                });
            }
            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);
        }
        else {
            return 0;
        }
    };
    /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearSearch = /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        this.rowList.forEach(function (row) {
            if (row.cells) {
                row.cells.forEach(function (c) {
                    c.clearHighlight();
                });
            }
        });
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasSortableColumns", {
        /**
         * Returns if the `IgxGridComponent` has sortable columns.
         * ```typescript
         * const sortableGrid = this.grid.hasSortableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has sortable columns.
         * ```typescript
         * const sortableGrid = this.grid.hasSortableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList.some(function (col) { return col.sortable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasEditableColumns", {
        /**
         * Returns if the `IgxGridComponent` has editable columns.
         * ```typescript
         * const editableGrid = this.grid.hasEditableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has editable columns.
         * ```typescript
         * const editableGrid = this.grid.hasEditableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList.some(function (col) { return col.editable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasFilterableColumns", {
        /**
         * Returns if the `IgxGridComponent` has fiterable columns.
         * ```typescript
         * const filterableGrid = this.grid.hasFilterableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has fiterable columns.
         * ```typescript
         * const filterableGrid = this.grid.hasFilterableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList.some(function (col) { return col.filterable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasSummarizedColumns", {
        /**
         * Returns if the `IgxGridComponent` has summarized columns.
         * ```typescript
         * const summarizedGrid = this.grid.hasSummarizedColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has summarized columns.
         * ```typescript
         * const summarizedGrid = this.grid.hasSummarizedColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.summaryService.hasSummarizedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rootSummariesEnabled", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasMovableColumns", {
        /**
         * Returns if the `IgxGridComponent` has moveable columns.
         * ```typescript
         * const movableGrid = this.grid.hasMovableColumns;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has moveable columns.
         * ```typescript
         * const movableGrid = this.grid.hasMovableColumns;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this.columnList && this.columnList.some(function (col) { return col.movable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasColumnGroups", {
        /**
         * Returns if the `IgxGridComponent` has column groups.
         * ```typescript
         * const groupGrid = this.grid.hasColumnGroups;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has column groups.
         * ```typescript
         * const groupGrid = this.grid.hasColumnGroups;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._columnGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "hasColumnLayouts", {
        /**
         * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.
         * ```typescript
         * const layoutGrid = this.grid.hasColumnLayouts;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.
         * ```typescript
         * const layoutGrid = this.grid.hasColumnLayouts;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return !!this.columnList.some(function (col) { return col.columnLayout; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "selectedCells", {
        /**
         * Returns an array of the selected `IgxGridCellComponent`s.
         * ```typescript
         * const selectedCells = this.grid.selectedCells;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array of the selected `IgxGridCellComponent`s.
         * ```typescript
         * const selectedCells = this.grid.selectedCells;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            if (this.dataRowList) {
                return this.dataRowList.map(function (row) { return row.cells.filter(function (cell) { return cell.selected; }); })
                    .reduce(function (a, b) { return a.concat(b); }, []);
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "multiRowLayoutRowSize", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._multiRowLayoutRowSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowBasedHeight", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this.dataLength * this.rowHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isPercentWidth", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this._width && this._width.indexOf('%') !== -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "isPercentHeight", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this._height && this._height.indexOf('%') !== -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Sets columns defaultWidth property
     */
    /**
     * @hidden
     * Sets columns defaultWidth property
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype._derivePossibleWidth = /**
     * @hidden
     * Sets columns defaultWidth property
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.columnWidthSetByUser) {
            this._columnWidth = this.getPossibleColumnWidth();
            this.columnList.forEach(function (column) {
                if (_this.hasColumnLayouts && parseInt(_this._columnWidth, 10)) {
                    /** @type {?} */
                    var columnWidthCombined = parseInt(_this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);
                    column.defaultWidth = columnWidthCombined + 'px';
                }
                else {
                    column.defaultWidth = _this._columnWidth;
                }
            });
            this.resetCachedWidths();
        }
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "defaultTargetBodyHeight", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var allItems = this.totalItemCount || this.dataLength;
            return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber, this.paging ? Math.min(allItems, this.perPage) : allItems);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "renderedRowHeight", {
        /**
         * @hidden @internal
         * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases
         */
        get: /**
         * @hidden \@internal
         * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases
         * @return {?}
         */
        function () {
            return this.rowHeight + 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     */
    /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.calculateGridHeight = /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     * @protected
     * @return {?}
     */
    function () {
        // TODO: Calculate based on grid density
        if (this.maxLevelHeaderDepth) {
            this.theadRow.nativeElement.style.height = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +
                (this.allowFiltering && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1 + "px";
        }
        this.summariesHeight = 0;
        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {
            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();
        }
        this.calcHeight = this._calculateGridBodyHeight();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getGroupAreaHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return 0;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getToolbarHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var toolbarHeight = 0;
        if (this.showToolbar && this.toolbarHtml != null) {
            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?
                this.toolbarHtml.nativeElement.offsetHeight : 0;
        }
        return toolbarHeight;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPagingHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pagingHeight = 0;
        if (this.paging && this.paginator) {
            pagingHeight = this.paginator.nativeElement.firstElementChild ?
                this.paginator.nativeElement.offsetHeight : 0;
        }
        return pagingHeight;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype._calculateGridBodyHeight = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        if (!this._height) {
            return null;
        }
        /** @type {?} */
        var footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -
            this.tfoot.nativeElement.clientHeight;
        /** @type {?} */
        var gridHeight;
        /** @type {?} */
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement);
        /** @type {?} */
        var toolbarHeight = this.getToolbarHeight();
        /** @type {?} */
        var pagingHeight = this.getPagingHeight();
        /** @type {?} */
        var groupAreaHeight = this.getGroupAreaHeight();
        /** @type {?} */
        var renderedHeight = toolbarHeight + this.theadRow.nativeElement.offsetHeight +
            this.summariesHeight + pagingHeight + groupAreaHeight + footerBordersAndScrollbars +
            this.scr.nativeElement.clientHeight;
        if (this.isPercentHeight) {
            /*height in %*/
            if (!this.nativeElement.parentElement ||
                this.nativeElement.parentElement.clientHeight === renderedHeight) {
                /* parent element is sized by the rendered elements which means
                the grid should attempt a content-box style rendering */
                this._autoSize = true;
            }
            if (this._autoSize || computed.getPropertyValue('height').indexOf('%') !== -1) {
                /** @type {?} */
                var bodyHeight = this.getDataBasedBodyHeight();
                return bodyHeight > 0 ? bodyHeight : null;
            }
            gridHeight = parseInt(computed.getPropertyValue('height'), 10);
        }
        else {
            gridHeight = parseInt(this._height, 10);
        }
        /** @type {?} */
        var height = Math.abs(gridHeight - renderedHeight);
        if (height === 0 || isNaN(gridHeight)) {
            /** @type {?} */
            var bodyHeight = this.defaultTargetBodyHeight;
            return bodyHeight > 0 ? bodyHeight : null;
        }
        return height;
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "outerWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     */
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getVisibleContentHeight = /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;
        if (this.hasSummarizedColumns) {
            height += this.tfoot.nativeElement.clientHeight;
        }
        return height;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} baseWidth
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPossibleColumnWidth = /**
     * @hidden
     * @param {?=} baseWidth
     * @return {?}
     */
    function (baseWidth) {
        if (baseWidth === void 0) { baseWidth = null; }
        /** @type {?} */
        var computedWidth;
        if (baseWidth !== null) {
            computedWidth = baseWidth;
        }
        else {
            computedWidth = this.calcWidth ||
                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);
        }
        if (this.showRowCheckboxes) {
            computedWidth -= this.headerCheckboxContainer ? this.headerCheckboxContainer.nativeElement.offsetWidth : 0;
        }
        /** @type {?} */
        var visibleChildColumns = this.visibleColumns.filter(function (c) { return !c.columnGroup; });
        // Column layouts related
        /** @type {?} */
        var visibleCols = [];
        /** @type {?} */
        var columnBlocks = this.visibleColumns.filter(function (c) { return c.columnGroup; });
        /** @type {?} */
        var colsPerBlock = columnBlocks.map(function (block) { return block.getInitialChildColumnSizes(block.children); });
        /** @type {?} */
        var combinedBlocksSize = colsPerBlock.reduce(function (acc, item) { return acc + item.length; }, 0);
        colsPerBlock.forEach(function (blockCols) { return visibleCols = visibleCols.concat(blockCols); });
        //
        /** @type {?} */
        var columnsWithSetWidths = this.hasColumnLayouts ?
            visibleCols.filter(function (c) { return c.widthSetByUser; }) :
            visibleChildColumns.filter(function (c) { return c.widthSetByUser; });
        /** @type {?} */
        var columnsToSize = this.hasColumnLayouts ?
            combinedBlocksSize - columnsWithSetWidths.length :
            visibleChildColumns.length - columnsWithSetWidths.length;
        /** @type {?} */
        var sumExistingWidths = columnsWithSetWidths
            .reduce(function (prev, curr) {
            /** @type {?} */
            var colWidth = curr.width;
            /** @type {?} */
            var widthValue = parseInt(colWidth, 10);
            /** @type {?} */
            var currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?
                widthValue / 100 * computedWidth :
                widthValue;
            return prev + currWidth;
        }, 0);
        /** @type {?} */
        var columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?
            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :
            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));
        return columnWidth.toString();
    };
    /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     */
    /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.calculateGridWidth = /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width;
        /** @type {?} */
        var computed = this.document.defaultView.getComputedStyle(this.nativeElement);
        /** @type {?} */
        var el = this.document.getElementById(this.nativeElement.id);
        if (this.isPercentWidth) {
            /* width in %*/
            width = computed.getPropertyValue('width').indexOf('%') === -1 ?
                parseInt(computed.getPropertyValue('width'), 10) : null;
        }
        else {
            width = parseInt(this._width, 10);
        }
        if (!width && el) {
            width = el.offsetWidth;
        }
        if (!width) {
            width = this.columnList.reduce(function (sum, item) { return sum + parseInt((item.width || item.defaultWidth), 10); }, 0);
        }
        if (this.hasVerticalSroll()) {
            width -= this.scrollWidth;
        }
        if (Number.isFinite(width) && width !== this.calcWidth) {
            this.calcWidth = width;
            this.cdr.detectChanges();
        }
        this._derivePossibleWidth();
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.hasVerticalSroll = /**
     * @return {?}
     */
    function () {
        if (!this._ngAfterViewInitPassed) {
            return false;
        }
        /** @type {?} */
        var isScrollable = this.verticalScrollContainer.isScrollable();
        return !!(this.calcWidth && this.verticalScrollContainer.igxForOf &&
            this.verticalScrollContainer.igxForOf.length > 0 &&
            isScrollable);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getDataBasedBodyHeight = /**
     * @hidden \@internal
     * @protected
     * @return {?}
     */
    function () {
        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?
            0 : this.defaultTargetBodyHeight;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} change
     * @return {?}
     */
    IgxGridBaseComponent.prototype.onColumnsChanged = /**
     * @hidden
     * @protected
     * @param {?} change
     * @return {?}
     */
    function (change) {
        var _this = this;
        /** @type {?} */
        var diff = this.columnListDiffer.diff(change);
        if (diff) {
            /** @type {?} */
            var added_1 = false;
            /** @type {?} */
            var removed_1 = false;
            this.initColumns(this.columnList);
            diff.forEachAddedItem(function (record) {
                _this.onColumnInit.emit(record.item);
                added_1 = true;
            });
            diff.forEachRemovedItem(function (record) {
                // Clear Filtering
                _this.gridAPI.clear_filter(record.item.field);
                // Clear Sorting
                _this.gridAPI.clear_sort(record.item.field);
                removed_1 = true;
            });
            this.resetCaches();
            if (added_1 || removed_1) {
                this.summaryService.clearSummaryCache();
                this.calculateGridSizes();
            }
        }
        this.markForCheck();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.calculateGridSizes = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /*
            TODO: (R.K.) This layered lasagne should be refactored
            ASAP. The reason I have to reset the caches so many times is because
            after teach `detectChanges` call they are filled with invalid
            state. Of course all of this happens midway through the grid
            sizing process which of course, uses values from the caches, thus resulting
            in a broken layout.
        */
        this.resetCaches();
        /** @type {?} */
        var hasScroll = this.hasVerticalSroll();
        this.calculateGridWidth();
        this.resetCaches();
        this.cdr.detectChanges();
        this.calculateGridHeight();
        if (this.rowEditable) {
            this.repositionRowEditingOverlay(this.rowInEditMode);
        }
        if (this.filteringService.isFilterRowVisible) {
            this.filteringRow.resetChipsArea();
        }
        this.cdr.detectChanges();
        this.resetCaches();
        // in case scrollbar has appeared recalc to size correctly.
        if (hasScroll !== this.hasVerticalSroll()) {
            this.calculateGridWidth();
            this.cdr.detectChanges();
            this.resetCaches();
        }
    };
    /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * Method used to override the calculations.
     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.
     */
    /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * Method used to override the calculations.
     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getFeatureColumnsWidth = /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * Method used to override the calculations.
     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width = 0;
        if (this.headerCheckboxContainer) {
            width += this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;
        }
        if (this.headerDragContainer) {
            width += this.headerDragContainer.nativeElement.getBoundingClientRect().width;
        }
        return width;
    };
    /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * @param takeHidden If we should take into account the hidden columns in the pinned area.
     * @memberof IgxGridBaseComponent
     */
    /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPinnedWidth = /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    function (takeHidden) {
        if (takeHidden === void 0) { takeHidden = false; }
        var e_1, _a;
        /** @type {?} */
        var fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;
        /** @type {?} */
        var sum = 0;
        try {
            for (var fc_1 = tslib_1.__values(fc), fc_1_1 = fc_1.next(); !fc_1_1.done; fc_1_1 = fc_1.next()) {
                var col = fc_1_1.value;
                if (col.level === 0) {
                    sum += parseInt(col.calcWidth, 10);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fc_1_1 && !fc_1_1.done && (_a = fc_1.return)) _a.call(fc_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        sum += this.featureColumnsWidth;
        return sum;
    };
    /**
     * @hidden
     * Gets calculated width of the unpinned area
     * @param takeHidden If we should take into account the hidden columns in the pinned area.
     * @memberof IgxGridBaseComponent
     */
    /**
     * @hidden
     * Gets calculated width of the unpinned area
     * \@memberof IgxGridBaseComponent
     * @protected
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getUnpinnedWidth = /**
     * @hidden
     * Gets calculated width of the unpinned area
     * \@memberof IgxGridBaseComponent
     * @protected
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    function (takeHidden) {
        if (takeHidden === void 0) { takeHidden = false; }
        /** @type {?} */
        var width = this.isPercentWidth ?
            this.calcWidth :
            parseInt(this._width, 10);
        if (this.hasVerticalSroll() && !this.isPercentWidth) {
            width -= this.scrollWidth;
        }
        return width - this.getPinnedWidth(takeHidden);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} fieldName
     * @param {?} hasSummary
     * @param {?=} summaryOperand
     * @return {?}
     */
    IgxGridBaseComponent.prototype._summaries = /**
     * @hidden
     * @protected
     * @param {?} fieldName
     * @param {?} hasSummary
     * @param {?=} summaryOperand
     * @return {?}
     */
    function (fieldName, hasSummary, summaryOperand) {
        /** @type {?} */
        var column = this.gridAPI.get_column_by_name(fieldName);
        if (column) {
            column.hasSummary = hasSummary;
            if (summaryOperand) {
                if (this.rootSummariesEnabled) {
                    this.summaryService.retriggerRootPipe++;
                }
                column.summaries = summaryOperand;
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @param {?} hasSummary
     * @return {?}
     */
    IgxGridBaseComponent.prototype._multipleSummaries = /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @param {?} hasSummary
     * @return {?}
     */
    function (expressions, hasSummary) {
        var _this = this;
        expressions.forEach(function (element) {
            _this._summaries(element.fieldName, hasSummary, element.customSummary);
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @return {?}
     */
    IgxGridBaseComponent.prototype._disableMultipleSummaries = /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @return {?}
     */
    function (expressions) {
        var _this = this;
        expressions.forEach(function (column) {
            /** @type {?} */
            var columnName = column && column.fieldName ? column.fieldName : column;
            _this._summaries(columnName, false);
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} rec
     * @return {?}
     */
    IgxGridBaseComponent.prototype.resolveDataTypes = /**
     * @hidden
     * @protected
     * @param {?} rec
     * @return {?}
     */
    function (rec) {
        if (typeof rec === 'number') {
            return DataType.Number;
        }
        else if (typeof rec === 'boolean') {
            return DataType.Boolean;
        }
        else if (typeof rec === 'object' && rec instanceof Date) {
            return DataType.Date;
        }
        return DataType.String;
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getScrollWidth = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var div = document.createElement('div');
        /** @type {?} */
        var style = div.style;
        style.width = '100px';
        style.height = '100px';
        style.position = 'absolute';
        style.top = '-10000px';
        style.top = '-10000px';
        style.overflow = 'scroll';
        document.body.appendChild(div);
        /** @type {?} */
        var scrollWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
        return scrollWidth;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.autogenerateColumns = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var data = this.gridAPI.get_data();
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        /** @type {?} */
        var fields = this.generateDataFields(data);
        /** @type {?} */
        var columns = [];
        fields.forEach(function (field) {
            /** @type {?} */
            var ref = _this.viewRef.createComponent(factory, null, _this.viewRef.injector);
            ref.instance.field = field;
            ref.instance.dataType = _this.resolveDataTypes(data[0][field]);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        this.columnList.reset(columns);
        if (data && data.length > 0) {
            this.shouldGenerate = false;
        }
    };
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    IgxGridBaseComponent.prototype.generateDataFields = /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return Object.keys(data && data.length !== 0 ? data[0] : []);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} arr
     * @return {?}
     */
    IgxGridBaseComponent.prototype.onlyTopLevel = /**
     * @hidden
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        return arr.filter(function (c) { return c.level === 0; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} collection
     * @param {?=} cb
     * @return {?}
     */
    IgxGridBaseComponent.prototype.initColumns = /**
     * @hidden
     * @protected
     * @param {?} collection
     * @param {?=} cb
     * @return {?}
     */
    function (collection, cb) {
        var _this = this;
        if (cb === void 0) { cb = null; }
        // XXX: Deprecate index
        this._columnGroups = this.columnList.some(function (col) { return col.columnGroup; });
        if (this.hasColumnLayouts) {
            // Set overall row layout size
            this.columnList.forEach(function (col) {
                if (col.columnLayout) {
                    /** @type {?} */
                    var layoutSize = col.children ?
                        col.children.reduce(function (acc, val) { return Math.max(val.rowStart + val.gridRowSpan - 1, acc); }, 1) :
                        1;
                    _this._multiRowLayoutRowSize = Math.max(layoutSize, _this._multiRowLayoutRowSize);
                }
            });
        }
        if (this.hasColumnLayouts && this.hasColumnGroups) {
            // invalid configuration - multi-row and column groups
            // remove column groups
            /** @type {?} */
            var columnLayoutColumns = this.columnList.filter(function (col) { return col.columnLayout || col.columnLayoutChild; });
            this.columnList.reset(columnLayoutColumns);
        }
        this._maxLevelHeaderDepth = null;
        this._columns = this.columnList.toArray();
        collection.forEach(function (column) {
            column.grid = _this;
            column.defaultWidth = _this.columnWidth;
            _this.setColumnEditState(column);
            if (cb) {
                cb(column);
            }
        });
        this.reinitPinStates();
        if (this.hasColumnLayouts) {
            collection.forEach(function (column) {
                column.populateVisibleIndexes();
            });
        }
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.setColumnEditState = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.
        if (this.rowEditable && column.editable === null &&
            column.field && column.field !== this.primaryKey) {
            column.editable = this.rowEditable;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.reinitPinStates = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter(function (c) { return c.pinned; }) :
            this.columnList.filter(function (c) { return c.pinned; }).sort(function (a, b) { return _this._pinnedColumns.indexOf(a) - _this._pinnedColumns.indexOf(b); });
        this._unpinnedColumns = this.columnList.filter(function (c) { return !c.pinned; });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fieldName
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isColumnGrouped = /**
     * @hidden
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return false;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @param {?} filteredData
     * @return {?}
     */
    IgxGridBaseComponent.prototype.onHeaderCheckboxClick = /**
     * @hidden
     * @param {?} event
     * @param {?} filteredData
     * @return {?}
     */
    function (event, filteredData) {
        this.allRowsSelected = event.checked;
        /** @type {?} */
        var newSelection = event.checked ?
            filteredData ?
                this.selection.add_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :
                this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey) :
            filteredData ?
                this.selection.delete_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :
                this.selection.get_empty();
        this.triggerRowSelectionChange(newSelection, null, event, event.checked);
        this.checkHeaderCheckboxStatus(event.checked);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "headerCheckboxAriaLabel", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._filteringExpressionsTree.filteringOperands.length > 0 ?
                this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :
                this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} headerStatus
     * @return {?}
     */
    IgxGridBaseComponent.prototype.checkHeaderCheckboxStatus = /**
     * @hidden
     * @param {?=} headerStatus
     * @return {?}
     */
    function (headerStatus) {
        if (headerStatus === undefined) {
            /** @type {?} */
            var filteredData = this.filteringService.filteredData;
            /** @type {?} */
            var dataLength = filteredData ? filteredData.length : this.dataLength;
            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);
            if (this.headerCheckbox) {
                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);
                if (!this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.checked =
                        this.allRowsSelected;
                }
            }
            this.cdr.markForCheck();
        }
        else if (this.headerCheckbox) {
            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} componentID
     * @param {?} filteredData
     * @param {?=} primaryKey
     * @return {?}
     */
    IgxGridBaseComponent.prototype.filteredItemsStatus = /**
     * @hidden
     * @param {?} componentID
     * @param {?} filteredData
     * @param {?=} primaryKey
     * @return {?}
     */
    function (componentID, filteredData, primaryKey) {
        var e_2, _a;
        /** @type {?} */
        var currSelection = this.selection.get(componentID);
        /** @type {?} */
        var atLeastOneSelected = false;
        /** @type {?} */
        var notAllSelected = false;
        if (currSelection) {
            try {
                for (var _b = tslib_1.__values(Object.keys(filteredData)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    /** @type {?} */
                    var dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];
                    if (currSelection.has(dataItem)) {
                        atLeastOneSelected = true;
                        if (notAllSelected) {
                            return 'indeterminate';
                        }
                    }
                    else {
                        notAllSelected = true;
                        if (atLeastOneSelected) {
                            return 'indeterminate';
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return atLeastOneSelected ? 'allSelected' : 'noneSelected';
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} data
     * @return {?}
     */
    IgxGridBaseComponent.prototype.updateHeaderCheckboxStatusOnFilter = /**
     * @hidden
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (!data) {
            this.checkHeaderCheckboxStatus();
            return;
        }
        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {
            case 'allSelected': {
                if (!this.allRowsSelected) {
                    this.allRowsSelected = true;
                }
                if (this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = false;
                }
                break;
            }
            case 'noneSelected': {
                if (this.allRowsSelected) {
                    this.allRowsSelected = false;
                }
                if (this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = false;
                }
                break;
            }
            default: {
                if (!this.headerCheckbox.indeterminate) {
                    this.headerCheckbox.indeterminate = true;
                }
                if (this.allRowsSelected) {
                    this.allRowsSelected = false;
                }
                break;
            }
        }
    };
    /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectedRows = /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selection;
        selection = this.selection.get(this.id);
        return selection ? Array.from(selection) : [];
    };
    /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * @param rowIDs
     * @param clearCurrentSelection if true clears the current selection
     * @memberof IgxGridBaseComponent
     */
    /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @param {?=} clearCurrentSelection if true clears the current selection
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectRows = /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @param {?=} clearCurrentSelection if true clears the current selection
     * @return {?}
     */
    function (rowIDs, clearCurrentSelection) {
        var _this = this;
        /** @type {?} */
        var newSelection;
        /** @type {?} */
        var selectableRows = [];
        if (this.transactions.enabled) {
            selectableRows = rowIDs.filter(function (e) { return !_this.gridAPI.row_deleted_transaction(e); });
        }
        else {
            selectableRows = rowIDs;
        }
        newSelection = this.selection.add_items(this.id, selectableRows, clearCurrentSelection);
        this.triggerRowSelectionChange(newSelection);
    };
    /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * @param rowIDs
     * @memberof IgxGridBaseComponent
     */
    /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deselectRows = /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @return {?}
     */
    function (rowIDs) {
        /** @type {?} */
        var newSelection;
        newSelection = this.selection.delete_items(this.id, rowIDs);
        this.triggerRowSelectionChange(newSelection);
    };
    /**
     * Selects all rows
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * ```typescript
     * this.grid.selectAllRows();
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * Selects all rows
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * ```typescript
     * this.grid.selectAllRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectAllRows = /**
     * Selects all rows
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * ```typescript
     * this.grid.selectAllRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    function () {
        this.triggerRowSelectionChange(this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey));
    };
    /**
     * Deselects all rows
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     */
    /**
     * Deselects all rows
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * @return {?}
     */
    IgxGridBaseComponent.prototype.deselectAllRows = /**
     * Deselects all rows
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * @return {?}
     */
    function () {
        this.triggerRowSelectionChange(this.selection.get_empty());
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.clearCellSelection = /**
     * @return {?}
     */
    function () {
        this.selectionService.clear();
        this.selectionService.activeElement = null;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    IgxGridBaseComponent.prototype.dragScroll = /**
     * @param {?} dir
     * @return {?}
     */
    function (dir) {
        /** @type {?} */
        var scrollDelta = 48;
        /** @type {?} */
        var horizontal = this.parentVirtDir.getHorizontalScroll();
        /** @type {?} */
        var vertical = this.verticalScrollContainer.getVerticalScroll();
        switch (dir) {
            case DragScrollDirection.LEFT:
                horizontal.scrollLeft -= scrollDelta;
                break;
            case DragScrollDirection.RIGHT:
                horizontal.scrollLeft += scrollDelta;
                break;
            case DragScrollDirection.TOP:
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.BOTTOM:
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.TOPLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.TOPRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            default:
                return;
        }
        this.wheelHandler();
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isDefined = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        return arg !== undefined && arg !== null;
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    IgxGridBaseComponent.prototype.selectRange = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        var _this = this;
        if (!this.isDefined(arg)) {
            this.clearCellSelection();
            return;
        }
        if (arg instanceof Array) {
            arg.forEach(function (range) { return _this.setSelection(range); });
        }
        else {
            this.setSelection(arg);
        }
        this.cdr.markForCheck();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    IgxGridBaseComponent.prototype.columnToVisibleIndex = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var visibleColumns = this.visibleColumns;
        if (typeof field === 'number') {
            return field;
        }
        return visibleColumns.find(function (column) { return column.field === field; }).visibleIndex;
    };
    /**
     * @param {?} range
     * @return {?}
     */
    IgxGridBaseComponent.prototype.setSelection = /**
     * @param {?} range
     * @return {?}
     */
    function (range) {
        /** @type {?} */
        var startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };
        /** @type {?} */
        var endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };
        this.selectionService.pointerState.node = startNode;
        this.selectionService.selectRange(endNode, this.selectionService.pointerState);
        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);
        this.selectionService.initPointerState();
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getSelectedRanges = /**
     * @return {?}
     */
    function () {
        return this.selectionService.ranges;
    };
    /**
     * @param {?} source
     * @return {?}
     */
    IgxGridBaseComponent.prototype.extractDataFromSelection = /**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        var e_3, _a, e_4, _b;
        /** @type {?} */
        var column;
        /** @type {?} */
        var record = {};
        /** @type {?} */
        var selectedData = [];
        /** @type {?} */
        var selectionMap = Array.from(this.selectionService.selection)
            .filter(function (tuple) { return tuple[0] < source.length; });
        /** @type {?} */
        var visibleColumns = this.visibleColumns
            .filter(function (col) { return !col.columnGroup; })
            .sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
        try {
            for (var selectionMap_1 = tslib_1.__values(selectionMap), selectionMap_1_1 = selectionMap_1.next(); !selectionMap_1_1.done; selectionMap_1_1 = selectionMap_1.next()) {
                var _c = tslib_1.__read(selectionMap_1_1.value, 2), row = _c[0], set = _c[1];
                if (!source[row]) {
                    continue;
                }
                /** @type {?} */
                var temp = Array.from(set);
                try {
                    for (var temp_1 = tslib_1.__values(temp), temp_1_1 = temp_1.next(); !temp_1_1.done; temp_1_1 = temp_1.next()) {
                        var each = temp_1_1.value;
                        column = visibleColumns[each];
                        if (column) {
                            record[column.field] = source[row][column.field];
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (temp_1_1 && !temp_1_1.done && (_b = temp_1.return)) _b.call(temp_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                if (Object.keys(record).length) {
                    selectedData.push(record);
                }
                record = {};
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (selectionMap_1_1 && !selectionMap_1_1.done && (_a = selectionMap_1.return)) _a.call(selectionMap_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return selectedData;
    };
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getSelectedData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var source = this.verticalScrollContainer.igxForOf;
        return this.extractDataFromSelection(source);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} newSelectionAsSet
     * @param {?=} row
     * @param {?=} event
     * @param {?=} headerStatus
     * @return {?}
     */
    IgxGridBaseComponent.prototype.triggerRowSelectionChange = /**
     * @hidden
     * @param {?} newSelectionAsSet
     * @param {?=} row
     * @param {?=} event
     * @param {?=} headerStatus
     * @return {?}
     */
    function (newSelectionAsSet, row, event, headerStatus) {
        /** @type {?} */
        var oldSelectionAsSet = this.selection.get(this.id);
        /** @type {?} */
        var oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];
        /** @type {?} */
        var newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];
        /** @type {?} */
        var args = { oldSelection: oldSelection, newSelection: newSelection, row: row, event: event };
        this.onRowSelectionChange.emit(args);
        newSelectionAsSet = this.selection.get_empty();
        for (var i = 0; i < args.newSelection.length; i++) {
            newSelectionAsSet.add(args.newSelection[i]);
        }
        this.selection.set(this.id, newSelectionAsSet);
        this.checkHeaderCheckboxStatus(headerStatus);
    };
    /**
     * @hidden
     */
    // @HostListener('scroll', ['$event'])
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    // @HostListener('scroll', ['$event'])
    IgxGridBaseComponent.prototype.scrollHandler = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    // @HostListener('scroll', ['$event'])
    function (event) {
        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;
        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;
        event.target.scrollLeft = 0;
        event.target.scrollTop = 0;
    };
    /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * @memberof IgxGridBaseComponent
     */
    /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    IgxGridBaseComponent.prototype.navigateTo = /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColIndex, cb) {
        var _this = this;
        if (visibleColIndex === void 0) { visibleColIndex = -1; }
        if (cb === void 0) { cb = null; }
        if (rowIndex < 0 || rowIndex > this.verticalScrollContainer.igxForOf.length - 1
            || (visibleColIndex !== -1 && this.columnList.map(function (col) { return col.visibleIndex; }).indexOf(visibleColIndex) === -1)) {
            return;
        }
        this.wheelHandler();
        if (this.verticalScrollContainer.igxForOf.slice(rowIndex, rowIndex + 1).find(function (rec) { return rec.expression || rec.childGridsData; })) {
            visibleColIndex = -1;
        }
        if (visibleColIndex === -1 || (this.navigation.isColumnFullyVisible(visibleColIndex)
            && this.navigation.isColumnLeftFullyVisible(visibleColIndex))) {
            if (this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex)) {
                this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex, function () { _this.executeCallback(rowIndex, visibleColIndex, cb); });
            }
            else {
                this.executeCallback(rowIndex, visibleColIndex, cb);
            }
        }
        else {
            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false, function () { _this.executeCallback(rowIndex, visibleColIndex, cb); });
        }
    };
    /**
    * Returns `ICellPosition` which defines the next cell,
    * according to the current position, that match specific criteria.
    * You can pass callback function as a third parameter of `getPreviousCell` method.
    * The callback function accepts IgxColumnComponent as a param
    * ```typescript
    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
    * ```
    * @memberof IgxGridBaseComponent
    */
    /**
     * Returns `ICellPosition` which defines the next cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getNextCell = /**
     * Returns `ICellPosition` which defines the next cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    function (currRowIndex, curVisibleColIndex, callback) {
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var columns = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; });
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        /** @type {?} */
        var colIndexes = callback ? columns.filter(function (col) { return callback(col); }).map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return a - b; }) :
            columns.map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return a - b; });
        /** @type {?} */
        var nextCellIndex = colIndexes.find(function (index) { return index > curVisibleColIndex; });
        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; }) && nextCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    };
    /**
    * Returns `ICellPosition` which defines the previous cell,
    * according to the current position, that match specific criteria.
    * You can pass callback function as a third parameter of `getPreviousCell` method.
    * The callback function accepts IgxColumnComponent as a param
    * ```typescript
    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
    * ```
    * @memberof IgxGridBaseComponent
    */
    /**
     * Returns `ICellPosition` which defines the previous cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPreviousCell = /**
     * Returns `ICellPosition` which defines the previous cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    function (currRowIndex, curVisibleColIndex, callback) {
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var columns = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; });
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        /** @type {?} */
        var colIndexes = callback ? columns.filter(function (col) { return callback(col); }).map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return b - a; }) :
            columns.map(function (editCol) { return editCol.visibleIndex; }).sort(function (a, b) { return b - a; });
        /** @type {?} */
        var prevCellIndex = colIndexes.find(function (index) { return index < curVisibleColIndex; });
        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; }) && prevCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    };
    /**
     * @private
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    IgxGridBaseComponent.prototype.executeCallback = /**
     * @private
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColIndex, cb) {
        if (visibleColIndex === void 0) { visibleColIndex = -1; }
        if (cb === void 0) { cb = null; }
        if (!cb) {
            return;
        }
        /** @type {?} */
        var targetType;
        /** @type {?} */
        var target;
        /** @type {?} */
        var row = this.summariesRowList.filter(function (s) { return s.index !== 0; }).concat(this.rowList.toArray()).find(function (r) { return r.index === rowIndex; });
        if (!row) {
            return;
        }
        switch (row.nativeElement.tagName.toLowerCase()) {
            case 'igx-grid-groupby-row':
                targetType = GridKeydownTargetType.groupRow;
                target = row;
                break;
            case 'igx-grid-summary-row':
                targetType = GridKeydownTargetType.summaryCell;
                target = visibleColIndex !== -1 ?
                    row.summaryCells.find(function (c) { return c.visibleColumnIndex === visibleColIndex; }) : row.summaryCells.first;
                break;
            case 'igx-child-grid-row':
                targetType = GridKeydownTargetType.hierarchicalRow;
                target = row;
                break;
            default:
                targetType = GridKeydownTargetType.dataCell;
                target = visibleColIndex !== -1 ? row.cells.find(function (c) { return c.visibleColumnIndex === visibleColIndex; }) : row.cells.first;
                break;
        }
        /** @type {?} */
        var args = { targetType: targetType, target: target };
        cb(args);
    };
    /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getPrevDataRowIndex = /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    function (currentRowIndex) {
        if (currentRowIndex <= 0) {
            return currentRowIndex;
        }
        /** @type {?} */
        var prevRow = this.verticalScrollContainer.igxForOf.slice(0, currentRowIndex).reverse()
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; });
        return prevRow ? this.verticalScrollContainer.igxForOf.indexOf(prevRow) : currentRowIndex;
    };
    /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getNextDataRowIndex = /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    function (currentRowIndex) {
        if (currentRowIndex === this.verticalScrollContainer.igxForOf.length) {
            return currentRowIndex;
        }
        /** @type {?} */
        var nextRow = this.verticalScrollContainer.igxForOf.slice(currentRowIndex + 1, this.verticalScrollContainer.igxForOf.length)
            .find(function (rec) { return !rec.expression && !rec.summaries && !rec.childGridsData; });
        return nextRow ? this.verticalScrollContainer.igxForOf.indexOf(nextRow) : currentRowIndex;
    };
    /**
     * @private
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isValidPosition = /**
     * @private
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    function (rowIndex, colIndex) {
        /** @type {?} */
        var rows = this.summariesRowList.filter(function (s) { return s.index !== 0; }).concat(this.rowList.toArray()).length;
        /** @type {?} */
        var cols = this.columnList.filter(function (col) { return !col.columnGroup && col.visibleIndex >= 0; }).length;
        if (rows < 1 || cols < 1) {
            return false;
        }
        if (rowIndex > -1 && rowIndex < this.verticalScrollContainer.igxForOf.length &&
            colIndex > -1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} isScroll
     * @return {?}
     */
    IgxGridBaseComponent.prototype.wheelHandler = /**
     * @hidden
     * @param {?=} isScroll
     * @return {?}
     */
    function (isScroll) {
        if (isScroll === void 0) { isScroll = false; }
        if (document.activeElement &&
            // tslint:disable-next-line:no-bitwise
            (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||
                // tslint:disable-next-line:no-bitwise
                (document.activeElement.compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {
            ((/** @type {?} */ (document.activeElement))).blur();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    IgxGridBaseComponent.prototype.trackColumnChanges = /**
     * @hidden
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    function (index, col) {
        return col.field + col._calcWidth;
    };
    /**
     * @private
     * @param {?} text
     * @param {?} increment
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @param {?=} scroll
     * @return {?}
     */
    IgxGridBaseComponent.prototype.find = /**
     * @private
     * @param {?} text
     * @param {?} increment
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @param {?=} scroll
     * @return {?}
     */
    function (text, increment, caseSensitive, exactMatch, scroll) {
        if (!this.rowList) {
            return 0;
        }
        this.endEdit(false);
        if (!text) {
            this.clearSearch();
            return 0;
        }
        /** @type {?} */
        var caseSensitiveResolved = caseSensitive ? true : false;
        /** @type {?} */
        var exactMatchResolved = exactMatch ? true : false;
        /** @type {?} */
        var rebuildCache = false;
        if (this.lastSearchInfo.searchText !== text ||
            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||
            this.lastSearchInfo.exactMatch !== exactMatchResolved) {
            this.lastSearchInfo = {
                searchText: text,
                activeMatchIndex: 0,
                caseSensitive: caseSensitiveResolved,
                exactMatch: exactMatchResolved,
                matchInfoCache: []
            };
            rebuildCache = true;
        }
        else {
            this.lastSearchInfo.activeMatchIndex += increment;
        }
        if (rebuildCache) {
            this.rowList.forEach(function (row) {
                if (row.cells) {
                    row.cells.forEach(function (c) {
                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);
                    });
                }
            });
            this.rebuildMatchCache();
        }
        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {
            this.lastSearchInfo.activeMatchIndex = 0;
        }
        else if (this.lastSearchInfo.activeMatchIndex < 0) {
            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;
        }
        if (this.lastSearchInfo.matchInfoCache.length) {
            /** @type {?} */
            var matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];
            this.lastSearchInfo = tslib_1.__assign({}, this.lastSearchInfo);
            if (scroll !== false) {
                this.scrollTo(matchInfo.row, matchInfo.column);
            }
            IgxTextHighlightDirective.setActiveHighlight(this.id, {
                column: matchInfo.column,
                row: matchInfo.row,
                index: matchInfo.index,
            });
        }
        else {
            IgxTextHighlightDirective.clearActiveHighlight(this.id);
        }
        return this.lastSearchInfo.matchInfoCache.length;
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "filteredSortedData", {
        /**
         * Returns an array containing the filtered sorted data.
         * ```typescript
         * const filteredSortedData = this.grid1.filteredSortedData;
         * ```
         * @memberof IgxGridBaseComponent
         */
        get: /**
         * Returns an array containing the filtered sorted data.
         * ```typescript
         * const filteredSortedData = this.grid1.filteredSortedData;
         * ```
         * \@memberof IgxGridBaseComponent
         * @return {?}
         */
        function () {
            return this._filteredSortedData;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteredSortedData = value;
            this.refreshSearch(true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.initPinning = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentPinnedWidth = 0;
        /** @type {?} */
        var pinnedColumns = [];
        /** @type {?} */
        var unpinnedColumns = [];
        /** @type {?} */
        var newUnpinnedCols = [];
        this.calculateGridWidth();
        this.resetCaches();
        // When a column is a group or is inside a group, pin all related.
        this._pinnedColumns.forEach(function (col) {
            if (col.parent) {
                col.parent.pinned = true;
            }
            if (col.columnGroup) {
                col.children.forEach(function (child) { return child.pinned = true; });
            }
        });
        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.
        // We take into account top level columns (top level groups and non groups).
        // If top level is unpinned the pinning handles all children to be unpinned as well.
        for (var i = 0; i < this._columns.length; i++) {
            if (this._columns[i].pinned && !this._columns[i].parent) {
                // Pinned column. Check if with it the unpinned min width is exceeded.
                /** @type {?} */
                var colWidth = parseInt(this._columns[i].width, 10);
                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {
                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.
                    this._columns[i].pinned = false;
                    unpinnedColumns.push(this._columns[i]);
                    newUnpinnedCols.push(this._columns[i]);
                }
                else {
                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.
                    currentPinnedWidth += colWidth;
                    pinnedColumns.push(this._columns[i]);
                }
            }
            else if (this._columns[i].pinned && this._columns[i].parent) {
                if (this._columns[i].topLevelParent.pinned) {
                    pinnedColumns.push(this._columns[i]);
                }
                else {
                    this._columns[i].pinned = false;
                    unpinnedColumns.push(this._columns[i]);
                }
            }
            else {
                unpinnedColumns.push(this._columns[i]);
            }
        }
        if (newUnpinnedCols.length) {
            console.warn('igxGrid - The pinned area exceeds maximum pinned width. ' +
                'The following columns were unpinned to prevent further issues:' +
                newUnpinnedCols.map(function (col) { return '"' + col.header + '"'; }).toString() + '. For more info see our documentation.');
        }
        // Assign the applicaple collections.
        this._pinnedColumns = pinnedColumns;
        this._unpinnedColumns = unpinnedColumns;
        this.cdr.markForCheck();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.scrollTo = /**
     * @hidden
     * @protected
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        var _this = this;
        /** @type {?} */
        var delayScrolling = false;
        if (this.paging && typeof (row) !== 'number') {
            /** @type {?} */
            var rowIndex = this.filteredSortedData.indexOf(row);
            /** @type {?} */
            var page = Math.floor(rowIndex / this.perPage);
            if (this.page !== page) {
                delayScrolling = true;
                this.page = page;
            }
        }
        if (delayScrolling) {
            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(function () {
                _this.scrollDirective(_this.verticalScrollContainer, typeof (row) === 'number' ? row : _this.verticalScrollContainer.igxForOf.indexOf(row));
            });
        }
        else {
            this.scrollDirective(this.verticalScrollContainer, typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));
        }
        this.scrollToHorizontally(column);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} column
     * @return {?}
     */
    IgxGridBaseComponent.prototype.scrollToHorizontally = /**
     * @hidden
     * @protected
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;
        /** @type {?} */
        var scrollRow = this.rowList.find(function (r) { return r.virtDirRow; });
        /** @type {?} */
        var virtDir = scrollRow ? scrollRow.virtDirRow : null;
        if (this.pinnedColumns.length) {
            if (columnIndex >= this.pinnedColumns.length) {
                columnIndex -= this.pinnedColumns.length;
                this.scrollDirective(virtDir, columnIndex);
            }
        }
        else {
            this.scrollDirective(virtDir, columnIndex);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @param {?} directive
     * @param {?} goal
     * @return {?}
     */
    IgxGridBaseComponent.prototype.scrollDirective = /**
     * @hidden
     * @protected
     * @param {?} directive
     * @param {?} goal
     * @return {?}
     */
    function (directive, goal) {
        if (!directive) {
            return;
        }
        // directive.onChunkLoad.pipe(first())
        //     .subscribe(() => requestAnimationFrame(() => this.cdr.detectChanges()));
        directive.scrollTo(goal);
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridBaseComponent.prototype.rebuildMatchCache = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.lastSearchInfo.matchInfoCache = [];
        /** @type {?} */
        var caseSensitive = this.lastSearchInfo.caseSensitive;
        /** @type {?} */
        var exactMatch = this.lastSearchInfo.exactMatch;
        /** @type {?} */
        var searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();
        /** @type {?} */
        var data = this.filteredSortedData;
        /** @type {?} */
        var columnItems = this.visibleColumns.filter(function (c) { return !c.columnGroup; }).sort(function (c1, c2) { return c1.visibleIndex - c2.visibleIndex; });
        /** @type {?} */
        var numberPipe = new IgxDecimalPipeComponent(this.locale);
        /** @type {?} */
        var datePipe = new IgxDatePipeComponent(this.locale);
        data.forEach(function (dataRow) {
            columnItems.forEach(function (c) {
                /** @type {?} */
                var value = c.formatter ? c.formatter(dataRow[c.field]) :
                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], _this.locale) :
                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], _this.locale)
                            : dataRow[c.field];
                if (value !== undefined && value !== null && c.searchable) {
                    /** @type {?} */
                    var searchValue = caseSensitive ? String(value) : String(value).toLowerCase();
                    if (exactMatch) {
                        if (searchValue === searchText) {
                            _this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: 0,
                            });
                        }
                    }
                    else {
                        /** @type {?} */
                        var occurenceIndex = 0;
                        /** @type {?} */
                        var searchIndex = searchValue.indexOf(searchText);
                        while (searchIndex !== -1) {
                            _this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: occurenceIndex++,
                            });
                            searchValue = searchValue.substring(searchIndex + searchText.length);
                            searchIndex = searchValue.indexOf(searchText);
                        }
                    }
                }
            });
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} _group
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isExpandedGroup = /**
     * @hidden
     * @param {?} _group
     * @return {?}
     */
    function (_group) {
        return undefined;
    };
    /**
    * @hidden
    */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getGroupByRecords = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return null;
    };
    /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype.changeRowEditingOverlayStateOnScroll = /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {
            return;
        }
        if (!row) {
            this.toggleRowEditingOverlay(false);
        }
        else {
            this.repositionRowEditingOverlay(row);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IgxGridBaseComponent.prototype.openRowOverlay = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);
        this.rowEditingOverlay.open(this.rowEditSettings);
        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;
        this._wheelListener = this.rowEditingWheelHandler.bind(this);
        this.rowEditingOverlay.element.addEventListener('wheel', this._wheelListener);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxGridBaseComponent.prototype.closeRowEditingOverlay = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.rowEditingOverlay.element.removeEventListener('wheel', this._wheelListener);
        this.rowEditPositioningStrategy.isTopInitialPosition = null;
        this.rowEditingOverlay.close();
        this.rowEditingOverlay.element.parentElement.style.display = '';
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} show
     * @return {?}
     */
    IgxGridBaseComponent.prototype.toggleRowEditingOverlay = /**
     * @hidden
     * @param {?} show
     * @return {?}
     */
    function (show) {
        /** @type {?} */
        var rowStyle = this.rowEditingOverlay.element.style;
        if (show) {
            rowStyle.display = 'block';
        }
        else {
            rowStyle.display = 'none';
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype.repositionRowEditingOverlay = /**
     * @hidden
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (!this.rowEditingOverlay.collapsed) {
            /** @type {?} */
            var rowStyle = this.rowEditingOverlay.element.parentElement.style;
            if (row) {
                rowStyle.display = '';
                this.configureRowEditingOverlay(row.rowID);
                this.rowEditingOverlay.reposition();
            }
            else {
                rowStyle.display = 'none';
            }
        }
    };
    /**
     * @private
     * @param {?} rowID
     * @param {?=} useOuter
     * @return {?}
     */
    IgxGridBaseComponent.prototype.configureRowEditingOverlay = /**
     * @private
     * @param {?} rowID
     * @param {?=} useOuter
     * @return {?}
     */
    function (rowID, useOuter) {
        if (useOuter === void 0) { useOuter = false; }
        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;
        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;
        /** @type {?} */
        var targetRow = this.gridAPI.get_row_by_key(rowID);
        if (!targetRow) {
            return;
        }
        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;
        this.toggleRowEditingOverlay(true);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "rowChangesCount", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (!this.crudService.row) {
                return 0;
            }
            /** @type {?} */
            var rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);
            return rowChanges ? Object.keys(rowChanges).length : 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @param {?} rowIndex
     * @param {?} value
     * @return {?}
     */
    IgxGridBaseComponent.prototype.writeToData = /**
     * @protected
     * @param {?} rowIndex
     * @param {?} value
     * @return {?}
     */
    function (rowIndex, value) {
        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);
    };
    /**
     * @param {?} commit
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype.endRowTransaction = /**
     * @param {?} commit
     * @param {?} row
     * @return {?}
     */
    function (commit, row) {
        row.newData = this.transactions.getAggregatedValue(row.id, true);
        /** @type {?} */
        var args = row.createEditEventArgs();
        if (!commit) {
            this.onRowEditCancel.emit(args);
            this.transactions.endPending(false);
        }
        else {
            args = this.gridAPI.update_row(row, row.newData);
        }
        if (args.cancel) {
            this.transactions.startPending();
            return;
        }
        this.crudService.endRowEdit();
        this.closeRowEditingOverlay();
    };
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param commit
     */
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param {?=} commit
     * @param {?=} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.endEdit = 
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param {?=} commit
     * @param {?=} event
     * @return {?}
     */
    function (commit, event) {
        if (commit === void 0) { commit = true; }
        /** @type {?} */
        var row = this.crudService.row;
        /** @type {?} */
        var cell = this.crudService.cell;
        /** @type {?} */
        var columnindex = cell ? cell.column.index : -1;
        /** @type {?} */
        var ri = row ? row.index : -1;
        // TODO: Merge the crudService with wht BaseAPI service
        if (!row && !cell) {
            return;
        }
        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();
        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {
            return;
        }
        this.endRowTransaction(commit, row);
        /** @type {?} */
        var currentCell = this.gridAPI.get_cell_by_index(ri, columnindex);
        if (currentCell && event) {
            currentCell.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxGridBaseComponent.prototype.rowEditingWheelHandler = /**
     * @hidden
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.deltaY > 0) {
            this.verticalScrollContainer.scrollNext();
        }
        else {
            this.verticalScrollContainer.scrollPrev();
        }
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "dataWithAddedInTransactionRows", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var result = (/** @type {?} */ (cloneArray(this.gridAPI.get_all_data())));
            if (this.transactions.enabled) {
                result.push.apply(result, tslib_1.__spread(this.transactions.getAggregatedChanges(true)
                    .filter(function (t) { return t.type === TransactionType.ADD; })
                    .map(function (t) { return t.newValue; })));
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridBaseComponent.prototype, "dataLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridBaseComponent.prototype.hasHorizontalScroll = /**
     * @return {?}
     */
    function () {
        return this.totalWidth - this.unpinnedWidth > 0;
    };
    /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    IgxGridBaseComponent.prototype._restoreVirtState = /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    function (row) {
        // check virtualization state of data record added from cache
        // in case state is no longer valid - update it.
        /** @type {?} */
        var rowForOf = row.virtDirRow;
        /** @type {?} */
        var gridScrLeft = rowForOf.getHorizontalScroll().scrollLeft;
        /** @type {?} */
        var left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);
        /** @type {?} */
        var actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);
        if (gridScrLeft !== actualScrollLeft) {
            rowForOf.onHScroll(gridScrLeft);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getExportExcel = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return this._exportExcel;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxGridBaseComponent.prototype.getExportCsv = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        return this._exportCsv;
    };
    /**
    * @hidden
    */
    /**
     * @hidden
     * @param {?} rowData
     * @return {?}
     */
    IgxGridBaseComponent.prototype.isSummaryRow = /**
     * @hidden
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        return rowData.summaries && (rowData.summaries instanceof Map);
    };
    Object.defineProperty(IgxGridBaseComponent.prototype, "isAttachedToDom", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this.document.body.contains(this.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    IgxGridBaseComponent.prototype.cachedViewLoaded = /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {
            args.view.detectChanges();
            /** @type {?} */
            var row = this.getRowByIndex(args.context.index);
            if (row && row.cells) {
                row.cells.forEach(function (c) {
                    c.highlightText(_this.lastSearchInfo.searchText, _this.lastSearchInfo.caseSensitive, _this.lastSearchInfo.exactMatch);
                });
            }
        }
        if (this.hasHorizontalScroll()) {
            /** @type {?} */
            var tmplId = args.context.templateID;
            /** @type {?} */
            var index_1 = args.context.index;
            args.view.detectChanges();
            /** @type {?} */
            var row = tmplId === 'dataRow' ? this.getRowByIndex(index_1) : null;
            /** @type {?} */
            var summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.toArray().find(function (sr) { return sr.dataRowIndex === index_1; }) : null;
            if (row && row instanceof IgxRowComponent) {
                this._restoreVirtState(row);
            }
            else if (summaryRow) {
                this._restoreVirtState(summaryRow);
            }
        }
    };
    /** @nocollapse */
    IgxGridBaseComponent.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: GridBaseAPIService },
        { type: IgxSelectionAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
        { type: ElementRef },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: IgxGridNavigationService },
        { type: IgxFilteringService },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxGridSummaryService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxGridBaseComponent.propDecorators = {
        resourceStrings: [{ type: Input }],
        autoGenerate: [{ type: Input }],
        emptyGridTemplate: [{ type: Input }],
        loadingGridTemplate: [{ type: Input }],
        filteringLogic: [{ type: Input }],
        filteringExpressionsTree: [{ type: Input }],
        locale: [{ type: Input }],
        paging: [{ type: Input }],
        page: [{ type: Input }],
        perPage: [{ type: Input }],
        paginationTemplate: [{ type: Input }],
        columnHiding: [{ type: Input }],
        rowSelectable: [{ type: Input }],
        rowDraggable: [{ type: Input }],
        rowEditable: [{ type: Input }],
        height: [{ type: HostBinding, args: ['style.height',] }, { type: Input }],
        width: [{ type: HostBinding, args: ['style.width',] }, { type: Input }],
        evenRowCSS: [{ type: Input }],
        oddRowCSS: [{ type: Input }],
        rowHeight: [{ type: Input }],
        columnWidth: [{ type: Input }],
        primaryKey: [{ type: Input }],
        emptyGridMessage: [{ type: Input }],
        isLoading: [{ type: Input }],
        emptyFilteredGridMessage: [{ type: Input }],
        columnHidingTitle: [{ type: Input }],
        columnPinning: [{ type: Input }],
        columnPinningTitle: [{ type: Input }],
        allowFiltering: [{ type: Input }],
        filterMode: [{ type: Input }],
        summaryPosition: [{ type: Input }],
        summaryCalculationMode: [{ type: Input }],
        onCellClick: [{ type: Output }],
        onSelection: [{ type: Output }],
        onRowSelectionChange: [{ type: Output }],
        onColumnPinning: [{ type: Output }],
        onCellEditCancel: [{ type: Output }],
        onCellEditEnter: [{ type: Output }],
        onCellEdit: [{ type: Output }],
        onRowEditEnter: [{ type: Output }],
        onRowEdit: [{ type: Output }],
        onRowEditCancel: [{ type: Output }],
        onColumnInit: [{ type: Output }],
        onSortingDone: [{ type: Output }],
        onFilteringDone: [{ type: Output }],
        onPagingDone: [{ type: Output }],
        onRowAdded: [{ type: Output }],
        onRowDeleted: [{ type: Output }],
        onDataPreLoad: [{ type: Output }],
        onColumnResized: [{ type: Output }],
        onContextMenu: [{ type: Output }],
        onDoubleClick: [{ type: Output }],
        onColumnVisibilityChanged: [{ type: Output }],
        onColumnMovingStart: [{ type: Output }],
        onColumnMoving: [{ type: Output }],
        onColumnMovingEnd: [{ type: Output }],
        onFocusChange: [{ type: Output }],
        onGridKeydown: [{ type: Output }],
        onRowDragStart: [{ type: Output }],
        onRowDragEnd: [{ type: Output }],
        resizeLine: [{ type: ViewChild, args: [IgxGridColumnResizerComponent,] }],
        columnList: [{ type: ContentChildren, args: [IgxColumnComponent, { read: IgxColumnComponent, descendants: true },] }],
        excelStyleSortingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective },] }],
        excelStyleMovingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective },] }],
        excelStyleHidingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective },] }],
        excelStylePinningTemplateDirective: [{ type: ContentChild, args: [IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective },] }],
        headerGroups: [{ type: ViewChildren, args: [IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent },] }],
        _rowList: [{ type: ViewChildren, args: ['row',] }],
        _summaryRowList: [{ type: ViewChildren, args: ['summaryRow', { read: IgxSummaryRowComponent },] }],
        _dataRowList: [{ type: ViewChildren, args: [IgxRowComponent, { read: IgxRowComponent },] }],
        emptyFilteredGridTemplate: [{ type: ViewChild, args: ['emptyFilteredGrid', { read: TemplateRef },] }],
        emptyGridDefaultTemplate: [{ type: ViewChild, args: ['defaultEmptyGrid', { read: TemplateRef },] }],
        loadingGridDefaultTemplate: [{ type: ViewChild, args: ['defaultLoadingGrid', { read: TemplateRef },] }],
        parentVirtDir: [{ type: ViewChild, args: ['scrollContainer', { read: IgxGridForOfDirective },] }],
        toolbarCustomContentTemplates: [{ type: ContentChildren, args: [IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false },] }],
        verticalScrollContainer: [{ type: ViewChild, args: ['verticalScrollContainer', { read: IgxGridForOfDirective },] }],
        verticalScroll: [{ type: ViewChild, args: ['verticalScrollHolder', { read: IgxGridForOfDirective },] }],
        scr: [{ type: ViewChild, args: ['scr', { read: ElementRef },] }],
        paginator: [{ type: ViewChild, args: ['paginator', { read: ElementRef },] }],
        headerContainer: [{ type: ViewChild, args: ['headerContainer', { read: IgxGridForOfDirective },] }],
        headerCheckboxContainer: [{ type: ViewChild, args: ['headerCheckboxContainer',] }],
        headerDragContainer: [{ type: ViewChild, args: ['headerDragContainer',] }],
        headerGroupContainer: [{ type: ViewChild, args: ['headerGroupContainer',] }],
        headerCheckbox: [{ type: ViewChild, args: ['headerCheckbox', { read: IgxCheckboxComponent },] }],
        filteringRow: [{ type: ViewChild, args: ['filteringRow', { read: IgxGridFilteringRowComponent },] }],
        theadRow: [{ type: ViewChild, args: ['theadRow',] }],
        tbody: [{ type: ViewChild, args: ['tbody',] }],
        tfoot: [{ type: ViewChild, args: ['tfoot',] }],
        _outletDirective: [{ type: ViewChild, args: ['igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective },] }],
        rowEditingOutletDirective: [{ type: ViewChild, args: ['igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective },] }],
        tmpOutlets: [{ type: ViewChildren, args: [IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective },] }],
        dragIndicatorIconBase: [{ type: ViewChild, args: ['dragIndicatorIconBase', { read: TemplateRef },] }],
        defaultRowEditTemplate: [{ type: ViewChild, args: ['defaultRowEditTemplate', { read: TemplateRef },] }],
        rowEditCustom: [{ type: ContentChild, args: [IgxRowEditTemplateDirective, { read: TemplateRef },] }],
        rowEditText: [{ type: ContentChild, args: [IgxRowEditTextDirective, { read: TemplateRef },] }],
        rowEditActions: [{ type: ContentChild, args: [IgxRowEditActionsDirective, { read: TemplateRef },] }],
        rowEditTabsDEFAULT: [{ type: ViewChildren, args: [IgxRowEditTabStopDirective,] }],
        rowEditTabsCUSTOM: [{ type: ContentChildren, args: [IgxRowEditTabStopDirective,] }],
        rowEditingOverlay: [{ type: ViewChild, args: [IgxToggleDirective,] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        hostClass: [{ type: HostBinding, args: ['attr.class',] }],
        hostRole: [{ type: HostBinding, args: ['attr.role',] }],
        sortingExpressions: [{ type: Input }],
        hiddenColumnsText: [{ type: Input }],
        pinnedColumnsText: [{ type: Input }],
        toolbar: [{ type: ViewChild, args: ['toolbar', { read: IgxGridToolbarComponent },] }],
        toolbarHtml: [{ type: ViewChild, args: ['toolbar', { read: ElementRef },] }],
        showToolbar: [{ type: Input }],
        toolbarTitle: [{ type: Input }],
        exportExcel: [{ type: Input }],
        exportCsv: [{ type: Input }],
        exportText: [{ type: Input }],
        exportExcelText: [{ type: Input }],
        exportCsvText: [{ type: Input }],
        onToolbarExporting: [{ type: Output }],
        onRangeSelection: [{ type: Output }]
    };
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], IgxGridBaseComponent.prototype, "filteringLogic", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "filteringExpressionsTree", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "rowSelectable", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "rowEditable", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "height", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "width", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "rowHeight", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "columnWidth", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object)
    ], IgxGridBaseComponent.prototype, "primaryKey", void 0);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "columnPinning", null);
    tslib_1.__decorate([
        DeprecateProperty('onFocusChange event is deprecated. Use onGridKeydown event instead.'),
        tslib_1.__metadata("design:type", EventEmitter),
        tslib_1.__metadata("design:paramtypes", [EventEmitter])
    ], IgxGridBaseComponent.prototype, "onFocusChange", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], IgxGridBaseComponent.prototype, "sortingExpressions", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "hiddenColumnsText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], IgxGridBaseComponent.prototype, "pinnedColumnsText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "showToolbar", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "toolbarTitle", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "exportExcel", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], IgxGridBaseComponent.prototype, "exportCsv", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "exportText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "exportExcelText", null);
    tslib_1.__decorate([
        WatchChanges(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], IgxGridBaseComponent.prototype, "exportCsvText", null);
    return IgxGridBaseComponent;
}(DisplayDensityBase));
export { IgxGridBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._scrollWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._resourceStrings;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._emptyGridMessage;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._emptyFilteredGridMessage;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._isLoading;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._observer;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.overlayIDs;
    /**
     * An \@Input property that autogenerates the `IgxGridComponent` columns.
     * The default value is false.
     * ```html
     * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.autoGenerate;
    /** @type {?} */
    IgxGridBaseComponent.prototype.id;
    /**
     * An \@Input property that sets a custom template when the `IgxGridComponent` is empty.
     * ```html
     * <igx-grid [id]="'igx-grid-1'" [data]="Data" [emptyGridTemplate]="myTemplate" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyGridTemplate;
    /**
     * An \@Input property that sets a custom template when the `IgxGridComponent` is loading.
     * ```html
     * <igx-grid [id]="'igx-grid-1'" [data]="Data" [loadingGridTemplate]="myTemplate" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.loadingGridTemplate;
    /**
     * You can provide a custom `ng-template` for the pagination UI of the grid.
     * ```html
     * <igx-grid #grid [paging]="true" [myTemplate]="myTemplate" [height]="'305px'"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.paginationTemplate;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowDragging;
    /**
     * An \@Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.
     * ```html
     * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-even-class'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.evenRowCSS;
    /**
     * An \@Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.
     * ```html
     * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-odd-class'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.oddRowCSS;
    /**
     * An \@Input property that sets the primary key of the `IgxGridComponent`.
     * ```html
     * <igx-grid #grid [data]="localData" [showToolbar]="true" [primaryKey]="'ProductID'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.primaryKey;
    /**
     * A property that allows the columns to be auto-generated once again after the initialization of the grid.
     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.
     * Note that after generating the columns, this property would be disabled to avoid re-creating
     * columns each time a new data is assigned.
     * ```typescript
     *  this.grid.shouldGenerate = true;
     *  this.remoteData = this.remoteService.remoteData;
     * ```
     * @type {?}
     */
    IgxGridBaseComponent.prototype.shouldGenerate;
    /**
     * An \@Input property that sets the title to be displayed in the built-in column hiding UI.
     * ```html
     * <igx-grid [showToolbar]="true" [columnHiding]="true" columnHidingTitle="Column Hiding"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnHidingTitle;
    /**
     * An \@Input property that sets the title to be displayed in the UI of the column pinning.
     * ```html
     * <igx-grid #grid [data]="localData" [columnPinning]="'true" [columnPinningTitle]="'Column Hiding'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnPinningTitle;
    /**
     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.
     * ```html
     * <igx-grid #grid (onCellClick)="onCellClick($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellClick(e){
     *     alert("The cell has been clicked!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellClick;
    /**
     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.
     * ```html
     * <igx-grid #grid (onSelection)="onCellSelect($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellSelect(e){
     *     alert("The cell has been selected!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onSelection;
    /**
     *  Emitted when `IgxGridRowComponent` is selected.
     * ```html
     * <igx-grid #grid (onRowSelectionChange)="onRowClickChange($event)" [data]="localData" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellClickChange(e){
     *     alert("The selected row has been changed!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowSelectionChange;
    /**
     * Emitted when `IgxColumnComponent` is pinned.
     * The index that the column is inserted at may be changed through the `insertAtIndex` property.
     * ```typescript
     * public columnPinning(event) {
     *     if (event.column.field === "Name") {
     *       event.insertAtIndex = 0;
     *     }
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnPinning;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent`
     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      newValue: object,
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editCancel(event: IGridEditEventArgs){
     *    const rowID: IgxColumnComponent = event.rowID;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEditCancel;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent` enters edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editStart(event: IGridEditEventArgs){
     *    const value: IgxColumnComponent = event.newValue;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEditEnter;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.
     * Event is fired after editing is completed, when the cell is exiting edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      newValue: object,
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editDone(event: IGridEditEventArgs){
     *    const value: IgxColumnComponent = event.newValue;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEdit;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" a row enters edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * ```typescript
     *      editStart(event: IGridEditEventArgs) {
     *          const editedRowObj = event.oldValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEditEnter;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(true)` is called.
     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,
     * performing paging operation, column resizing, pinning, moving or hitting  `Done`
     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      newValue: <rowObj>,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     *
     * ```typescript
     *      editDone(event: IGridEditEventArgs) {
     *          const originalRowObj = event.oldValue;
     *          const updatedRowObj = event.newValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEdit;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(false)` is called.
     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button
     * in the row editing overlay.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      newValue: <rowObj>,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowSelectable]="true" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * ```typescript
     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {
     *          const originalRowObj = event.oldValue;
     *          const updatedRowObj = event.newValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEditCancel;
    /**
     * Emitted when a grid column is initialized. Returns the column object.
     * ```html
     * <igx-grid #grid [data]="localData" [onColumnInit]="initColumns($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * initColumns(event: IgxColumnComponent) {
     * const column: IgxColumnComponent = event;
     *       column.filterable = true;
     *       column.sortable = true;
     *       column.editable = true;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnInit;
    /**
     * Emitted when sorting is performed through the UI. Returns the sorting expression.
     * ```html
     * <igx-grid #grid [data]="localData" [autoGenerate]="true" (onSortingDone)="sortingDone($event)"></igx-grid>
     * ```
     * ```typescript
     * sortingDone(event: SortingDirection){
     *     const sortingDirection = event;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onSortingDone;
    /**
     * Emitted when filtering is performed through the UI.
     * Returns the filtering expressions tree of the column for which filtering was performed.
     * ```typescript
     * filteringDone(event: IFilteringExpressionsTree){
     *     const filteringTree = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onFilteringDone)="filteringDone($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onFilteringDone;
    /**
     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.
     * ```typescript
     * pagingDone(event: IPageEventArgs){
     *     const paging = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onPagingDone)="pagingDone($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onPagingDone;
    /**
     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.
     * Returns the data for the new `IgxGridRowComponent` object.
     * ```typescript
     * rowAdded(event: IRowDataEventArgs){
     *    const rowInfo = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onRowAdded)="rowAdded($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowAdded;
    /**
     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.
     * Returns an `IRowDataEventArgs` object.
     * ```typescript
     * rowDeleted(event: IRowDataEventArgs){
     *    const rowInfo = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onRowDeleted)="rowDeleted($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDeleted;
    /**
     * Emitted when a new chunk of data is loaded from virtualization.
     * ```typescript
     *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onDataPreLoad;
    /**
     * Emitted when `IgxColumnComponent` is resized.
     * Returns the `IgxColumnComponent` object's old and new width.
     * ```typescript
     * resizing(event: IColumnResizeEventArgs){
     *     const grouping = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onColumnResized)="resizing($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnResized;
    /**
     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.
     * ```typescript
     * contextMenu(event: IGridCellEventArgs){
     *     const resizing = event;
     *     console.log(resizing);
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onContextMenu)="contextMenu($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onContextMenu;
    /**
     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.
     * ```typescript
     * dblClick(event: IGridCellEventArgs){
     *     const dblClick = event;
     *     console.log(dblClick);
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onDoubleClick)="dblClick($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onDoubleClick;
    /**
     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }
     * ```typescript
     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){
     *    const visiblity = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnVisibilityChanged)="visibilityChanged($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnVisibilityChanged;
    /**
     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.
     * ```typescript
     * movingStart(event: IColumnMovingStartEventArgs){
     *     const movingStarts = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingStart)="movingStart($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMovingStart;
    /**
     * Emitted throughout the `IgxColumnComponent` moving operation.
     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.
     * ```typescript
     * moving(event: IColumnMovingEventArgs){
     *     const moving = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMoving)="moving($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMoving;
    /**
     * Emitted when `IgxColumnComponent` moving ends.
     * Returns the source and target `IgxColumnComponent` objects.
     * ```typescript
     * movingEnds(event: IColumnMovingEndEventArgs){
     *     const movingEnds = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingEnd)="movingEnds($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMovingEnd;
    /**
     * Emitted when keydown is triggered over element inside grid's body.
     * This event is fired only if the key combination is supported in the grid.
     * Return the target type, target object and the original event. This event is cancelable.
     * ```typescript
     * customKeydown(args: IGridKeydownEventArgs) {
     *  const keydownEvent = args.event;
     * }
     * ```
     * ```html
     *  <igx-grid (onGridKeydown)="customKeydown($event)"></igx-grid>
     * ```
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onGridKeydown;
    /**
     * Emitted when start dragging a row.
     * Return the dragged row.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDragStart;
    /**
     * Emitted when dropping a row.
     * Return the dropped row.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDragEnd;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.resizeLine;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnList;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleSortingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleMovingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleHidingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStylePinningTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerGroups;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowList;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._summaryRowList;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._dataRowList;
    /**
     * A template reference for the template when the filtered `IgxGridComponent` is empty.
     * ```
     * const emptyTempalte = this.grid.emptyGridTemplate;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyFilteredGridTemplate;
    /**
     * A template reference for the template when the `IgxGridComponent` is empty.
     * ```
     * const emptyTempalte = this.grid.emptyGridTemplate;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyGridDefaultTemplate;
    /** @type {?} */
    IgxGridBaseComponent.prototype.loadingGridDefaultTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.parentVirtDir;
    /** @type {?} */
    IgxGridBaseComponent.prototype.toolbarCustomContentTemplates;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.verticalScrollContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.verticalScroll;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.scr;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.paginator;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerCheckboxContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerDragContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerGroupContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerCheckbox;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.filteringRow;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.theadRow;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tbody;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tfoot;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._outletDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditingOutletDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tmpOutlets;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.dragIndicatorIconBase;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.defaultRowEditTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditCustom;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditText;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditActions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditTabsDEFAULT;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditTabsCUSTOM;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditingOverlay;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tabindex;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.hostRole;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnsWithNoSetWidths;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._showToolbar;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportExcel;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportCsv;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._toolbarTitle;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportExcelText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportCsvText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowEditable;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._currentRowState;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._filteredSortedData;
    /**
     * Provides access to the `IgxToolbarComponent`.
     * ```typescript
     * const gridToolbar = this.grid.toolbar;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.toolbar;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.toolbarHtml;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditMessage;
    /**
     * Emitted when an export process is initiated by the user.
     * ```typescript
     * toolbarExporting(event: IGridToolbarExportEventArgs){
     *     const toolbarExporting = event;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onToolbarExporting;
    /** @type {?} */
    IgxGridBaseComponent.prototype.onRangeSelection;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.pagingState;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.calcWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.calcHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tfootHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.chipsGoupingExpressions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.summariesHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.draggedColumn;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.allRowsSelected;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.disableTransitions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.lastSearchInfo;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnWidthSetByUser;
    /** @type {?} */
    IgxGridBaseComponent.prototype.data;
    /** @type {?} */
    IgxGridBaseComponent.prototype.filteredData;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.destroy$;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._perPage;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._page;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._paging;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._rowSelection;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._rowDrag;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._pipeTrigger;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._summaryPipeTrigger;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._pinnedColumns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._unpinnedColumns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._filteringExpressionsTree;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._sortingExpressions;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._maxLevelHeaderDepth;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columnHiding;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columnPinning;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._keydownListener;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._vScrollListener;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._hScrollListener;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._wheelListener;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._allowFiltering;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.resizeHandler;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.columnListDiffer;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._hiddenColumnsText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedColumnsText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._width;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._autoSize;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowHeight;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._ngAfterViewInitPassed;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._horizontalForOfs;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._multiRowLayoutRowSize;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._totalWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedVisible;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._unpinnedVisible;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._unpinnedWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._visibleColumns;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._columnGroups;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._columnWidth;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._defaultTargetRecordNumber;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._onFocusChange;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._summaryPosition;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._summaryCalculationMode;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.rowEditPositioningStrategy;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.rowEditSettings;
    /** @type {?} */
    IgxGridBaseComponent.prototype.selectionService;
    /** @type {?} */
    IgxGridBaseComponent.prototype.crudService;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridBaseComponent.prototype.selection;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._transactions;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.zone;
    /** @type {?} */
    IgxGridBaseComponent.prototype.document;
    /** @type {?} */
    IgxGridBaseComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.resolver;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.differs;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.viewRef;
    /** @type {?} */
    IgxGridBaseComponent.prototype.navigation;
    /** @type {?} */
    IgxGridBaseComponent.prototype.filteringService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.overlayService;
    /** @type {?} */
    IgxGridBaseComponent.prototype.summaryService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,