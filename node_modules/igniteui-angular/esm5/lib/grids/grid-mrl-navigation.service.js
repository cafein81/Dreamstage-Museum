/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { first } from 'rxjs/operators';
import { IgxGridNavigationService } from './grid-navigation.service';
/**
 * @record
 */
export function IStartNavigationCell() { }
if (false) {
    /** @type {?} */
    IStartNavigationCell.prototype.rowStart;
    /** @type {?} */
    IStartNavigationCell.prototype.colStart;
    /** @type {?} */
    IStartNavigationCell.prototype.direction;
}
/** @enum {string} */
var NavigationDirection = {
    horizontal: 'horizontal',
    vertical: 'vertical',
};
export { NavigationDirection };
/**
 * @hidden
 */
var IgxGridMRLNavigationService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGridMRLNavigationService, _super);
    function IgxGridMRLNavigationService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @param {?} colStart
     * @param {?} rowStart
     * @param {?} dir
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.setStartNavigationCell = /**
     * @hidden
     * \@internal
     * @param {?} colStart
     * @param {?} rowStart
     * @param {?} dir
     * @return {?}
     */
    function (colStart, rowStart, dir) {
        this.startNavigationCell = {
            colStart: colStart,
            rowStart: rowStart,
            direction: dir
        };
    };
    /**
     * @private
     * @param {?} colStart
     * @param {?} rowStart
     * @param {?} navDirection
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.applyNavigationCell = /**
     * @private
     * @param {?} colStart
     * @param {?} rowStart
     * @param {?} navDirection
     * @return {?}
     */
    function (colStart, rowStart, navDirection) {
        /** @type {?} */
        var oppositeDir = navDirection === NavigationDirection.vertical ?
            NavigationDirection.horizontal : NavigationDirection.vertical;
        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {
            this.startNavigationCell.direction = oppositeDir;
        }
        else {
            this.setStartNavigationCell(colStart, rowStart, oppositeDir);
        }
        return navDirection === NavigationDirection.vertical ?
            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;
    };
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.navigateUp = /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        this.focusCellUpFromLayout(rowElement, selectedNode);
    };
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.navigateDown = /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        this.focusCellDownFromLayout(rowElement, selectedNode);
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.isColumnFullyVisible = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var column = this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (col) { return col.visibleIndex === visibleColumnIndex; });
        /** @type {?} */
        var forOfDir = this.grid.headerContainer;
        /** @type {?} */
        var horizontalScroll = forOfDir.getHorizontalScroll();
        if (!horizontalScroll.clientWidth || (column && column.pinned)) {
            return true;
        }
        else if (column) {
            if (this.isParentColumnFullyVisible(column)) {
                return true;
            }
            /** @type {?} */
            var scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&
                this.displayContainerScrollLeft <= scrollPos.leftScroll;
        }
        return false;
    };
    /**
     * @private
     * @param {?} parent
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.isParentColumnFullyVisible = /**
     * @private
     * @param {?} parent
     * @return {?}
     */
    function (parent) {
        /** @type {?} */
        var forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;
        /** @type {?} */
        var horizontalScroll = forOfDir.getHorizontalScroll();
        if (!horizontalScroll.clientWidth || parent.pinned) {
            return true;
        }
        /** @type {?} */
        var index = forOfDir.igxForOf.indexOf(parent);
        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&
            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.isColumnLeftFullyVisible = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var forOfDir = this.grid.headerContainer;
        /** @type {?} */
        var horizontalScroll = forOfDir.getHorizontalScroll();
        /** @type {?} */
        var column = this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (col) { return col.visibleIndex === visibleColumnIndex; });
        if (!horizontalScroll.clientWidth || column.pinned) {
            return true;
        }
        if (this.isParentColumnFullyVisible(column)) {
            return true;
        }
        /** @type {?} */
        var scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
        return this.displayContainerScrollLeft <= scrollPos.leftScroll;
    };
    /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.onKeydownArrowRight = /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    function (element, selectedNode) {
        this.focusNextCellFromLayout(element, selectedNode);
    };
    /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.onKeydownArrowLeft = /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    function (element, selectedNode) {
        this.focusPrevCellFromLayout(element, selectedNode);
    };
    Object.defineProperty(IgxGridMRLNavigationService.prototype, "gridOrderedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__spread(this.grid.pinnedColumns, this.grid.unpinnedColumns).filter(function (c) { return !c.columnGroup; })
                .sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.performTab = /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    function (currentRowEl, selectedNode) {
        /** @type {?} */
        var visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;
        /** @type {?} */
        var nextElementColumn = this.grid.columns.find(function (x) { return !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1; });
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var row = this.grid.getRowByIndex(rowIndex);
        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');
        if (nextElementColumn) {
            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);
        }
    };
    /**
     * @protected
     * @param {?} currentRowEl
     * @param {?} nextElementColumn
     * @param {?} row
     * @param {?} selectedNode
     * @param {?} dir
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype._moveFocusToCell = /**
     * @protected
     * @param {?} currentRowEl
     * @param {?} nextElementColumn
     * @param {?} row
     * @param {?} selectedNode
     * @param {?} dir
     * @return {?}
     */
    function (currentRowEl, nextElementColumn, row, selectedNode, dir) {
        var _this = this;
        if (nextElementColumn && row.cells) {
            /** @type {?} */
            var nextCell_1 = row.cells.find(function (currCell) { return currCell.column === nextElementColumn; });
            /** @type {?} */
            var isVisible = this.isColumnFullyVisible(nextElementColumn.visibleIndex);
            if (!nextCell_1 || !isVisible) {
                this.grid.nativeElement.focus({ preventScroll: true });
                /** @type {?} */
                var cb = function () {
                    nextCell_1 = row.cells.find(function (currCell) { return currCell.column === nextElementColumn; });
                    if (_this.grid.rowEditable && _this.isRowInEditMode(row.index)) {
                        if (dir === 'next') {
                            _this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);
                        }
                        else {
                            _this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);
                        }
                        return;
                    }
                    _this._focusCell(nextCell_1.nativeElement);
                };
                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);
            }
            else {
                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {
                    if (dir === 'next') {
                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);
                    }
                    else {
                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);
                    }
                    return;
                }
                this._focusCell(nextCell_1.nativeElement);
            }
        }
        else {
            // end of layout reached
            if (this.isRowInEditMode(row.index)) {
                if (dir === 'next') {
                    this.grid.rowEditTabs.first.element.nativeElement.focus();
                }
                else {
                    this.grid.rowEditTabs.last.element.nativeElement.focus();
                }
                return;
            }
            if (dir === 'next') {
                _super.prototype.navigateDown.call(this, currentRowEl, { row: row.index, column: 0 });
            }
            else {
                /** @type {?} */
                var lastVisibleIndex_1 = 0;
                this.grid.unpinnedColumns.forEach(function (col) {
                    lastVisibleIndex_1 = Math.max(lastVisibleIndex_1, col.visibleIndex);
                });
                _super.prototype.navigateUp.call(this, currentRowEl, { row: row.index, column: lastVisibleIndex_1 });
            }
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.performShiftTabKey = /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    function (currentRowEl, selectedNode) {
        /** @type {?} */
        var visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var row = this.grid.getRowByIndex(rowIndex);
        /** @type {?} */
        var prevElementColumn = this.grid.columns.find(function (x) { return !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden; });
        this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');
        if (prevElementColumn) {
            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);
        }
    };
    /**
     * @private
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.focusCellUpFromLayout = /**
     * @private
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        var _this = this;
        /** @type {?} */
        var isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';
        /** @type {?} */
        var currentRowStart = selectedNode.layout ? selectedNode.layout.rowStart : 1;
        /** @type {?} */
        var currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1, currentRowStart, NavigationDirection.vertical);
        /** @type {?} */
        var parentIndex = selectedNode.column;
        /** @type {?} */
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        /** @type {?} */
        var movePrev;
        // check if element up is from the same layout
        /** @type {?} */
        var upperElementColumn = columnLayout.children.find(function (c) {
            return (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart) &&
                c.colStart <= currentColStart &&
                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan);
        });
        if (isGroupRow || !upperElementColumn) {
            // no prev row in current row layout, go to next row last rowstart
            /** @type {?} */
            var layoutRowEnd_1 = this.grid.multiRowLayoutRowSize + 1;
            upperElementColumn = columnLayout.children.find(function (c) {
                return (c.rowEnd === layoutRowEnd_1 || c.rowStart + c.gridRowSpan === layoutRowEnd_1) &&
                    c.colStart <= currentColStart &&
                    (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan);
            });
            movePrev = true;
        }
        /** @type {?} */
        var rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;
        if (rowIndex < 0) {
            // end of rows reached.
            return;
        }
        /** @type {?} */
        var prevRow;
        /** @type {?} */
        var cb = function () {
            prevRow = _this.grid.getRowByIndex(rowIndex);
            if (prevRow && prevRow.cells) {
                _this._focusCell(upperElementColumn.cells.find(function (c) { return c.rowIndex === prevRow.index; }).nativeElement);
            }
            else if (prevRow) {
                prevRow.nativeElement.focus({ preventScroll: true });
            }
        };
        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);
        }
        else {
            cb();
        }
    };
    /**
     * @private
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.focusCellDownFromLayout = /**
     * @private
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        var _this = this;
        /** @type {?} */
        var isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';
        /** @type {?} */
        var parentIndex = selectedNode.column;
        /** @type {?} */
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        /** @type {?} */
        var currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;
        /** @type {?} */
        var currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1, selectedNode.layout ? selectedNode.layout.rowStart : 1, NavigationDirection.vertical);
        /** @type {?} */
        var moveNext;
        // check if element down is from the same layout
        /** @type {?} */
        var nextElementColumn = columnLayout.children.find(function (c) { return c.rowStart === currentRowEnd &&
            c.colStart <= currentColStart &&
            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan); });
        if (isGroupRow || !nextElementColumn) {
            // no next row in current row layout, go to next row first rowstart
            nextElementColumn = columnLayout.children.find(function (c) { return c.rowStart === 1 &&
                c.colStart <= currentColStart &&
                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan); });
            moveNext = true;
        }
        /** @type {?} */
        var rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;
        if (rowIndex > this.grid.verticalScrollContainer.igxForOf.length - 1) {
            // end of rows reached.
            return;
        }
        /** @type {?} */
        var nextRow;
        /** @type {?} */
        var cb = function () {
            nextRow = _this.grid.getRowByIndex(rowIndex);
            if (nextRow && nextRow.cells) {
                _this._focusCell(nextElementColumn.cells.find(function (c) { return c.rowIndex === nextRow.index; }).nativeElement);
            }
            else if (nextRow) {
                nextRow.nativeElement.focus({ preventScroll: true });
            }
        };
        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);
        }
        else {
            cb();
        }
    };
    /**
     * @private
     * @param {?} cellElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.focusNextCellFromLayout = /**
     * @private
     * @param {?} cellElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (cellElement, selectedNode) {
        var _this = this;
        /** @type {?} */
        var parentIndex = selectedNode.column;
        /** @type {?} */
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        /** @type {?} */
        var currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;
        /** @type {?} */
        var currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart, selectedNode.layout.rowStart, NavigationDirection.horizontal);
        /** @type {?} */
        var rowIndex = selectedNode.row;
        // check if next element is from the same layout
        /** @type {?} */
        var nextElementColumn = columnLayout.children.find(function (c) { return c.colStart === currentColEnd &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        if (!nextElementColumn) {
            // no next column in current layout, search for next layout
            columnLayout = this.grid.columns.find(function (c) { return c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1; });
            if (!columnLayout) {
                // reached the end
                return null;
            }
            // next element is from the next layout
            nextElementColumn = columnLayout.children.find(function (c) { return c.colStart === 1 &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        }
        /** @type {?} */
        var cb = function () {
            /** @type {?} */
            var nextElement = nextElementColumn.cells.find(function (c) { return c.rowIndex === rowIndex; }).nativeElement;
            _this._focusCell(nextElement);
        };
        if (!this.isColumnFullyVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
        }
        else {
            cb();
        }
    };
    /**
     * @private
     * @param {?} cellElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.focusPrevCellFromLayout = /**
     * @private
     * @param {?} cellElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (cellElement, selectedNode) {
        var _this = this;
        /** @type {?} */
        var parentIndex = selectedNode.column;
        /** @type {?} */
        var columnLayout = this.grid.columns.find(function (x) { return x.columnLayout && x.visibleIndex === parentIndex; });
        /** @type {?} */
        var currentColStart = selectedNode.layout.colStart;
        /** @type {?} */
        var currentRowStart = this.applyNavigationCell(currentColStart, selectedNode.layout.rowStart, NavigationDirection.horizontal);
        /** @type {?} */
        var rowIndex = selectedNode.row;
        // check previous element is from the same layout
        /** @type {?} */
        var prevElementColumn = columnLayout.children
            .find(function (c) { return (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart) &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        if (!prevElementColumn) {
            // no prev column in current layout, seacrh for prev layout
            columnLayout = this.grid.columns.find(function (c) { return c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1; });
            if (!columnLayout) {
                // reached the end
                return null;
            }
            /** @type {?} */
            var layoutSize_1 = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;
            // first element is from the next layout
            prevElementColumn = columnLayout.children
                .find(function (c) { return (c.colEnd === layoutSize_1 + 1 || c.colStart + c.gridColumnSpan === layoutSize_1 + 1) &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan); });
        }
        /** @type {?} */
        var cb = function () {
            /** @type {?} */
            var prevElement = prevElementColumn.cells.find(function (c) { return c.rowIndex === rowIndex; }).nativeElement;
            _this._focusCell(prevElement);
        };
        if (!this.isColumnLeftFullyVisible(prevElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);
        }
        else {
            cb();
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @param {?=} cellRowStart
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.onKeydownEnd = /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @param {?=} cellRowStart
     * @return {?}
     */
    function (rowIndex, isSummary, cellRowStart) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var layouts = this.grid.columns.filter(function (c) { return c.columnLayout && !c.hidden; }).sort(function (a, b) { return a.visibleIndex - b.visibleIndex; });
        /** @type {?} */
        var lastLayout = layouts[layouts.length - 1];
        /** @type {?} */
        var lastLayoutChildren = lastLayout.children;
        /** @type {?} */
        var layoutSize = lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;
        /** @type {?} */
        var currentRowStart = this.applyNavigationCell(this.startNavigationCell ? this.startNavigationCell.colStart : 1, cellRowStart || this.grid.multiRowLayoutRowSize, NavigationDirection.horizontal);
        /** @type {?} */
        var nextElementColumn = lastLayout.children.find(function (c) {
            return (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan);
        });
        /** @type {?} */
        var indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);
        /** @type {?} */
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (!this.isColumnFullyVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            /** @type {?} */
            var cb = function () {
                /** @type {?} */
                var allBlocks = rowElement.querySelectorAll(_this.getColumnLayoutSelector());
                /** @type {?} */
                var cell = allBlocks[allBlocks.length - 1].children[indexInLayout];
                _this._focusCell(cell);
            };
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
            return;
        }
        else {
            /** @type {?} */
            var allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
            /** @type {?} */
            var cell = allBlocks[allBlocks.length - 1].children[indexInLayout];
            this._focusCell(cell);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @param {?=} cellRowStart
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.onKeydownHome = /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @param {?=} cellRowStart
     * @return {?}
     */
    function (rowIndex, isSummary, cellRowStart) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        if (cellRowStart === void 0) { cellRowStart = 1; }
        /** @type {?} */
        var firstLayout = this.grid.columns.filter(function (c) { return c.columnLayout && !c.hidden; })[0];
        /** @type {?} */
        var lastLayoutChildren = firstLayout.children.toArray();
        /** @type {?} */
        var currentRowStart = this.applyNavigationCell(this.startNavigationCell ? this.startNavigationCell.colStart : 1, cellRowStart, NavigationDirection.horizontal);
        /** @type {?} */
        var nextElementColumn = firstLayout.children.find(function (c) {
            return c.colStart === 1 &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan);
        });
        /** @type {?} */
        var indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);
        /** @type {?} */
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (!this.isColumnLeftFullyVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            /** @type {?} */
            var cb = function () {
                /** @type {?} */
                var allBlocks = rowElement.querySelectorAll(_this.getColumnLayoutSelector());
                /** @type {?} */
                var cell = allBlocks[0].children[indexInLayout];
                _this._focusCell(cell);
            };
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
            return;
        }
        else {
            /** @type {?} */
            var allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
            /** @type {?} */
            var cell = allBlocks[0].children[indexInLayout];
            this._focusCell(cell);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.getColumnLayoutSelector = /**
     * @protected
     * @return {?}
     */
    function () {
        return '.igx-grid__mrl-block';
    };
    /**
     * @protected
     * @param {?} visibleColIndex
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.getChildColumnScrollPositions = /**
     * @protected
     * @param {?} visibleColIndex
     * @return {?}
     */
    function (visibleColIndex) {
        /** @type {?} */
        var forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;
        /** @type {?} */
        var targetCol = this.getColunmByVisibleIndex(visibleColIndex);
        /** @type {?} */
        var parent = targetCol.parent;
        /** @type {?} */
        var parentVIndex = forOfDir.igxForOf.indexOf(parent);
        /** @type {?} */
        var leftScroll = forOfDir.getColumnScrollLeft(parentVIndex);
        /** @type {?} */
        var rightScroll = 0;
        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.
        /** @type {?} */
        var childSizes = parent.getFilledChildColumnSizes(parent.children);
        /** @type {?} */
        var colStart = targetCol.colStart || 1;
        /** @type {?} */
        var colEnd = targetCol.colEnd || colStart + 1;
        for (var i = 1; i < colStart; i++) {
            leftScroll += parseInt(childSizes[i - 1], 10);
        }
        rightScroll += leftScroll;
        for (var j = colStart; j < colEnd; j++) {
            rightScroll += parseInt(childSizes[j - 1], 10);
        }
        return { leftScroll: leftScroll, rightScroll: rightScroll };
    };
    /**
     * @protected
     * @param {?} visibleColIndex
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.getColunmByVisibleIndex = /**
     * @protected
     * @param {?} visibleColIndex
     * @return {?}
     */
    function (visibleColIndex) {
        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;
        return this.grid.columnList.find(function (col) { return !col.columnLayout && col.visibleIndex === visibleColIndex; });
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.shouldPerformVerticalScroll = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex) {
        if (this._isGroupRecordAt(rowIndex)) {
            return _super.prototype.shouldPerformVerticalScroll.call(this, rowIndex, visibleColumnIndex);
        }
        if (!_super.prototype.shouldPerformVerticalScroll.call(this, rowIndex, visibleColumnIndex)) {
            return false;
        }
        /** @type {?} */
        var targetRow = this.grid.summariesRowList.filter(function (s) { return s.index !== 0; })
            .concat(this.grid.rowList.toArray()).find(function (r) { return r.index === rowIndex; });
        /** @type {?} */
        var scrollTop = Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);
        /** @type {?} */
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        var scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);
        if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)
            || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {
            return true;
        }
        else {
            return false;
        }
    };
    Object.defineProperty(IgxGridMRLNavigationService.prototype, "verticalDCTopOffset", {
        get: /**
         * @return {?}
         */
        function () {
            return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype._isGroupRecordAt = /**
     * @private
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        /** @type {?} */
        var record = this.grid.verticalScrollContainer.igxForOf[rowIndex];
        return record.records && record.records.length;
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} cb
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.performVerticalScrollToCell = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex, cb) {
        if (this._isGroupRecordAt(rowIndex)) {
            return _super.prototype.performVerticalScrollToCell.call(this, rowIndex, visibleColumnIndex, cb);
        }
        /** @type {?} */
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        var scrollTop = Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);
        /** @type {?} */
        var scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);
        /** @type {?} */
        var targetRow = this.grid.summariesRowList.filter(function (s) { return s.index !== 0; })
            .concat(this.grid.rowList.toArray()).find(function (r) { return r.index === rowIndex; });
        /** @type {?} */
        var isPrevious = (scrollTop > scrollPos.rowTop) && (!targetRow ||
            targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));
        /** @type {?} */
        var scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);
        this.grid.verticalScrollContainer.onChunkLoad
            .pipe(first()).subscribe(function () {
            cb();
        });
        if (isPrevious) {
            this.grid.verticalScrollContainer.getVerticalScroll().scrollTop = scrollAmount;
        }
        else {
            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColIndex
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.getVerticalScrollPositions = /**
     * @param {?} rowIndex
     * @param {?} visibleColIndex
     * @return {?}
     */
    function (rowIndex, visibleColIndex) {
        /** @type {?} */
        var targetCol = this.getColunmByVisibleIndex(visibleColIndex);
        /** @type {?} */
        var topOffset = (targetCol.rowStart - 1) * this.grid.defaultRowHeight;
        /** @type {?} */
        var rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;
        /** @type {?} */
        var rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);
        return { rowTop: rowTop, rowBottom: rowBottom, topOffset: topOffset };
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @param {?=} cb
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.performHorizontalScrollToCell = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex, isSummary, cb) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
        /** @type {?} */
        var hScroll = this.horizontalScroll(rowIndex);
        this.grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(function () {
            if (cb) {
                cb();
            }
            else {
                _this._focusCell(_this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));
            }
        });
        /** @type {?} */
        var isPrevItem = hScroll.getHorizontalScroll().scrollLeft > scrollPos.leftScroll;
        /** @type {?} */
        var containerSize = parseInt(hScroll.igxForContainerSize, 10);
        /** @type {?} */
        var nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;
        hScroll.getHorizontalScroll().scrollLeft = nextScroll;
    };
    /**
     * @protected
     * @param {?} cellElem
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype._focusCell = /**
     * @protected
     * @param {?} cellElem
     * @return {?}
     */
    function (cellElem) {
        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.
        /** @type {?} */
        var gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;
        /** @type {?} */
        var diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;
        if (diffTop < 0) {
            // cell is above grid top - not visible
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                cellElem.focus({ preventScroll: true });
            });
            this.grid.verticalScrollContainer.addScrollTop(diffTop);
        }
        else if (diffBottom > 0) {
            // cell is below grid bottom - not visible
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                cellElem.focus({ preventScroll: true });
            });
            this.grid.verticalScrollContainer.addScrollTop(diffBottom);
        }
        else {
            // cell is visible
            cellElem.focus({ preventScroll: true });
        }
    };
    /**
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.goToFirstCell = /**
     * @return {?}
     */
    function () {
        this.startNavigationCell = null;
        _super.prototype.goToFirstCell.call(this);
    };
    /**
     * @return {?}
     */
    IgxGridMRLNavigationService.prototype.goToLastCell = /**
     * @return {?}
     */
    function () {
        this.startNavigationCell = null;
        _super.prototype.goToLastCell.call(this);
    };
    IgxGridMRLNavigationService.decorators = [
        { type: Injectable }
    ];
    return IgxGridMRLNavigationService;
}(IgxGridNavigationService));
export { IgxGridMRLNavigationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridMRLNavigationService.prototype.startNavigationCell;
    /** @type {?} */
    IgxGridMRLNavigationService.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,