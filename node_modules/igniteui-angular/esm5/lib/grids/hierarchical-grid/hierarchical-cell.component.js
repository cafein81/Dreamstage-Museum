/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgxGridCellComponent } from '../cell.component';
import { GridBaseAPIService } from '../api.service';
import { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component, HostListener, NgZone } from '@angular/core';
import { IgxHierarchicalSelectionAPIService } from './selection';
import { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';
var IgxHierarchicalGridCellComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxHierarchicalGridCellComponent, _super);
    function IgxHierarchicalGridCellComponent(selectionService, crudService, gridAPI, selection, cdr, helement, zone) {
        var _this = _super.call(this, selectionService, crudService, gridAPI, selection, cdr, helement, zone) || this;
        _this.selectionService = selectionService;
        _this.crudService = crudService;
        _this.gridAPI = gridAPI;
        _this.selection = selection;
        _this.cdr = cdr;
        _this.helement = helement;
        _this.zone = zone;
        _this.hSelection = (/** @type {?} */ (selection));
        return _this;
    }
    /**
     * @return {?}
     */
    IgxHierarchicalGridCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this._rootGrid = this._getRootGrid();
    };
    /**
     * @private
     * @return {?}
     */
    IgxHierarchicalGridCellComponent.prototype._getRootGrid = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currGrid = this.grid;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
        }
        return currGrid;
    };
    // TODO: Extend the new selection service to avoid complete traversal
    // TODO: Extend the new selection service to avoid complete traversal
    /**
     * @return {?}
     */
    IgxHierarchicalGridCellComponent.prototype._clearAllHighlights = 
    // TODO: Extend the new selection service to avoid complete traversal
    /**
     * @return {?}
     */
    function () {
        tslib_1.__spread([this._rootGrid], this._rootGrid.getChildGrids(true)).forEach(function (grid) {
            grid.selectionService.clear();
            grid.selectionService.activeElement = null;
            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');
            grid.highlightedRowID = null;
            grid.cdr.markForCheck();
        });
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    IgxHierarchicalGridCellComponent.prototype.onFocus = /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._clearAllHighlights();
        /** @type {?} */
        var currentElement = this.grid.nativeElement;
        /** @type {?} */
        var parentGrid = this.grid;
        /** @type {?} */
        var childGrid;
        // add highligh to the current grid
        if (this._rootGrid.id !== currentElement.id) {
            currentElement.classList.add('igx-grid__tr--highlighted');
        }
        // add highligh to the current grid
        while (this._rootGrid.id !== parentGrid.id) {
            childGrid = parentGrid;
            parentGrid = parentGrid.parent;
            /** @type {?} */
            var parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);
            parentGrid.highlightedRowID = parentRowID;
        }
        _super.prototype.onFocus.call(this, event);
    };
    // TODO: Refactor
    /**
     * @hidden
     * @internal
     */
    // TODO: Refactor
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    IgxHierarchicalGridCellComponent.prototype.dispatchEvent = 
    // TODO: Refactor
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var key = event.key.toLowerCase();
        if (event.altKey && !this.row.added) {
            /** @type {?} */
            var grid = this.gridAPI.grid;
            /** @type {?} */
            var state = this.gridAPI.grid.hierarchicalState;
            /** @type {?} */
            var collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');
            /** @type {?} */
            var expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');
            if (collapse) {
                grid.hierarchicalState = state.filter(function (v) {
                    return v.rowID !== _this.row.rowID;
                });
            }
            else if (expand) {
                state.push({ rowID: this.row.rowID });
                grid.hierarchicalState = tslib_1.__spread(state);
            }
            if (expand || collapse) {
                /** @type {?} */
                var rowID = this.cellID.rowID;
                grid.cdr.detectChanges();
                this.persistFocusedCell(rowID);
            }
            return;
        }
        _super.prototype.dispatchEvent.call(this, event);
    };
    /**
     * @protected
     * @param {?} rowID
     * @return {?}
     */
    IgxHierarchicalGridCellComponent.prototype.persistFocusedCell = /**
     * @protected
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        var _this = this;
        requestAnimationFrame(function () {
            // TODO: Test it out
            /** @type {?} */
            var cell = _this.gridAPI.get_cell_by_key(rowID, _this.column.field);
            if (cell) {
                cell.nativeElement.focus();
            }
        });
    };
    IgxHierarchicalGridCellComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-hierarchical-grid-cell',
                    template: "<ng-template #defaultCell>\n    <div igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal: grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value\"\n        [row]=\"rowData\" [column]=\"this.column.field\" [containerClass]=\"'igx-grid__td-text'\"\n        class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal:\n        grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value }}</div>\n</ng-template>\n<ng-template #inlineEditor let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [value]=\"editValue\" (input)=\"editValue = $event.target.value\" [igxFocus]=\"focused\" />\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [value]=\"editValue\" (input)=\"editValue = $event.target.value\" [igxFocus]=\"focused\" type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox (change)=\"editValue = $event.checked\" [value]=\"editValue\" [checked]=\"editValue\"\n            [igxFocus]=\"focused\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-date-picker [style.width.%]=\"100\" [outlet]=\"grid.outletDirective\" mode=\"dropdown\" (onSelection)=\"editValue = $event\"\n            [locale]=\"grid.locale\" [value]=\"editValue\" [igxFocus]=\"focused\" [labelVisibility]=\"false\">\n        </igx-date-picker>\n    </ng-container>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n"
                }] }
    ];
    /** @nocollapse */
    IgxHierarchicalGridCellComponent.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: GridBaseAPIService },
        { type: IgxHierarchicalSelectionAPIService },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    IgxHierarchicalGridCellComponent.propDecorators = {
        onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
        dispatchEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return IgxHierarchicalGridCellComponent;
}(IgxGridCellComponent));
export { IgxHierarchicalGridCellComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridCellComponent.prototype.hSelection;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridCellComponent.prototype._rootGrid;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridCellComponent.prototype.selectionService;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridCellComponent.prototype.crudService;
    /** @type {?} */
    IgxHierarchicalGridCellComponent.prototype.gridAPI;
    /** @type {?} */
    IgxHierarchicalGridCellComponent.prototype.selection;
    /** @type {?} */
    IgxHierarchicalGridCellComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    IgxHierarchicalGridCellComponent.prototype.helement;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridCellComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,