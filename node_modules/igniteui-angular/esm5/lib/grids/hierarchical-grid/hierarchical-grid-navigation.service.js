/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgxGridNavigationService } from '../grid-navigation.service';
import { first } from 'rxjs/operators';
import { FilterMode } from '../grid-base.component';
var IgxHierarchicalGridNavigationService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxHierarchicalGridNavigationService, _super);
    function IgxHierarchicalGridNavigationService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @param {?=} visibleIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getCellSelector = /**
     * @protected
     * @param {?=} visibleIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (visibleIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';
    };
    /**
     * @protected
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getRowSelector = /**
     * @protected
     * @return {?}
     */
    function () {
        return 'igx-hierarchical-grid-row';
    };
    /**
     * @protected
     * @param {?} index
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getRowByIndex = /**
     * @protected
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        /** @type {?} */
        var selector = this.getRowSelector();
        /** @type {?} */
        var rows = Array.from(this.grid.nativeElement.querySelectorAll(selector + "[data-rowindex=\"" + index + "\"]"));
        /** @type {?} */
        var row;
        rows.forEach(function (r) {
            /** @type {?} */
            var parentGrid = _this.getClosestElemByTag(r, 'igx-hierarchical-grid');
            if (parentGrid && parentGrid.getAttribute('id') === _this.grid.id) {
                row = r;
            }
        });
        return row;
    };
    /**
     * @private
     * @param {?=} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getChildContainer = /**
     * @private
     * @param {?=} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var currGrid = grid || this.grid;
        return currGrid.nativeElement.parentNode.parentNode.parentNode;
    };
    /**
     * @private
     * @param {?=} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getChildGridRowContainer = /**
     * @private
     * @param {?=} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var currGrid = grid || this.grid;
        return currGrid.nativeElement.parentNode.parentNode;
    };
    /**
     * @private
     * @param {?} childGridID
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getChildGrid = /**
     * @private
     * @param {?} childGridID
     * @param {?} grid
     * @return {?}
     */
    function (childGridID, grid) {
        /** @type {?} */
        var cgrid = grid.hgridAPI.getChildGrids(true).filter(function (g) { return g.id === childGridID; })[0];
        return cgrid;
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype._isScrolledToBottom = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var scrollTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;
        /** @type {?} */
        var scrollHeight = grid.verticalScrollContainer.getVerticalScroll().scrollHeight;
        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getIsChildAtIndex = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.grid.isChildGridRecord(this.grid.verticalScrollContainer.igxForOf[index]);
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getCellElementByVisibleIndex = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);
        if (isSummary) {
            /** @type {?} */
            var summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;
            return summaryRow.querySelector(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
        }
        /** @type {?} */
        var row = this.getRowByIndex(rowIndex);
        return row.querySelector(cellSelector + "[data-rowindex=\"" + rowIndex + "\"][data-visibleIndex=\"" + visibleColumnIndex + "\"]");
    };
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.navigateUp = /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        var _this = this;
        /** @type {?} */
        var prevElem = rowElement.previousElementSibling;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var currentRowIndex = selectedNode.row;
        if (prevElem) {
            /** @type {?} */
            var nodeName = prevElem.children[0].nodeName.toLowerCase();
            /** @type {?} */
            var isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';
            if (isElemChildGrid) {
                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);
            }
            else {
                if (this.grid.parent !== null) {
                    // currently navigating in child grid
                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);
                }
                else {
                    _super.prototype.navigateUp.call(this, rowElement, selectedNode);
                }
            }
        }
        else if (currentRowIndex !== 0) {
            // handle scenario when prev item is child grid but is not yet in view
            /** @type {?} */
            var isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);
            if (!isPrevChildGrid) {
                _super.prototype.navigateUp.call(this, rowElement, selectedNode);
            }
            else {
                this.scrollGrid(this.grid, -rowElement.offsetHeight, function () {
                    rowElement = _this.getRowByIndex(currentRowIndex);
                    _this.navigateUp(rowElement, selectedNode);
                });
            }
        }
        else if (this.grid.parent !== null &&
            currentRowIndex === 0) {
            // move to prev row in sibling layout or parent
            this.focusPrev(visibleColumnIndex);
        }
    };
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.navigateDown = /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        /** @type {?} */
        var nextElem = rowElement.nextElementSibling;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var currentRowIndex = selectedNode.row;
        if (nextElem) {
            // next elem is in DOM
            /** @type {?} */
            var nodeName = nextElem.children[0].nodeName.toLowerCase();
            /** @type {?} */
            var isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';
            if (isNextElemChildGrid) {
                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);
            }
            else {
                if (this.grid.parent !== null) {
                    // currently navigating in child grid
                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);
                }
                else {
                    _super.prototype.navigateDown.call(this, rowElement, selectedNode);
                }
            }
        }
        else if (currentRowIndex !== this.grid.verticalScrollContainer.igxForOf.length - 1) {
            // scroll next in view
            _super.prototype.navigateDown.call(this, rowElement, selectedNode);
        }
        else if (this.grid.parent !== null &&
            currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {
            // move to next row in sibling layout or in parent
            this.focusNext(visibleColumnIndex);
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.navigateTop = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        if (this.grid.parent !== null) {
            // navigating in child
            /** @type {?} */
            var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
            /** @type {?} */
            var cellSelector_1 = this.getCellSelector(visibleColumnIndex);
            if (verticalScroll.scrollTop === 0) {
                this._focusScrollCellInView(visibleColumnIndex);
            }
            else {
                this.scrollGrid(this.grid, 'top', function () {
                    /** @type {?} */
                    var cells = _this.grid.nativeElement.querySelectorAll(cellSelector_1 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                    if (cells.length > 0) {
                        _this._focusScrollCellInView(visibleColumnIndex);
                    }
                });
            }
        }
        else {
            _super.prototype.navigateTop.call(this, visibleColumnIndex);
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.navigateBottom = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        // handle scenario where last index is child grid
        // in that case focus cell in last data row
        /** @type {?} */
        var lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;
        if (this.getIsChildAtIndex(lastIndex)) {
            /** @type {?} */
            var targetIndex_1 = lastIndex - 1;
            /** @type {?} */
            var scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex_1, true);
            /** @type {?} */
            var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
            /** @type {?} */
            var cellSelector_2 = this.getCellSelector(visibleColumnIndex);
            if (verticalScroll.scrollTop === scrTopPosition) {
                /** @type {?} */
                var cells = this.getRowByIndex(targetIndex_1).querySelectorAll(cellSelector_2 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                cells[cells.length - 1].focus();
            }
            else {
                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop, function () {
                    /** @type {?} */
                    var cells = _this.getRowByIndex(targetIndex_1).querySelectorAll(cellSelector_2 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                    if (cells.length > 0) {
                        cells[cells.length - 1].focus();
                    }
                });
            }
        }
        else {
            _super.prototype.navigateBottom.call(this, visibleColumnIndex);
        }
    };
    /**
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.goToLastCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // handle scenario where last index is child grid
        // in that case focus last cell in last data row
        /** @type {?} */
        var lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;
        if (this.getIsChildAtIndex(lastIndex)) {
            /** @type {?} */
            var targetIndex_2 = lastIndex - 1;
            /** @type {?} */
            var scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex_2, true);
            /** @type {?} */
            var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
            if (verticalScroll.scrollTop === scrTopPosition) {
                this.onKeydownEnd(targetIndex_2);
            }
            else {
                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop, function () {
                    _this.onKeydownEnd(targetIndex_2);
                });
            }
        }
        else {
            _super.prototype.goToLastCell.call(this);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.onKeydownEnd = /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, isSummary) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        if (this.grid.parent && !isSummary) {
            // handle scenario where last child row might not be in view
            // parent should scroll to child grid end
            /** @type {?} */
            var childContainer = this.grid.nativeElement.parentNode.parentNode;
            /** @type {?} */
            var diffBottom = childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;
            /** @type {?} */
            var row = this.grid.getRowByIndex(rowIndex).element.nativeElement;
            /** @type {?} */
            var rowBottom = row.getBoundingClientRect().bottom;
            /** @type {?} */
            var rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;
            /** @type {?} */
            var gridTop = this._getMaxTop(this.grid);
            /** @type {?} */
            var diffTop = row.getBoundingClientRect().bottom -
                row.offsetHeight - gridTop;
            /** @type {?} */
            var endIsVisible = diffBottom <= 0;
            /** @type {?} */
            var topVisible = diffTop >= 0;
            if (!endIsVisible && !rowIsVisible) {
                this.scrollGrid(this.grid.parent, diffBottom, function () { return _super.prototype.onKeydownEnd.call(_this, rowIndex); });
            }
            else if (!topVisible) {
                /** @type {?} */
                var scrGrid = this.grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? this.grid :
                    this.getNextScrollable(this.grid).grid;
                /** @type {?} */
                var topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >
                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;
                this.scrollGrid(topGrid, diffTop, function () { return _super.prototype.onKeydownEnd.call(_this, rowIndex); });
            }
            else {
                _super.prototype.onKeydownEnd.call(this, rowIndex, isSummary);
            }
        }
        else {
            _super.prototype.onKeydownEnd.call(this, rowIndex, isSummary);
        }
    };
    /**
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.goToFirstCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        /** @type {?} */
        var horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (verticalScroll.scrollTop === 0 && this.grid.parent) {
            // scroll parent so that current child is in view
            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {
                this.navigateTop(0);
            }
            else {
                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);
                this.grid.parentVirtDir.onChunkLoad
                    .pipe(first())
                    .subscribe(function () {
                    _this.navigateTop(0);
                });
            }
        }
        else {
            _super.prototype.goToFirstCell.call(this);
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.performTab = /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    function (currentRowEl, selectedNode) {
        var _this = this;
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var isSummaryRow = selectedNode.isSummaryRow;
        /** @type {?} */
        var summaryRows = this.grid.summariesRowList.toArray();
        /** @type {?} */
        var hasSummaries = summaryRows.length > 0;
        /** @type {?} */
        var isLastDataRow = rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1;
        /** @type {?} */
        var nextIsDataRow = this.grid.dataRowList.find(function (row) { return row.index === rowIndex + 1; });
        /** @type {?} */
        var isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;
        /** @type {?} */
        var isLastSummaryRow = hasSummaries && isSummaryRow;
        /** @type {?} */
        var nextIndex = rowIndex + 1;
        /** @type {?} */
        var virt = this.grid.verticalScrollContainer;
        /** @type {?} */
        var isNextChild = nextIndex <= virt.igxForOf.length - 1 &&
            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);
        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {
            // navigating in child, next is not summary
            /** @type {?} */
            var childContainer = this.getChildGridRowContainer();
            /** @type {?} */
            var nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;
            if (nextIsSiblingChild) {
                this.focusNextChildDOMElem(childContainer, this.grid.parent);
            }
            else if (isNextChild) {
                /** @type {?} */
                var isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;
                if (!isInView) {
                    this.scrollGrid(this.grid, 'next', function () {
                        _this.focusNextChildDOMElem(currentRowEl, _this.grid);
                    });
                }
                else {
                    this.focusNextChildDOMElem(currentRowEl, this.grid);
                }
            }
            else {
                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });
            }
        }
        else if (isLastSummaryRow && isLastColumn && this.grid.parent) {
            // navigating in child summary, next is parent summary or next parent row
            /** @type {?} */
            var parent_1 = this.grid.parent;
            /** @type {?} */
            var parentHasSummary = parent_1.summariesRowList.toArray().length > 0;
            /** @type {?} */
            var parentRowIndex = parseInt(this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);
            /** @type {?} */
            var isLastRowInParent = parent_1.verticalScrollContainer.igxForOf.length - 1 === parentRowIndex;
            // check if next is sibling
            /** @type {?} */
            var childRowContainer = this.getChildGridRowContainer(this.grid);
            /** @type {?} */
            var nextIsSiblingChild = !!childRowContainer.nextElementSibling;
            if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {
                // next is parent summary
                /** @type {?} */
                var parentSummary = parent_1.summariesRowList.toArray()[0].nativeElement;
                parent_1.navigation.focusNextRow(parentSummary, 0, this.grid.rootGrid, true);
            }
            else {
                // next is sibling or parent
                this.focusNext(0);
            }
        }
        else if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {
            // navigating in child rows, next is child grid's summary row
            this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);
        }
        else {
            _super.prototype.performTab.call(this, currentRowEl, selectedNode);
        }
    };
    /**
     * @private
     * @param {?} currentRowEl
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.focusNextChildDOMElem = /**
     * @private
     * @param {?} currentRowEl
     * @param {?} grid
     * @return {?}
     */
    function (currentRowEl, grid) {
        /** @type {?} */
        var gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');
        /** @type {?} */
        var childGridID = gridElem.getAttribute('id');
        /** @type {?} */
        var childGrid = this.getChildGrid(childGridID, grid);
        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {
            childGrid.navigation.moveFocusToFilterCell(true);
            return;
        }
        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);
    };
    /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.navigatePrevFilterCell = /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    function (column, eventArgs) {
        if (column.visibleIndex === 0 && this.grid.parent) {
            eventArgs.preventDefault();
            /** @type {?} */
            var targetGrid = this.grid.parent;
            /** @type {?} */
            var prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;
            if (prevSiblingChild) {
                /** @type {?} */
                var gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];
                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);
            }
            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);
        }
        else {
            _super.prototype.navigatePrevFilterCell.call(this, column, eventArgs);
        }
    };
    /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.navigateNextFilterCell = /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    function (column, eventArgs) {
        /** @type {?} */
        var cols = this.grid.filteringService.unpinnedFilterableColumns;
        /** @type {?} */
        var nextFilterableIndex = cols.indexOf(column) + 1;
        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {
            // next is not filter cell
            /** @type {?} */
            var dataRows = this.grid.rowList.toArray();
            /** @type {?} */
            var hasRows = dataRows.length !== 0;
            /** @type {?} */
            var summaryRows = this.grid.summariesRowList.toArray();
            /** @type {?} */
            var hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;
            if (hasRows) {
                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);
            }
            else if (hasSummaries) {
                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);
            }
            else {
                this.focusNext(0);
            }
            eventArgs.preventDefault();
        }
        else {
            _super.prototype.navigateNextFilterCell.call(this, column, eventArgs);
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.performShiftTabKey = /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    function (currentRowEl, selectedNode) {
        var _this = this;
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var isSummary = selectedNode.isSummaryRow;
        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {
            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {
                this.moveFocusToFilterCell();
            }
            else {
                /** @type {?} */
                var prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;
                if (prevSiblingChild) {
                    /** @type {?} */
                    var gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];
                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);
                }
                else {
                    /** @type {?} */
                    var selNode = {
                        row: rowIndex,
                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex
                    };
                    this.navigateUp(currentRowEl, selNode);
                }
            }
        }
        else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&
            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {
            /** @type {?} */
            var gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);
            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);
        }
        else if (visibleColumnIndex === 0 && isSummary) {
            /** @type {?} */
            var lastRowIndex_1 = this.grid.verticalScrollContainer.igxForOf.length - 1;
            if (lastRowIndex_1 === -1) {
                // no child data
                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {
                    this.moveFocusToFilterCell();
                }
                else {
                    /** @type {?} */
                    var selNode = {
                        row: rowIndex,
                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex
                    };
                    this.navigateUp(currentRowEl, selNode);
                }
            }
            else if (!this.getIsChildAtIndex(lastRowIndex_1)) {
                _super.prototype.goToLastCell.call(this);
            }
            else {
                /** @type {?} */
                var scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex_1, true);
                /** @type {?} */
                var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
                if (verticalScroll.scrollTop === scrTopPosition || isNaN(scrTopPosition)) {
                    /** @type {?} */
                    var closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex_1).nativeElement.parentElement);
                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);
                }
                else {
                    this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop, function () {
                        /** @type {?} */
                        var closestChild = _this.getLastGridElem(_this.grid.getRowByIndex(lastRowIndex_1).nativeElement.parentElement);
                        _this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);
                    });
                }
            }
        }
        else {
            _super.prototype.performShiftTabKey.call(this, currentRowEl, selectedNode);
        }
    };
    /**
     * @private
     * @param {?} trContainer
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getLastGridElem = /**
     * @private
     * @param {?} trContainer
     * @return {?}
     */
    function (trContainer) {
        /** @type {?} */
        var children = trContainer.children;
        /** @type {?} */
        var closestChild = children[children.length - 1].children[0].children[0];
        return closestChild;
    };
    /**
     * @private
     * @param {?} gridElem
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.performShiftTabIntoChild = /**
     * @private
     * @param {?} gridElem
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @return {?}
     */
    function (gridElem, currentRowEl, rowIndex) {
        /** @type {?} */
        var childGridID = gridElem.getAttribute('id');
        /** @type {?} */
        var childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);
        /** @type {?} */
        var lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;
        /** @type {?} */
        var summaryRows = childGrid.summariesRowList.toArray();
        if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {
            // move focus to last summary row cell
            /** @type {?} */
            var summaryRow = summaryRows[0].nativeElement;
            this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);
        }
        else if (childGrid.rowList.toArray().length === 0 &&
            childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {
            // move to filter cell
            childGrid.navigation.moveFocusToFilterCell();
        }
        else {
            // move to next cell
            this.navigateUp(currentRowEl, { row: rowIndex, column: lastIndex });
        }
    };
    /**
     * @private
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype._focusScrollCellInView = /**
     * @private
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex);
        /** @type {?} */
        var cells = this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
        /** @type {?} */
        var cell = cells[0];
        /** @type {?} */
        var childContainer = this.grid.nativeElement.parentNode.parentNode;
        /** @type {?} */
        var scrTop = this.grid.parent.verticalScrollContainer.getVerticalScroll().scrollTop;
        /** @type {?} */
        var dc = childContainer.parentNode.parentNode;
        /** @type {?} */
        var scrWith = parseInt(dc.style.top, 10);
        if (scrTop === 0 || scrWith === 0) {
            // cell is in view
            cell.focus({ preventScroll: true });
        }
        else {
            // scroll parent so that cell is in view
            this.scrollGrid(this.grid.parent, scrWith, function () { return cell.focus({ preventScroll: true }); });
        }
    };
    /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.focusNextChild = /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @return {?}
     */
    function (elem, visibleColumnIndex, grid) {
        var _this = this;
        /** @type {?} */
        var gridElem = elem.querySelector('igx-hierarchical-grid');
        /** @type {?} */
        var childGridID = gridElem.getAttribute('id');
        /** @type {?} */
        var childGrid = this.getChildGrid(childGridID, grid);
        if (childGrid.rowList.toArray().length === 0) {
            this.focusNext(visibleColumnIndex, childGrid);
            return;
        }
        // Update column index since the next child can have in general less columns than visibleColumnIndex value.
        /** @type {?} */
        var lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;
        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);
        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {
            // scroll to top
            this.scrollGrid(childGrid, 'top', function () { return _this.focusNextRow(elem, visibleColumnIndex, childGrid); });
        }
        else {
            this.focusNextRow(elem, visibleColumnIndex, childGrid);
        }
    };
    /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.focusPrevChild = /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @return {?}
     */
    function (elem, visibleColumnIndex, grid) {
        var _this = this;
        /** @type {?} */
        var grids = [];
        /** @type {?} */
        var gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));
        /** @type {?} */
        var childLevel = grid.childLayoutList.first.level;
        gridElems.forEach(function (hg) {
            /** @type {?} */
            var parentRow = _this.getClosestElemByTag(hg, 'igx-child-grid-row');
            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {
                grids.push(hg);
            }
        });
        /** @type {?} */
        var gridElem = grids[grids.length - 1];
        /** @type {?} */
        var childGridID = gridElem.getAttribute('id');
        /** @type {?} */
        var childGrid = this.getChildGrid(childGridID, grid);
        if (childGrid.rowList.toArray().length === 0) {
            this.focusPrev(visibleColumnIndex, childGrid);
            return;
        }
        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.
        /** @type {?} */
        var lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;
        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);
        /** @type {?} */
        var isScrolledToBottom = this._isScrolledToBottom(childGrid);
        /** @type {?} */
        var lastIndex = childGrid.verticalScrollContainer.igxForOf.length - 1;
        if (!isScrolledToBottom) {
            // scroll to end
            this.scrollGrid(childGrid, 'bottom', function () { return _this.focusPrevChild(elem, visibleColumnIndex, grid); });
        }
        else {
            /** @type {?} */
            var lastRowInChild = childGrid.getRowByIndex(lastIndex);
            /** @type {?} */
            var isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';
            if (isChildGrid) {
                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);
            }
            else {
                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);
            }
        }
    };
    /**
     * @private
     * @param {?} visibleColumnIndex
     * @param {?=} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.focusPrev = /**
     * @private
     * @param {?} visibleColumnIndex
     * @param {?=} grid
     * @return {?}
     */
    function (visibleColumnIndex, grid) {
        var _this = this;
        /** @type {?} */
        var currGrid = grid || this.grid;
        /** @type {?} */
        var parentContainer = this.getChildContainer(currGrid);
        /** @type {?} */
        var childRowContainer = this.getChildGridRowContainer(currGrid);
        /** @type {?} */
        var prevIsSiblingChild = !!childRowContainer.previousElementSibling;
        /** @type {?} */
        var prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;
        if (prev) {
            if (prevIsSiblingChild) {
                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);
            }
            else {
                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);
            }
        }
        else {
            this.scrollGrid(currGrid.parent, 'prev', function () {
                parentContainer = _this.getChildContainer(grid);
                childRowContainer = _this.getChildGridRowContainer(grid);
                prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;
                if (prevIsSiblingChild) {
                    _this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);
                }
                else {
                    _this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);
                }
            });
        }
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getNextParentInfo = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        // find next parent that is not at bottom
        /** @type {?} */
        var currGrid = grid.parent;
        /** @type {?} */
        var nextElem = this.getChildContainer(grid).nextElementSibling;
        while (!nextElem && currGrid.parent !== null) {
            nextElem = this.getChildContainer(currGrid).nextElementSibling;
            currGrid = currGrid.parent;
        }
        return { grid: currGrid, nextElement: nextElem };
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getNextScrollable = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var currGrid = grid.parent;
        if (!currGrid) {
            return { grid: grid, prev: null };
        }
        /** @type {?} */
        var nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;
        /** @type {?} */
        var prev = grid;
        while (nonScrollable && currGrid.parent !== null) {
            prev = currGrid;
            currGrid = currGrid.parent;
            nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;
        }
        return { grid: currGrid, prev: prev };
    };
    /**
     * @private
     * @param {?} visibleColumnIndex
     * @param {?=} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.focusNext = /**
     * @private
     * @param {?} visibleColumnIndex
     * @param {?=} grid
     * @return {?}
     */
    function (visibleColumnIndex, grid) {
        var _this = this;
        /** @type {?} */
        var currGrid = grid || this.grid;
        /** @type {?} */
        var parentInfo = this.getNextParentInfo(currGrid);
        /** @type {?} */
        var nextParentGrid = parentInfo.grid;
        /** @type {?} */
        var nextParentElem = parentInfo.nextElement;
        /** @type {?} */
        var childRowContainer = this.getChildGridRowContainer(currGrid);
        /** @type {?} */
        var nextIsSiblingChild = !!childRowContainer.nextElementSibling;
        /** @type {?} */
        var next = childRowContainer.nextElementSibling || nextParentElem;
        /** @type {?} */
        var verticalScroll = nextParentGrid.verticalScrollContainer.getVerticalScroll();
        if (next) {
            if (nextIsSiblingChild) {
                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);
            }
            else {
                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);
            }
        }
        else if (verticalScroll.scrollTop !==
            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize) {
            this.scrollGrid(nextParentGrid, 'next', function () {
                nextParentElem = parentInfo.nextElement;
                childRowContainer = _this.getChildGridRowContainer();
                next = childRowContainer.nextElementSibling || nextParentElem;
                if (next && nextIsSiblingChild) {
                    _this.focusNextChild(next, visibleColumnIndex, nextParentGrid);
                }
                else if (next) {
                    _this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);
                }
            });
        }
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getNextScrollableDown = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var currGrid = grid.parent;
        if (!currGrid) {
            return { grid: grid, prev: null };
        }
        /** @type {?} */
        var scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;
        /** @type {?} */
        var scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;
        /** @type {?} */
        var nonScrollable = scrollHeight === 0 ||
            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;
        /** @type {?} */
        var prev = grid;
        while (nonScrollable && currGrid.parent !== null) {
            prev = currGrid;
            currGrid = currGrid.parent;
            scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;
            scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;
            nonScrollable = scrollHeight === 0 ||
                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;
        }
        return { grid: currGrid, prev: prev };
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype._getMinBottom = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var currGrid = grid;
        /** @type {?} */
        var bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);
        }
        return bottom;
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype._getMaxTop = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var currGrid = grid;
        /** @type {?} */
        var top = currGrid.tbody.nativeElement.getBoundingClientRect().top;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);
        }
        return top;
    };
    /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @param {?=} isSummary
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.focusNextRow = /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @param {?=} isSummary
     * @return {?}
     */
    function (elem, visibleColumnIndex, grid, isSummary) {
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);
        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {
            /** @type {?} */
            var cell_1 = elem.querySelector(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            /** @type {?} */
            var closestScrollableGrid = this.getNextScrollableDown(grid).grid;
            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;
            /** @type {?} */
            var gridBottom = this._getMinBottom(grid);
            /** @type {?} */
            var diff = cell_1.getBoundingClientRect().bottom - gridBottom;
            /** @type {?} */
            var inView = diff <= 0;
            /** @type {?} */
            var scrollTop = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollTop;
            /** @type {?} */
            var scrollHeight = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;
            /** @type {?} */
            var canScroll = !(scrollHeight === 0 ||
                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);
            if (!inView && canScroll) {
                this.scrollGrid(closestScrollableGrid, diff, function () { return cell_1.focus({ preventScroll: true }); });
            }
            else {
                cell_1.focus({ preventScroll: true });
            }
        }
        else {
            /** @type {?} */
            var cellElem = elem.querySelector("" + cellSelector);
            /** @type {?} */
            var rowIndex = parseInt(cellElem.getAttribute('data-rowindex'), 10);
            grid.navigation.performHorizontalScrollToCell(rowIndex, visibleColumnIndex);
        }
    };
    /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @param {?=} inChild
     * @param {?=} isSummary
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.focusPrevRow = /**
     * @private
     * @param {?} elem
     * @param {?} visibleColumnIndex
     * @param {?} grid
     * @param {?=} inChild
     * @param {?=} isSummary
     * @return {?}
     */
    function (elem, visibleColumnIndex, grid, inChild, isSummary) {
        var _this = this;
        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {
            /** @type {?} */
            var cellSelector_3 = this.getCellSelector(visibleColumnIndex, isSummary);
            /** @type {?} */
            var cells = elem.querySelectorAll(cellSelector_3 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            /** @type {?} */
            var cell_2 = cells[cells.length - 1];
            /** @type {?} */
            var rIndex_1 = parseInt(elem.getAttribute('data-rowindex'), 10);
            /** @type {?} */
            var scrGrid = grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? grid :
                this.getNextScrollable(grid).grid;
            /** @type {?} */
            var topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >
                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;
            /** @type {?} */
            var gridTop = this._getMaxTop(grid);
            /** @type {?} */
            var scrTop = scrGrid.verticalScrollContainer.getVerticalScroll().scrollTop;
            /** @type {?} */
            var diff = cell_2.getBoundingClientRect().bottom -
                cell_2.offsetHeight - gridTop;
            if (scrTop !== 0 && diff < 0 && !inChild) {
                this.scrollGrid(scrGrid, diff, function () {
                    /** @type {?} */
                    var el = !isSummary ? grid.navigation.getRowByIndex(rIndex_1) : elem;
                    cell_2 = el.querySelectorAll(cellSelector_3 + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]")[0];
                    cell_2.focus({ preventScroll: true });
                });
            }
            else if (diff < 0 && inChild) {
                this.scrollGrid(topGrid, diff, function () {
                    cell_2.focus({ preventScroll: true });
                });
            }
            else {
                cell_2.focus({ preventScroll: true });
            }
        }
        else {
            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, function () {
                _this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);
            });
        }
    };
    /**
     * @private
     * @param {?} grid
     * @param {?} visibleColumnIndex
     * @param {?} callBackFunc
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.horizontalScrollGridToIndex = /**
     * @private
     * @param {?} grid
     * @param {?} visibleColumnIndex
     * @param {?} callBackFunc
     * @return {?}
     */
    function (grid, visibleColumnIndex, callBackFunc) {
        /** @type {?} */
        var unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);
        grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(callBackFunc);
        grid.dataRowList.toArray()[0].virtDirRow.scrollTo(unpinnedIndex);
    };
    /**
     * @private
     * @param {?} grid
     * @param {?} target
     * @param {?} callBackFunc
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.scrollGrid = /**
     * @private
     * @param {?} grid
     * @param {?} target
     * @param {?} callBackFunc
     * @return {?}
     */
    function (grid, target, callBackFunc) {
        grid.nativeElement.focus({ preventScroll: true });
        requestAnimationFrame(function () {
            if (typeof target === 'number') {
                grid.verticalScrollContainer.addScrollTop(target);
            }
            else {
                switch (target) {
                    case 'top':
                        grid.verticalScrollContainer.scrollTo(0);
                        break;
                    case 'bottom':
                        grid.verticalScrollContainer.scrollTo(grid.verticalScrollContainer.igxForOf.length - 1);
                        break;
                    case 'next':
                        grid.verticalScrollContainer.scrollNext();
                        break;
                    case 'prev':
                        grid.verticalScrollContainer.scrollPrev();
                        break;
                }
            }
            grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(callBackFunc);
        });
    };
    /**
     * @private
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype._navigateUpInChild = /**
     * @private
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        /** @type {?} */
        var prevElem = rowElement.previousElementSibling;
        /** @type {?} */
        var scrollable = this.getNextScrollable(this.grid);
        /** @type {?} */
        var grid = scrollable.grid;
        /** @type {?} */
        var scrTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;
        /** @type {?} */
        var containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;
        /** @type {?} */
        var top = parseInt(containerTop.style.top, 10);
        if (scrTop !== 0 && top < 0) {
            this.scrollGrid(grid, -prevElem.offsetHeight, function () { return _super.prototype.navigateUp.call(_this, rowElement, { row: currentRowIndex, column: visibleColumnIndex }); });
        }
        else {
            _super.prototype.navigateUp.call(this, rowElement, { row: currentRowIndex, column: visibleColumnIndex });
        }
    };
    /**
     * @private
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype._navigateDownInChild = /**
     * @private
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        /** @type {?} */
        var nextElem = rowElement.nextElementSibling;
        /** @type {?} */
        var childContainer = this.grid.nativeElement.parentNode.parentNode;
        /** @type {?} */
        var diff = childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;
        /** @type {?} */
        var endIsVisible = diff < 0;
        /** @type {?} */
        var scrollable = this.getNextScrollableDown(this.grid);
        /** @type {?} */
        var grid = scrollable.grid;
        if (!endIsVisible) {
            this.scrollGrid(grid, nextElem.offsetHeight, function () { return _super.prototype.navigateDown.call(_this, rowElement, { row: currentRowIndex, column: visibleColumnIndex }); });
        }
        else {
            _super.prototype.navigateDown.call(this, rowElement, { row: currentRowIndex, column: visibleColumnIndex });
        }
    };
    /**
     * @private
     * @param {?} sourceElem
     * @param {?} targetTag
     * @return {?}
     */
    IgxHierarchicalGridNavigationService.prototype.getClosestElemByTag = /**
     * @private
     * @param {?} sourceElem
     * @param {?} targetTag
     * @return {?}
     */
    function (sourceElem, targetTag) {
        /** @type {?} */
        var result = sourceElem;
        while (result !== null && result.nodeType === 1) {
            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {
                return result;
            }
            result = result.parentNode;
        }
        return null;
    };
    return IgxHierarchicalGridNavigationService;
}(IgxGridNavigationService));
export { IgxHierarchicalGridNavigationService };
if (false) {
    /** @type {?} */
    IgxHierarchicalGridNavigationService.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2hpY2FsLWdyaWQtbmF2aWdhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9oaWVyYXJjaGljYWwtZ3JpZC9oaWVyYXJjaGljYWwtZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUV0RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBSXBEO0lBQTBELGdFQUF3QjtJQUFsRjs7SUEydkJBLENBQUM7Ozs7Ozs7SUF4dkJhLDhEQUFlOzs7Ozs7SUFBekIsVUFBMEIsWUFBcUIsRUFBRSxTQUFpQjtRQUFqQiwwQkFBQSxFQUFBLGlCQUFpQjtRQUM5RCxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDO0lBQzlFLENBQUM7Ozs7O0lBRVMsNkRBQWM7Ozs7SUFBeEI7UUFDSSxPQUFPLDJCQUEyQixDQUFDO0lBQ3ZDLENBQUM7Ozs7OztJQUVTLDREQUFhOzs7OztJQUF2QixVQUF3QixLQUFLO1FBQTdCLGlCQVlDOztZQVhTLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFOztZQUNoQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FDekQsUUFBUSx5QkFBbUIsS0FBSyxRQUFJLENBQUMsQ0FBQzs7WUFDekMsR0FBRztRQUNQLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDOztnQkFDTCxVQUFVLEdBQUcsS0FBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSx1QkFBdUIsQ0FBQztZQUN2RSxJ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RUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBQyxDQUFDLEVBQW5GLENBQW1GLENBQUMsQ0FBQztTQUNsRzthQUFNO1lBQ0gsaUJBQU0sWUFBWSxZQUFDLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLGtCQUFrQixFQUFDLENBQUMsQ0FBQztTQUN2RjtJQUNMLENBQUM7Ozs7Ozs7SUFFTyxrRUFBbUI7Ozs7OztJQUEzQixVQUE0QixVQUFVLEVBQUUsU0FBUzs7WUFDekMsTUFBTSxHQUFHLFVBQVU7UUFDdkIsT0FBTyxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO1lBQzdDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQzFELE9BQU8sTUFBTSxDQUFDO2FBQ2pCO1lBQ0QsTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDOUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0wsMkNBQUM7QUFBRCxDQUFDLEFBM3ZCRCxDQUEwRCx3QkFBd0IsR0EydkJqRjs7OztJQTF2Qkcsb0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudCB9IGZyb20gJy4vaGllcmFyY2hpY2FsLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRmlsdGVyTW9kZSB9IGZyb20gJy4uL2dyaWQtYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZ3JpZHMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJU2VsZWN0aW9uTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvZ3JpZC1zZWxlY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgSWd4SGllcmFyY2hpY2FsR3JpZE5hdmlnYXRpb25TZXJ2aWNlIGV4dGVuZHMgSWd4R3JpZE5hdmlnYXRpb25TZXJ2aWNlIHtcbiAgICBwdWJsaWMgZ3JpZDogSWd4SGllcmFyY2hpY2FsR3JpZENvbXBvbmVudDtcblxuICAgIHByb3RlY3RlZCBnZXRDZWxsU2VsZWN0b3IodmlzaWJsZUluZGV4PzogbnVtYmVyLCBpc1N1bW1hcnkgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gaXNTdW1tYXJ5ID8gJ2lneC1ncmlkLXN1bW1hcnktY2VsbCcgOiAnaWd4LWhpZXJhcmNoaWNhbC1ncmlkLWNlbGwnO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRSb3dTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuICdpZ3gtaGllcmFyY2hpY2FsLWdyaWQtcm93JztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Um93QnlJbmRleChpbmRleCkge1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXMuZ2V0Um93U2VsZWN0b3IoKTtcbiAgICAgICAgY29uc3Qgcm93cyA9IEFycmF5LmZyb20odGhpcy5ncmlkLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgIGAke3NlbGVjdG9yfVtkYXRhLXJvd2luZGV4PVwiJHtpbmRleH1cIl1gKSk7XG4gICAgICAgIGxldCByb3c7XG4gICAgICAgIHJvd3MuZm9yRWFjaCgocikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50R3JpZCA9IHRoaXMuZ2V0Q2xvc2VzdEVsZW1CeVRhZyhyLCAnaWd4LWhpZXJhcmNoaWNhbC1ncmlkJyk7XG4gICAgICAgICAgICBpZiAocGFyZW50R3JpZCAmJiBwYXJlbnRHcmlkLmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gdGhpcy5ncmlkLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcm93O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2hpbGRDb250YWluZXIoZ3JpZD8pIHtcbiAgICAgICAgY29uc3QgY3VyckdyaWQgPSBncmlkIHx8IHRoaXMuZ3JpZDtcbiAgICAgICAgcmV0dXJuIGN1cnJHcmlkLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDaGlsZEdyaWRSb3dDb250YWluZXIoZ3JpZD8pIHtcbiAgICAgICAgY29uc3QgY3VyckdyaWQgPSBncmlkIHx8IHRoaXMuZ3JpZDtcbiAgICAgICAgcmV0dXJuIGN1cnJHcmlkLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2hpbGRHcmlkKGNoaWxkR3JpZElELCBncmlkKSB7XG4gICAgICAgIGNvbnN0IGNncmlkID0gZ3JpZC5oZ3JpZEFQSS5nZXRDaGlsZEdyaWRzKHRydWUpLmZpbHRlcigoZykgPT4gZy5pZCA9PT0gY2hpbGRHcmlkSUQpWzBdO1xuICAgICAgICByZXR1cm4gY2dyaWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaXNTY3JvbGxlZFRvQm90dG9tKGdyaWQpIHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpLnNjcm9sbFRvcDtcbiAgICAgICAgY29uc3Qgc2Nyb2xsSGVpZ2h0ID0gZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpLnNjcm9sbEhlaWdodDtcbiAgICAgICAgcmV0dXJuIHNjcm9sbEhlaWdodCA9PT0gMCB8fCBNYXRoLnJvdW5kKHNjcm9sbFRvcCArICBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvckNvbnRhaW5lclNpemUpID09PSBzY3JvbGxIZWlnaHQ7XG4gICAgfVxuICAgIHByaXZhdGUgZ2V0SXNDaGlsZEF0SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5pc0NoaWxkR3JpZFJlY29yZCh0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2ZbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q2VsbEVsZW1lbnRCeVZpc2libGVJbmRleChyb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnkgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBjZWxsU2VsZWN0b3IgPSB0aGlzLmdldENlbGxTZWxlY3Rvcih2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeSk7XG4gICAgICAgIGlmIChpc1N1bW1hcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlSb3cgPSAgdGhpcy5ncmlkLnN1bW1hcmllc1Jvd0xpc3QudG9BcnJheSgpWzBdLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICByZXR1cm4gc3VtbWFyeVJvdy5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgIGAke2NlbGxTZWxlY3Rvcn1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3cgPSB0aGlzLmdldFJvd0J5SW5kZXgocm93SW5kZXgpO1xuICAgICAgICByZXR1cm4gcm93LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBgJHtjZWxsU2VsZWN0b3J9W2RhdGEtcm93aW5kZXg9XCIke3Jvd0luZGV4fVwiXVtkYXRhLXZpc2libGVJbmRleD1cIiR7dmlzaWJsZUNvbHVtbkluZGV4fVwiXWApO1xuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZVVwKHJvd0VsZW1lbnQsIHNlbGVjdGVkTm9kZTogSVNlbGVjdGlvbk5vZGUpIHtcbiAgICAgICAgY29uc3QgcHJldkVsZW0gPSByb3dFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGNvbnN0IHZpc2libGVDb2x1bW5JbmRleCA9IHNlbGVjdGVkTm9kZS5jb2x1bW47XG4gICAgICAgIGNvbnN0IGN1cnJlbnRSb3dJbmRleCA9IHNlbGVjdGVkTm9kZS5yb3c7XG4gICAgICAgIGlmIChwcmV2RWxlbSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZU5hbWUgPSAgcHJldkVsZW0uY2hpbGRyZW5bMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzRWxlbUNoaWxkR3JpZCA9ICBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaWd4LWNoaWxkLWdyaWQtcm93JztcbiAgICAgICAgICAgIGlmIChpc0VsZW1DaGlsZEdyaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldkNoaWxkKHByZXZFbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIHRoaXMuZ3JpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyaWQucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRseSBuYXZpZ2F0aW5nIGluIGNoaWxkIGdyaWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmF2aWdhdGVVcEluQ2hpbGQocm93RWxlbWVudCwgY3VycmVudFJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlVXAocm93RWxlbWVudCwgc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJvd0luZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgc2NlbmFyaW8gd2hlbiBwcmV2IGl0ZW0gaXMgY2hpbGQgZ3JpZCBidXQgaXMgbm90IHlldCBpbiB2aWV3XG4gICAgICAgICAgICBjb25zdCBpc1ByZXZDaGlsZEdyaWQgPSB0aGlzLmdldElzQ2hpbGRBdEluZGV4KGN1cnJlbnRSb3dJbmRleCAtIDEpO1xuICAgICAgICAgICAgaWYgKCFpc1ByZXZDaGlsZEdyaWQpIHtcbiAgICAgICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZVVwKHJvd0VsZW1lbnQsIHNlbGVjdGVkTm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZCh0aGlzLmdyaWQsIC1yb3dFbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93RWxlbWVudCA9IHRoaXMuZ2V0Um93QnlJbmRleChjdXJyZW50Um93SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVVwKHJvd0VsZW1lbnQsIHNlbGVjdGVkTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JpZC5wYXJlbnQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIGN1cnJlbnRSb3dJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIG1vdmUgdG8gcHJldiByb3cgaW4gc2libGluZyBsYXlvdXQgb3IgcGFyZW50XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXYodmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgbmF2aWdhdGVEb3duKHJvd0VsZW1lbnQsIHNlbGVjdGVkTm9kZTogSVNlbGVjdGlvbk5vZGUpIHtcbiAgICAgICAgY29uc3QgbmV4dEVsZW0gPSByb3dFbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgY29uc3QgdmlzaWJsZUNvbHVtbkluZGV4ID0gc2VsZWN0ZWROb2RlLmNvbHVtbjtcbiAgICAgICAgY29uc3QgY3VycmVudFJvd0luZGV4ID0gc2VsZWN0ZWROb2RlLnJvdztcbiAgICAgICAgaWYgKG5leHRFbGVtKSB7XG4gICAgICAgICAgICAvLyBuZXh0IGVsZW0gaXMgaW4gRE9NXG4gICAgICAgICAgICBjb25zdCBub2RlTmFtZSA9ICBuZXh0RWxlbS5jaGlsZHJlblswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgaXNOZXh0RWxlbUNoaWxkR3JpZCA9ICBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaWd4LWNoaWxkLWdyaWQtcm93JztcbiAgICAgICAgICAgIGlmIChpc05leHRFbGVtQ2hpbGRHcmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHRDaGlsZChuZXh0RWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCB0aGlzLmdyaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50bHkgbmF2aWdhdGluZyBpbiBjaGlsZCBncmlkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25hdmlnYXRlRG93bkluQ2hpbGQocm93RWxlbWVudCwgY3VycmVudFJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlRG93bihyb3dFbGVtZW50LCBzZWxlY3RlZE5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50Um93SW5kZXggIT09IHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JPZi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgLy8gc2Nyb2xsIG5leHQgaW4gdmlld1xuICAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlRG93bihyb3dFbGVtZW50LCBzZWxlY3RlZE5vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JpZC5wYXJlbnQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIGN1cnJlbnRSb3dJbmRleCA9PT0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIHRvIG5leHQgcm93IGluIHNpYmxpbmcgbGF5b3V0IG9yIGluIHBhcmVudFxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0KHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbmF2aWdhdGVUb3AodmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmdyaWQucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBuYXZpZ2F0aW5nIGluIGNoaWxkXG4gICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbFNjcm9sbCA9IHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpO1xuICAgICAgICAgICAgY29uc3QgY2VsbFNlbGVjdG9yID0gdGhpcy5nZXRDZWxsU2VsZWN0b3IodmlzaWJsZUNvbHVtbkluZGV4KTtcblxuICAgICAgICAgICAgaWYgKHZlcnRpY2FsU2Nyb2xsLnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzU2Nyb2xsQ2VsbEluVmlldyh2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQodGhpcy5ncmlkLCAndG9wJyxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gdGhpcy5ncmlkLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke2NlbGxTZWxlY3Rvcn1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzU2Nyb2xsQ2VsbEluVmlldyh2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZVRvcCh2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG5hdmlnYXRlQm90dG9tKHZpc2libGVDb2x1bW5JbmRleCkge1xuICAgICAgICAvLyBoYW5kbGUgc2NlbmFyaW8gd2hlcmUgbGFzdCBpbmRleCBpcyBjaGlsZCBncmlkXG4gICAgICAgIC8vIGluIHRoYXQgY2FzZSBmb2N1cyBjZWxsIGluIGxhc3QgZGF0YSByb3dcbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmICh0aGlzLmdldElzQ2hpbGRBdEluZGV4KGxhc3RJbmRleCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEluZGV4ID0gbGFzdEluZGV4IC0gMTtcbiAgICAgICAgICAgIGNvbnN0IHNjclRvcFBvc2l0aW9uID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFNjcm9sbEZvckluZGV4KHRhcmdldEluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHZlcnRpY2FsU2Nyb2xsID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCk7XG4gICAgICAgICAgICBjb25zdCBjZWxsU2VsZWN0b3IgPSB0aGlzLmdldENlbGxTZWxlY3Rvcih2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgaWYgKHZlcnRpY2FsU2Nyb2xsLnNjcm9sbFRvcCA9PT0gc2NyVG9wUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IHRoaXMuZ2V0Um93QnlJbmRleCh0YXJnZXRJbmRleCkucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICAgICAgICAgYCR7Y2VsbFNlbGVjdG9yfVtkYXRhLXZpc2libGVJbmRleD1cIiR7dmlzaWJsZUNvbHVtbkluZGV4fVwiXWApO1xuICAgICAgICAgICAgICAgIGNlbGxzW2NlbGxzLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZCh0aGlzLmdyaWQsIHNjclRvcFBvc2l0aW9uIC0gdmVydGljYWxTY3JvbGwuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLmdldFJvd0J5SW5kZXgodGFyZ2V0SW5kZXgpLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7IGNlbGxzW2NlbGxzLmxlbmd0aCAtIDFdLmZvY3VzKCk7IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlQm90dG9tKHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGdvVG9MYXN0Q2VsbCgpIHtcbiAgICAgICAgLy8gaGFuZGxlIHNjZW5hcmlvIHdoZXJlIGxhc3QgaW5kZXggaXMgY2hpbGQgZ3JpZFxuICAgICAgICAvLyBpbiB0aGF0IGNhc2UgZm9jdXMgbGFzdCBjZWxsIGluIGxhc3QgZGF0YSByb3dcbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmICh0aGlzLmdldElzQ2hpbGRBdEluZGV4KGxhc3RJbmRleCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEluZGV4ID0gbGFzdEluZGV4IC0gMTtcbiAgICAgICAgICAgIGNvbnN0IHNjclRvcFBvc2l0aW9uID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFNjcm9sbEZvckluZGV4KHRhcmdldEluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHZlcnRpY2FsU2Nyb2xsID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCk7XG4gICAgICAgICAgICBpZiAodmVydGljYWxTY3JvbGwuc2Nyb2xsVG9wID09PSBzY3JUb3BQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMub25LZXlkb3duRW5kKHRhcmdldEluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHRoaXMuZ3JpZCwgc2NyVG9wUG9zaXRpb24gLSB2ZXJ0aWNhbFNjcm9sbC5zY3JvbGxUb3AsXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlkb3duRW5kKHRhcmdldEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5nb1RvTGFzdENlbGwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvbktleWRvd25FbmQocm93SW5kZXgsIGlzU3VtbWFyeSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh0aGlzLmdyaWQucGFyZW50ICYmICFpc1N1bW1hcnkpIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBzY2VuYXJpbyB3aGVyZSBsYXN0IGNoaWxkIHJvdyBtaWdodCBub3QgYmUgaW4gdmlld1xuICAgICAgICAgICAgLy8gcGFyZW50IHNob3VsZCBzY3JvbGwgdG8gY2hpbGQgZ3JpZCBlbmRcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29udGFpbmVyID0gdGhpcy5ncmlkLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgY29uc3QgZGlmZkJvdHRvbSA9XG4gICAgICAgICAgICBjaGlsZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSB0aGlzLmdyaWQucm9vdEdyaWQubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLmdyaWQuZ2V0Um93QnlJbmRleChyb3dJbmRleCkuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgY29uc3Qgcm93Qm90dG9tID0gcm93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IHJvd0lzVmlzaWJsZSA9IHJvd0JvdHRvbSA8PSB0aGlzLmdyaWQucm9vdEdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgICAgICBjb25zdCBncmlkVG9wID0gdGhpcy5fZ2V0TWF4VG9wKHRoaXMuZ3JpZCk7XG4gICAgICAgICAgICBjb25zdCBkaWZmVG9wID0gcm93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtXG4gICAgICAgICAgICByb3cub2Zmc2V0SGVpZ2h0IC0gZ3JpZFRvcDtcbiAgICAgICAgICAgIGNvbnN0IGVuZElzVmlzaWJsZSA9IGRpZmZCb3R0b20gPD0gMDtcbiAgICAgICAgICAgIGNvbnN0IHRvcFZpc2libGUgPSBkaWZmVG9wID49IDA7XG4gICAgICAgICAgICBpZiAoIWVuZElzVmlzaWJsZSAmJiAhcm93SXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHRoaXMuZ3JpZC5wYXJlbnQsIGRpZmZCb3R0b20sICgpID0+IHN1cGVyLm9uS2V5ZG93bkVuZChyb3dJbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdG9wVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjckdyaWQgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKS5zY3JvbGxUb3AgIT09IDAgPyB0aGlzLmdyaWQgOlxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TmV4dFNjcm9sbGFibGUodGhpcy5ncmlkKS5ncmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvcEdyaWQgPSBzY3JHcmlkLnRib2R5Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wID5cbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQucm9vdEdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPyBzY3JHcmlkIDogdGhpcy5ncmlkLnJvb3RHcmlkO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZCh0b3BHcmlkLCBkaWZmVG9wLCAoKSA9PiBzdXBlci5vbktleWRvd25FbmQocm93SW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VwZXIub25LZXlkb3duRW5kKHJvd0luZGV4LCBpc1N1bW1hcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIub25LZXlkb3duRW5kKHJvd0luZGV4LCBpc1N1bW1hcnkpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZ29Ub0ZpcnN0Q2VsbCgpIHtcbiAgICAgICAgY29uc3QgdmVydGljYWxTY3JvbGwgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKTtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbFNjcm9sbCA9IHRoaXMuZ3JpZC5kYXRhUm93TGlzdC5maXJzdC52aXJ0RGlyUm93LmdldEhvcml6b250YWxTY3JvbGwoKTtcbiAgICAgICAgaWYgKHZlcnRpY2FsU2Nyb2xsLnNjcm9sbFRvcCA9PT0gMCAmJiB0aGlzLmdyaWQucGFyZW50KSB7XG4gICAgICAgICAgICAvLyBzY3JvbGwgcGFyZW50IHNvIHRoYXQgY3VycmVudCBjaGlsZCBpcyBpbiB2aWV3XG4gICAgICAgICAgICBpZiAoIWhvcml6b250YWxTY3JvbGwuY2xpZW50V2lkdGggfHwgcGFyc2VJbnQoaG9yaXpvbnRhbFNjcm9sbC5zY3JvbGxMZWZ0LCAxMCkgPD0gMSB8fCB0aGlzLmdyaWQucGlubmVkQ29sdW1ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlVG9wKDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvcml6b250YWxTY3JvbGwodGhpcy5ncmlkLmRhdGFSb3dMaXN0LmZpcnN0LmluZGV4KS5zY3JvbGxUbygwKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQucGFyZW50VmlydERpci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgICAgICAucGlwZShmaXJzdCgpKVxuICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGVUb3AoMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuZ29Ub0ZpcnN0Q2VsbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHBlcmZvcm1UYWIoY3VycmVudFJvd0VsLCBzZWxlY3RlZE5vZGU6IElTZWxlY3Rpb25Ob2RlKSB7XG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gc2VsZWN0ZWROb2RlLnJvdztcbiAgICAgICAgY29uc3QgdmlzaWJsZUNvbHVtbkluZGV4ID0gc2VsZWN0ZWROb2RlLmNvbHVtbjtcbiAgICAgICAgY29uc3QgaXNTdW1tYXJ5Um93ID0gc2VsZWN0ZWROb2RlLmlzU3VtbWFyeVJvdztcbiAgICAgICAgY29uc3Qgc3VtbWFyeVJvd3MgPSB0aGlzLmdyaWQuc3VtbWFyaWVzUm93TGlzdC50b0FycmF5KCk7XG4gICAgICAgIGNvbnN0IGhhc1N1bW1hcmllcyA9IHN1bW1hcnlSb3dzLmxlbmd0aCA+IDA7XG4gICAgICAgIGNvbnN0IGlzTGFzdERhdGFSb3cgPSByb3dJbmRleCA9PT0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IG5leHRJc0RhdGFSb3cgPSB0aGlzLmdyaWQuZGF0YVJvd0xpc3QuZmluZChyb3cgPT4gcm93LmluZGV4ID09PSByb3dJbmRleCArIDEpIDtcbiAgICAgICAgY29uc3QgaXNMYXN0Q29sdW1uID0gIHRoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnNbdGhpcy5ncmlkLnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXggPT09IHZpc2libGVDb2x1bW5JbmRleDtcbiAgICAgICAgY29uc3QgaXNMYXN0U3VtbWFyeVJvdyA9IGhhc1N1bW1hcmllcyAmJiBpc1N1bW1hcnlSb3c7XG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHJvd0luZGV4ICsgMTtcbiAgICAgICAgY29uc3QgdmlydCA9IHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgaXNOZXh0Q2hpbGQgPSBuZXh0SW5kZXggPD0gdmlydC5pZ3hGb3JPZi5sZW5ndGggLSAxICYmXG4gICAgICAgICAgICB0aGlzLmdyaWQuaXNDaGlsZEdyaWRSZWNvcmQodmlydC5pZ3hGb3JPZltuZXh0SW5kZXhdKTtcbiAgICAgICAgaWYgKCFuZXh0SXNEYXRhUm93ICYmICEoaXNMYXN0RGF0YVJvdyAmJiBoYXNTdW1tYXJpZXMpICYmIGlzTGFzdENvbHVtbiAmJiAhaXNTdW1tYXJ5Um93KSB7XG4gICAgICAgICAgICAvLyBuYXZpZ2F0aW5nIGluIGNoaWxkLCBuZXh0IGlzIG5vdCBzdW1tYXJ5XG4gICAgICAgICAgICBjb25zdCBjaGlsZENvbnRhaW5lciA9IHRoaXMuZ2V0Q2hpbGRHcmlkUm93Q29udGFpbmVyKCk7XG4gICAgICAgICAgICBjb25zdCBuZXh0SXNTaWJsaW5nQ2hpbGQgPSB0aGlzLmdyaWQucGFyZW50ID8gISFjaGlsZENvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcgOiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChuZXh0SXNTaWJsaW5nQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dENoaWxkRE9NRWxlbShjaGlsZENvbnRhaW5lciwgdGhpcy5ncmlkLnBhcmVudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTmV4dENoaWxkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNJblZpZXcgPSB2aXJ0LnN0YXRlLnN0YXJ0SW5kZXggKyB2aXJ0LnN0YXRlLmNodW5rU2l6ZSA+IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW5WaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZCh0aGlzLmdyaWQsICduZXh0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHRDaGlsZERPTUVsZW0oY3VycmVudFJvd0VsLCB0aGlzLmdyaWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dENoaWxkRE9NRWxlbShjdXJyZW50Um93RWwsIHRoaXMuZ3JpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlRG93bihjdXJyZW50Um93RWwsIHsgcm93OiAgcm93SW5kZXgsIGNvbHVtbjogMH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzTGFzdFN1bW1hcnlSb3cgJiYgaXNMYXN0Q29sdW1uICYmIHRoaXMuZ3JpZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIG5hdmlnYXRpbmcgaW4gY2hpbGQgc3VtbWFyeSwgbmV4dCBpcyBwYXJlbnQgc3VtbWFyeSBvciBuZXh0IHBhcmVudCByb3dcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ3JpZC5wYXJlbnQ7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRIYXNTdW1tYXJ5ID0gcGFyZW50LnN1bW1hcmllc1Jvd0xpc3QudG9BcnJheSgpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRSb3dJbmRleCA9IHBhcnNlSW50KFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2xvc2VzdEVsZW1CeVRhZyhjdXJyZW50Um93RWwsICdpZ3gtY2hpbGQtZ3JpZC1yb3cnKS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1yb3dpbmRleCcpLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBpc0xhc3RSb3dJblBhcmVudCA9IHBhcmVudC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JPZi5sZW5ndGggLSAxID09PSBwYXJlbnRSb3dJbmRleDtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG5leHQgaXMgc2libGluZ1xuICAgICAgICAgICAgY29uc3QgY2hpbGRSb3dDb250YWluZXIgPSB0aGlzLmdldENoaWxkR3JpZFJvd0NvbnRhaW5lcih0aGlzLmdyaWQpO1xuICAgICAgICAgICAgY29uc3QgbmV4dElzU2libGluZ0NoaWxkID0gISFjaGlsZFJvd0NvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBpZiAoaXNMYXN0Um93SW5QYXJlbnQgJiYgcGFyZW50SGFzU3VtbWFyeSAmJiAhbmV4dElzU2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgLy8gbmV4dCBpcyBwYXJlbnQgc3VtbWFyeVxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFN1bW1hcnkgPSBwYXJlbnQuc3VtbWFyaWVzUm93TGlzdC50b0FycmF5KClbMF0ubmF0aXZlRWxlbWVudDtcbiAgICAgICAgICAgICAgICBwYXJlbnQubmF2aWdhdGlvbi5mb2N1c05leHRSb3cocGFyZW50U3VtbWFyeSwgMCwgdGhpcy5ncmlkLnJvb3RHcmlkLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbmV4dCBpcyBzaWJsaW5nIG9yIHBhcmVudFxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgIGlmIChpc0xhc3REYXRhUm93ICYmIGhhc1N1bW1hcmllcyAmJiBpc0xhc3RDb2x1bW4gJiYgdGhpcy5ncmlkLnBhcmVudCkge1xuICAgICAgICAgICAgLy8gbmF2aWdhdGluZyBpbiBjaGlsZCByb3dzLCBuZXh0IGlzIGNoaWxkIGdyaWQncyBzdW1tYXJ5IHJvd1xuICAgICAgICAgICB0aGlzLmZvY3VzTmV4dFJvdyhzdW1tYXJ5Um93c1swXS5uYXRpdmVFbGVtZW50LCAwLCB0aGlzLmdyaWQucGFyZW50LCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnBlcmZvcm1UYWIoY3VycmVudFJvd0VsLCBzZWxlY3RlZE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb2N1c05leHRDaGlsZERPTUVsZW0oY3VycmVudFJvd0VsLCBncmlkKSB7XG4gICAgICAgIGNvbnN0IGdyaWRFbGVtID0gY3VycmVudFJvd0VsLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKTtcbiAgICAgICAgY29uc3QgY2hpbGRHcmlkSUQgPSBncmlkRWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgIGNvbnN0IGNoaWxkR3JpZCA9IHRoaXMuZ2V0Q2hpbGRHcmlkKGNoaWxkR3JpZElELCBncmlkKTtcbiAgICAgICAgaWYgKGNoaWxkR3JpZC5hbGxvd0ZpbHRlcmluZyAmJiBjaGlsZEdyaWQuZmlsdGVyTW9kZSA9PT0gRmlsdGVyTW9kZS5xdWlja0ZpbHRlcikge1xuICAgICAgICAgICAgY2hpbGRHcmlkLm5hdmlnYXRpb24ubW92ZUZvY3VzVG9GaWx0ZXJDZWxsKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9jdXNOZXh0Q2hpbGQoY3VycmVudFJvd0VsLm5leHRFbGVtZW50U2libGluZywgMCwgZ3JpZCk7XG4gICAgfVxuXG4gICAgcHVibGljIG5hdmlnYXRlUHJldkZpbHRlckNlbGwoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQsIGV2ZW50QXJncykge1xuICAgICAgICBpZiAoY29sdW1uLnZpc2libGVJbmRleCA9PT0gMCAmJiB0aGlzLmdyaWQucGFyZW50KSB7XG4gICAgICAgICAgICBldmVudEFyZ3MucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxldCB0YXJnZXRHcmlkID0gdGhpcy5ncmlkLnBhcmVudDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZTaWJsaW5nQ2hpbGQgPSB0aGlzLmdldENoaWxkR3JpZFJvd0NvbnRhaW5lcigpLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBpZiAocHJldlNpYmxpbmdDaGlsZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdyaWRFbGVtID0gcHJldlNpYmxpbmdDaGlsZC5xdWVyeVNlbGVjdG9yQWxsKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKVswXTtcbiAgICAgICAgICAgICAgICB0YXJnZXRHcmlkID0gdGhpcy5nZXRDaGlsZEdyaWQoZ3JpZEVsZW0uZ2V0QXR0cmlidXRlKCdpZCcpLCB0aGlzLmdyaWQucGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2KHRhcmdldEdyaWQudW5waW5uZWRDb2x1bW5zW3RhcmdldEdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5uYXZpZ2F0ZVByZXZGaWx0ZXJDZWxsKGNvbHVtbiwgZXZlbnRBcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZU5leHRGaWx0ZXJDZWxsKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50LCBldmVudEFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29scyA9IHRoaXMuZ3JpZC5maWx0ZXJpbmdTZXJ2aWNlLnVucGlubmVkRmlsdGVyYWJsZUNvbHVtbnM7XG4gICAgICAgIGNvbnN0IG5leHRGaWx0ZXJhYmxlSW5kZXggPSBjb2xzLmluZGV4T2YoY29sdW1uKSArIDE7XG4gICAgICAgIGlmIChuZXh0RmlsdGVyYWJsZUluZGV4ID49IHRoaXMuZ3JpZC5maWx0ZXJpbmdTZXJ2aWNlLnVucGlubmVkRmlsdGVyYWJsZUNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBuZXh0IGlzIG5vdCBmaWx0ZXIgY2VsbFxuICAgICAgICAgICAgY29uc3QgZGF0YVJvd3MgPSB0aGlzLmdyaWQucm93TGlzdC50b0FycmF5KCk7XG4gICAgICAgICAgICBjb25zdCBoYXNSb3dzID0gZGF0YVJvd3MubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgY29uc3Qgc3VtbWFyeVJvd3MgPSB0aGlzLmdyaWQuc3VtbWFyaWVzUm93TGlzdC50b0FycmF5KCk7XG4gICAgICAgICAgICBjb25zdCBoYXNTdW1tYXJpZXMgPSBzdW1tYXJ5Um93cy5sZW5ndGggPiAwICYmIHN1bW1hcnlSb3dzWzBdLnN1bW1hcnlDZWxscy5sZW5ndGggPiAwO1xuICAgICAgICAgICAgaWYgKGhhc1Jvd3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dFJvdyhkYXRhUm93c1swXS5uYXRpdmVFbGVtZW50LCAwLCB0aGlzLmdyaWQsIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzU3VtbWFyaWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHRSb3coc3VtbWFyeVJvd3NbMF0ubmF0aXZlRWxlbWVudCwgMCwgdGhpcy5ncmlkLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHQoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudEFyZ3MucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlTmV4dEZpbHRlckNlbGwoY29sdW1uLCBldmVudEFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHBlcmZvcm1TaGlmdFRhYktleShjdXJyZW50Um93RWwsIHNlbGVjdGVkTm9kZTogSVNlbGVjdGlvbk5vZGUpIHtcbiAgICAgICAgY29uc3Qgcm93SW5kZXggPSBzZWxlY3RlZE5vZGUucm93O1xuICAgICAgICBjb25zdCB2aXNpYmxlQ29sdW1uSW5kZXggPSBzZWxlY3RlZE5vZGUuY29sdW1uO1xuICAgICAgICBjb25zdCBpc1N1bW1hcnkgPSBzZWxlY3RlZE5vZGUuaXNTdW1tYXJ5Um93O1xuICAgICAgICBpZiAodmlzaWJsZUNvbHVtbkluZGV4ID09PSAwICYmIHJvd0luZGV4ID09PSAwICYmIHRoaXMuZ3JpZC5wYXJlbnQgJiYgIWlzU3VtbWFyeSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZC5hbGxvd0ZpbHRlcmluZyAmJiB0aGlzLmdyaWQuZmlsdGVyTW9kZSA9PT0gRmlsdGVyTW9kZS5xdWlja0ZpbHRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZUZvY3VzVG9GaWx0ZXJDZWxsKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZTaWJsaW5nQ2hpbGQgPSB0aGlzLmdldENoaWxkR3JpZFJvd0NvbnRhaW5lcigpLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZTaWJsaW5nQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JpZEVsZW0gPSBwcmV2U2libGluZ0NoaWxkLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lneC1oaWVyYXJjaGljYWwtZ3JpZCcpWzBdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1TaGlmdFRhYkludG9DaGlsZChncmlkRWxlbSwgY3VycmVudFJvd0VsLCByb3dJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsTm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogIHJvd0luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmdyaWQucGFyZW50LnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQucGFyZW50LnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVVwKGN1cnJlbnRSb3dFbCwgc2VsTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZpc2libGVDb2x1bW5JbmRleCA9PT0gMCAmJiBjdXJyZW50Um93RWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJlxuICAgICAgICAgICAgY3VycmVudFJvd0VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2hpbGRyZW5bMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaWd4LWNoaWxkLWdyaWQtcm93Jykge1xuICAgICAgICAgICAgY29uc3QgZ3JpZEVsZW0gPSB0aGlzLmdldExhc3RHcmlkRWxlbShjdXJyZW50Um93RWwucHJldmlvdXNFbGVtZW50U2libGluZyk7XG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1TaGlmdFRhYkludG9DaGlsZChncmlkRWxlbSwgY3VycmVudFJvd0VsLCByb3dJbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmlzaWJsZUNvbHVtbkluZGV4ID09PSAwICYmIGlzU3VtbWFyeSkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFJvd0luZGV4ID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBpZiAobGFzdFJvd0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIG5vIGNoaWxkIGRhdGFcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkLmFsbG93RmlsdGVyaW5nICYmIHRoaXMuZ3JpZC5maWx0ZXJNb2RlID09PSBGaWx0ZXJNb2RlLnF1aWNrRmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUZvY3VzVG9GaWx0ZXJDZWxsKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsTm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogIHJvd0luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmdyaWQucGFyZW50LnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQucGFyZW50LnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVVwKGN1cnJlbnRSb3dFbCwgc2VsTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5nZXRJc0NoaWxkQXRJbmRleChsYXN0Um93SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIuZ29Ub0xhc3RDZWxsKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjclRvcFBvc2l0aW9uID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFNjcm9sbEZvckluZGV4KGxhc3RSb3dJbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVydGljYWxTY3JvbGwgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICBpZiAodmVydGljYWxTY3JvbGwuc2Nyb2xsVG9wID09PSBzY3JUb3BQb3NpdGlvbiB8fCBpc05hTihzY3JUb3BQb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvc2VzdENoaWxkID0gdGhpcy5nZXRMYXN0R3JpZEVsZW0odGhpcy5ncmlkLmdldFJvd0J5SW5kZXgobGFzdFJvd0luZGV4KS5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1TaGlmdFRhYkludG9DaGlsZChjbG9zZXN0Q2hpbGQsIGN1cnJlbnRSb3dFbCwgcm93SW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZCh0aGlzLmdyaWQsIHNjclRvcFBvc2l0aW9uIC0gdmVydGljYWxTY3JvbGwuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RDaGlsZCA9IHRoaXMuZ2V0TGFzdEdyaWRFbGVtKHRoaXMuZ3JpZC5nZXRSb3dCeUluZGV4KGxhc3RSb3dJbmRleCkubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1TaGlmdFRhYkludG9DaGlsZChjbG9zZXN0Q2hpbGQsIGN1cnJlbnRSb3dFbCwgcm93SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIucGVyZm9ybVNoaWZ0VGFiS2V5KGN1cnJlbnRSb3dFbCwgc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TGFzdEdyaWRFbGVtKHRyQ29udGFpbmVyKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdHJDb250YWluZXIuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGNsb3Nlc3RDaGlsZCA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdO1xuICAgICAgICByZXR1cm4gY2xvc2VzdENoaWxkO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGVyZm9ybVNoaWZ0VGFiSW50b0NoaWxkKGdyaWRFbGVtLCBjdXJyZW50Um93RWwsIHJvd0luZGV4KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkR3JpZElEID0gZ3JpZEVsZW0uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRHcmlkID0gdGhpcy5nZXRDaGlsZEdyaWQoY2hpbGRHcmlkSUQsIHRoaXMuZ3JpZCkgfHwgdGhpcy5nZXRDaGlsZEdyaWQoY2hpbGRHcmlkSUQsIHRoaXMuZ3JpZC5wYXJlbnQpO1xuICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gY2hpbGRHcmlkLnVucGlubmVkQ29sdW1uc1tjaGlsZEdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlSb3dzID0gY2hpbGRHcmlkLnN1bW1hcmllc1Jvd0xpc3QudG9BcnJheSgpO1xuICAgICAgICAgICAgaWYgKHN1bW1hcnlSb3dzLmxlbmd0aCA+IDAgJiYgc3VtbWFyeVJvd3NbMF0uc3VtbWFyeUNlbGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIGZvY3VzIHRvIGxhc3Qgc3VtbWFyeSByb3cgY2VsbFxuICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlSb3cgPSBzdW1tYXJ5Um93c1swXS5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2Um93KHN1bW1hcnlSb3csIGxhc3RJbmRleCwgY2hpbGRHcmlkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRHcmlkLnJvd0xpc3QudG9BcnJheSgpLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgIGNoaWxkR3JpZC5hbGxvd0ZpbHRlcmluZyAmJiBjaGlsZEdyaWQuZmlsdGVyTW9kZSA9PT0gRmlsdGVyTW9kZS5xdWlja0ZpbHRlcikge1xuICAgICAgICAgICAgICAgICAvLyBtb3ZlIHRvIGZpbHRlciBjZWxsXG4gICAgICAgICAgICAgICAgY2hpbGRHcmlkLm5hdmlnYXRpb24ubW92ZUZvY3VzVG9GaWx0ZXJDZWxsKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG1vdmUgdG8gbmV4dCBjZWxsXG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVVwKGN1cnJlbnRSb3dFbCwgeyByb3cgOiByb3dJbmRleCwgY29sdW1uOiBsYXN0SW5kZXh9KTtcbiAgICAgICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9mb2N1c1Njcm9sbENlbGxJblZpZXcodmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNlbGxTZWxlY3RvciA9IHRoaXMuZ2V0Q2VsbFNlbGVjdG9yKHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gdGhpcy5ncmlkLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgIGAke2NlbGxTZWxlY3Rvcn1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKTtcbiAgICAgICAgY29uc3QgY2VsbCA9IGNlbGxzWzBdO1xuICAgICAgICBjb25zdCBjaGlsZENvbnRhaW5lciA9IHRoaXMuZ3JpZC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgY29uc3Qgc2NyVG9wID0gdGhpcy5ncmlkLnBhcmVudC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpLnNjcm9sbFRvcDtcbiAgICAgICAgY29uc3QgZGMgPSBjaGlsZENvbnRhaW5lci5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHNjcldpdGggPSBwYXJzZUludChkYy5zdHlsZS50b3AsIDEwKTtcbiAgICAgICAgaWYgKHNjclRvcCA9PT0gMCB8fCBzY3JXaXRoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBjZWxsIGlzIGluIHZpZXdcbiAgICAgICAgICAgIGNlbGwuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNjcm9sbCBwYXJlbnQgc28gdGhhdCBjZWxsIGlzIGluIHZpZXdcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZCh0aGlzLmdyaWQucGFyZW50LCBzY3JXaXRoICwgKCkgPT4gY2VsbC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZm9jdXNOZXh0Q2hpbGQoZWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCBncmlkKSB7XG4gICAgICAgIGNvbnN0IGdyaWRFbGVtID0gZWxlbS5xdWVyeVNlbGVjdG9yKCdpZ3gtaGllcmFyY2hpY2FsLWdyaWQnKTtcbiAgICAgICAgY29uc3QgY2hpbGRHcmlkSUQgPSBncmlkRWxlbS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgIGNvbnN0IGNoaWxkR3JpZCA9IHRoaXMuZ2V0Q2hpbGRHcmlkKGNoaWxkR3JpZElELCBncmlkKTtcblxuICAgICAgICBpZiAoY2hpbGRHcmlkLnJvd0xpc3QudG9BcnJheSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5mb2N1c05leHQodmlzaWJsZUNvbHVtbkluZGV4LCBjaGlsZEdyaWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGNvbHVtbiBpbmRleCBzaW5jZSB0aGUgbmV4dCBjaGlsZCBjYW4gaGF2ZSBpbiBnZW5lcmFsIGxlc3MgY29sdW1ucyB0aGFuIHZpc2libGVDb2x1bW5JbmRleCB2YWx1ZS5cbiAgICAgICAgY29uc3QgbGFzdENlbGxJbmRleCA9IGNoaWxkR3JpZC51bnBpbm5lZENvbHVtbnNbY2hpbGRHcmlkLnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXg7XG4gICAgICAgIHZpc2libGVDb2x1bW5JbmRleCA9IE1hdGgubWluKGxhc3RDZWxsSW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCk7XG5cbiAgICAgICAgaWYgKGNoaWxkR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zdGF0ZS5zdGFydEluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBzY3JvbGwgdG8gdG9wXG4gICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQoY2hpbGRHcmlkLCAndG9wJywgKCkgPT4gdGhpcy5mb2N1c05leHRSb3coZWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCBjaGlsZEdyaWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0Um93KGVsZW0sIHZpc2libGVDb2x1bW5JbmRleCwgY2hpbGRHcmlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGZvY3VzUHJldkNoaWxkKGVsZW0sIHZpc2libGVDb2x1bW5JbmRleCwgZ3JpZCkge1xuICAgICAgICBjb25zdCBncmlkcyA9IFtdO1xuICAgICAgICBjb25zdCBncmlkRWxlbXMgPSBBcnJheS5mcm9tKGVsZW0ucXVlcnlTZWxlY3RvckFsbCgnaWd4LWhpZXJhcmNoaWNhbC1ncmlkJykpO1xuICAgICAgICBjb25zdCBjaGlsZExldmVsID0gZ3JpZC5jaGlsZExheW91dExpc3QuZmlyc3QubGV2ZWw7XG4gICAgICAgIGdyaWRFbGVtcy5mb3JFYWNoKChoZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50Um93ID0gdGhpcy5nZXRDbG9zZXN0RWxlbUJ5VGFnKGhnLCAnaWd4LWNoaWxkLWdyaWQtcm93Jyk7XG4gICAgICAgICAgICBpZiAocGFyZW50Um93ICYmIHBhcnNlSW50KHBhcmVudFJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtbGV2ZWwnKSwgMTApID09PSBjaGlsZExldmVsKSB7XG4gICAgICAgICAgICAgICAgZ3JpZHMucHVzaChoZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBncmlkRWxlbSA9IGdyaWRzW2dyaWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCBjaGlsZEdyaWRJRCA9IGdyaWRFbGVtLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgY29uc3QgY2hpbGRHcmlkID0gdGhpcy5nZXRDaGlsZEdyaWQoY2hpbGRHcmlkSUQsIGdyaWQpO1xuXG4gICAgICAgIGlmIChjaGlsZEdyaWQucm93TGlzdC50b0FycmF5KCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzUHJldih2aXNpYmxlQ29sdW1uSW5kZXgsIGNoaWxkR3JpZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgY29sdW1uIGluZGV4IHNpbmNlIHRoZSBwcmV2aW91cyBjaGlsZCBjYW4gaGF2ZSBpbiBnZW5lcmFsIGxlc3MgY29sdW1ucyB0aGFuIHZpc2libGVDb2x1bW5JbmRleCB2YWx1ZS5cbiAgICAgICAgY29uc3QgbGFzdENlbGxJbmRleCA9IGNoaWxkR3JpZC51bnBpbm5lZENvbHVtbnNbY2hpbGRHcmlkLnVucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXS52aXNpYmxlSW5kZXg7XG4gICAgICAgIHZpc2libGVDb2x1bW5JbmRleCA9IE1hdGgubWluKGxhc3RDZWxsSW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCk7XG5cbiAgICAgICAgY29uc3QgaXNTY3JvbGxlZFRvQm90dG9tID0gdGhpcy5faXNTY3JvbGxlZFRvQm90dG9tKGNoaWxkR3JpZCk7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGNoaWxkR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JPZi5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoIWlzU2Nyb2xsZWRUb0JvdHRvbSkge1xuICAgICAgICAgICAgLy8gc2Nyb2xsIHRvIGVuZFxuICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKGNoaWxkR3JpZCwgJ2JvdHRvbScsICgpID0+IHRoaXMuZm9jdXNQcmV2Q2hpbGQoZWxlbSwgdmlzaWJsZUNvbHVtbkluZGV4LCBncmlkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0Um93SW5DaGlsZCA9IGNoaWxkR3JpZC5nZXRSb3dCeUluZGV4KGxhc3RJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBpc0NoaWxkR3JpZCA9IGxhc3RSb3dJbkNoaWxkLm5hdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lneC1jaGlsZC1ncmlkLXJvdyc7XG4gICAgICAgICAgICBpZiAoaXNDaGlsZEdyaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldkNoaWxkKGxhc3RSb3dJbkNoaWxkLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZSwgdmlzaWJsZUNvbHVtbkluZGV4LCBjaGlsZEdyaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldlJvdyhsYXN0Um93SW5DaGlsZC5uYXRpdmVFbGVtZW50LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGNoaWxkR3JpZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBmb2N1c1ByZXYodmlzaWJsZUNvbHVtbkluZGV4LCBncmlkPykge1xuICAgICAgICBjb25zdCBjdXJyR3JpZCA9IGdyaWQgfHwgdGhpcy5ncmlkO1xuICAgICAgICBsZXQgcGFyZW50Q29udGFpbmVyID0gdGhpcy5nZXRDaGlsZENvbnRhaW5lcihjdXJyR3JpZCk7XG4gICAgICAgIGxldCBjaGlsZFJvd0NvbnRhaW5lciA9IHRoaXMuZ2V0Q2hpbGRHcmlkUm93Q29udGFpbmVyKGN1cnJHcmlkKTtcbiAgICAgICAgY29uc3QgcHJldklzU2libGluZ0NoaWxkID0gISFjaGlsZFJvd0NvbnRhaW5lci5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICBsZXQgcHJldiA9IGNoaWxkUm93Q29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgcGFyZW50Q29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICBpZiAocHJldklzU2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXZDaGlsZChwcmV2LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGN1cnJHcmlkLnBhcmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2Um93KHByZXYsIHZpc2libGVDb2x1bW5JbmRleCwgY3VyckdyaWQucGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChjdXJyR3JpZC5wYXJlbnQsICdwcmV2JyxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHBhcmVudENvbnRhaW5lciA9IHRoaXMuZ2V0Q2hpbGRDb250YWluZXIoZ3JpZCk7XG4gICAgICAgICAgICBjaGlsZFJvd0NvbnRhaW5lciA9IHRoaXMuZ2V0Q2hpbGRHcmlkUm93Q29udGFpbmVyKGdyaWQpO1xuICAgICAgICAgICAgcHJldiA9IGNoaWxkUm93Q29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgcGFyZW50Q29udGFpbmVyLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBpZiAocHJldklzU2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXZDaGlsZChwcmV2LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGN1cnJHcmlkLnBhcmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2Um93KHByZXYsIHZpc2libGVDb2x1bW5JbmRleCwgY3VyckdyaWQucGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROZXh0UGFyZW50SW5mbyhncmlkKSB7XG4gICAgICAgIC8vIGZpbmQgbmV4dCBwYXJlbnQgdGhhdCBpcyBub3QgYXQgYm90dG9tXG4gICAgICAgIGxldCBjdXJyR3JpZCA9IGdyaWQucGFyZW50O1xuICAgICAgICBsZXQgbmV4dEVsZW0gPSB0aGlzLmdldENoaWxkQ29udGFpbmVyKGdyaWQpLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgd2hpbGUgKCFuZXh0RWxlbSAmJiBjdXJyR3JpZC5wYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG5leHRFbGVtID0gdGhpcy5nZXRDaGlsZENvbnRhaW5lcihjdXJyR3JpZCkubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgY3VyckdyaWQgPSBjdXJyR3JpZC5wYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBncmlkOiBjdXJyR3JpZCwgbmV4dEVsZW1lbnQ6IG5leHRFbGVtfTtcbiAgICB9XG4gICAgcHJpdmF0ZSBnZXROZXh0U2Nyb2xsYWJsZShncmlkKSB7XG4gICAgICAgIGxldCBjdXJyR3JpZCA9IGdyaWQucGFyZW50O1xuICAgICAgICBpZiAoIWN1cnJHcmlkKSB7XG4gICAgICAgICAgICByZXR1cm4ge2dyaWQ6IGdyaWQsIHByZXY6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9uU2Nyb2xsYWJsZSA9IGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCkuc2Nyb2xsVG9wID09PSAwO1xuICAgICAgICBsZXQgcHJldiA9IGdyaWQ7XG4gICAgICAgIHdoaWxlIChub25TY3JvbGxhYmxlICYmIGN1cnJHcmlkLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldiA9IGN1cnJHcmlkO1xuICAgICAgICAgICAgY3VyckdyaWQgPSBjdXJyR3JpZC5wYXJlbnQ7XG4gICAgICAgICAgICBub25TY3JvbGxhYmxlID0gY3VyckdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKS5zY3JvbGxUb3AgPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtncmlkOiBjdXJyR3JpZCwgcHJldjogcHJldiB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9jdXNOZXh0KHZpc2libGVDb2x1bW5JbmRleCwgZ3JpZD8pIHtcbiAgICAgICAgY29uc3QgY3VyckdyaWQgPSBncmlkIHx8IHRoaXMuZ3JpZDtcbiAgICAgICAgY29uc3QgcGFyZW50SW5mbyA9IHRoaXMuZ2V0TmV4dFBhcmVudEluZm8oY3VyckdyaWQpO1xuICAgICAgICBjb25zdCBuZXh0UGFyZW50R3JpZCA9IHBhcmVudEluZm8uZ3JpZDtcbiAgICAgICAgbGV0IG5leHRQYXJlbnRFbGVtID0gcGFyZW50SW5mby5uZXh0RWxlbWVudDtcbiAgICAgICAgbGV0IGNoaWxkUm93Q29udGFpbmVyID0gdGhpcy5nZXRDaGlsZEdyaWRSb3dDb250YWluZXIoY3VyckdyaWQpO1xuICAgICAgICBjb25zdCBuZXh0SXNTaWJsaW5nQ2hpbGQgPSAhIWNoaWxkUm93Q29udGFpbmVyLm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgbGV0IG5leHQgPSBjaGlsZFJvd0NvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcgfHwgbmV4dFBhcmVudEVsZW07XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsU2Nyb2xsID0gbmV4dFBhcmVudEdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKTtcbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgIGlmIChuZXh0SXNTaWJsaW5nQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dENoaWxkKG5leHQsIHZpc2libGVDb2x1bW5JbmRleCwgbmV4dFBhcmVudEdyaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dFJvdyhuZXh0LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQgfHwgbmV4dFBhcmVudEdyaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZlcnRpY2FsU2Nyb2xsLnNjcm9sbFRvcCAhPT1cbiAgICAgICAgICAgIHZlcnRpY2FsU2Nyb2xsLnNjcm9sbEhlaWdodCAtIG5leHRQYXJlbnRHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvckNvbnRhaW5lclNpemUgKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQobmV4dFBhcmVudEdyaWQsICduZXh0JyxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBuZXh0UGFyZW50RWxlbSA9IHBhcmVudEluZm8ubmV4dEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY2hpbGRSb3dDb250YWluZXIgPSB0aGlzLmdldENoaWxkR3JpZFJvd0NvbnRhaW5lcigpO1xuICAgICAgICAgICAgICAgIG5leHQgPSBjaGlsZFJvd0NvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmcgfHwgbmV4dFBhcmVudEVsZW07XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dElzU2libGluZ0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0Q2hpbGQobmV4dCwgdmlzaWJsZUNvbHVtbkluZGV4LCBuZXh0UGFyZW50R3JpZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNOZXh0Um93KG5leHQsIHZpc2libGVDb2x1bW5JbmRleCwgZ3JpZCB8fCBuZXh0UGFyZW50R3JpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBnZXROZXh0U2Nyb2xsYWJsZURvd24oZ3JpZCkge1xuICAgICAgICBsZXQgY3VyckdyaWQgPSBncmlkLnBhcmVudDtcbiAgICAgICAgaWYgKCFjdXJyR3JpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtncmlkOiBncmlkLCBwcmV2OiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNjcm9sbFRvcCA9IGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCkuc2Nyb2xsVG9wO1xuICAgICAgICBsZXQgc2Nyb2xsSGVpZ2h0ID0gY3VyckdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIGxldCBub25TY3JvbGxhYmxlID0gc2Nyb2xsSGVpZ2h0ID09PSAwIHx8XG4gICAgICAgIE1hdGgucm91bmQoc2Nyb2xsVG9wICsgIGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvckNvbnRhaW5lclNpemUpID09PSBzY3JvbGxIZWlnaHQ7XG4gICAgICAgIGxldCBwcmV2ID0gZ3JpZDtcbiAgICAgICAgd2hpbGUgKG5vblNjcm9sbGFibGUgJiYgY3VyckdyaWQucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwcmV2ID0gY3VyckdyaWQ7XG4gICAgICAgICAgICBjdXJyR3JpZCA9IGN1cnJHcmlkLnBhcmVudDtcbiAgICAgICAgICAgIHNjcm9sbFRvcCA9IGN1cnJHcmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCkuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gY3VyckdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgICAgICBub25TY3JvbGxhYmxlID0gc2Nyb2xsSGVpZ2h0ID09PSAwIHx8XG4gICAgICAgICAgICBNYXRoLnJvdW5kKHNjcm9sbFRvcCArICBjdXJyR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JDb250YWluZXJTaXplKSA9PT0gc2Nyb2xsSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7Z3JpZDogY3VyckdyaWQsIHByZXY6IHByZXYgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRNaW5Cb3R0b20oZ3JpZCkge1xuICAgICAgICBsZXQgY3VyckdyaWQgPSBncmlkO1xuICAgICAgICBsZXQgYm90dG9tID0gY3VyckdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIHdoaWxlIChjdXJyR3JpZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJHcmlkID0gY3VyckdyaWQucGFyZW50O1xuICAgICAgICAgICAgYm90dG9tID0gTWF0aC5taW4oYm90dG9tLCBjdXJyR3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJvdHRvbTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRNYXhUb3AoZ3JpZCkge1xuICAgICAgICBsZXQgY3VyckdyaWQgPSBncmlkO1xuICAgICAgICBsZXQgdG9wID0gY3VyckdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgIHdoaWxlIChjdXJyR3JpZC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJHcmlkID0gY3VyckdyaWQucGFyZW50O1xuICAgICAgICAgICAgdG9wID0gTWF0aC5tYXgodG9wLCBjdXJyR3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvcDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzTmV4dFJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQsIGlzU3VtbWFyeT8pIHtcbiAgICAgICAgY29uc3QgY2VsbFNlbGVjdG9yID0gdGhpcy5nZXRDZWxsU2VsZWN0b3IodmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnkpO1xuICAgICAgICBpZiAoZ3JpZC5uYXZpZ2F0aW9uLmlzQ29sdW1uRnVsbHlWaXNpYmxlKHZpc2libGVDb2x1bW5JbmRleCkgJiYgZ3JpZC5uYXZpZ2F0aW9uLmlzQ29sdW1uTGVmdEZ1bGx5VmlzaWJsZSh2aXNpYmxlQ29sdW1uSW5kZXgpKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsID1cbiAgICAgICAgICAgIGVsZW0ucXVlcnlTZWxlY3RvcihgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICBjb25zdCBjbG9zZXN0U2Nyb2xsYWJsZUdyaWQgPSB0aGlzLmdldE5leHRTY3JvbGxhYmxlRG93bihncmlkKS5ncmlkO1xuICAgICAgICAgICAgLy8gY29uc3QgZGlmZiA9IGNlbGwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIC0gZ3JpZC5yb290R3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IGdyaWRCb3R0b20gPSB0aGlzLl9nZXRNaW5Cb3R0b20oZ3JpZCk7XG4gICAgICAgICAgICBjb25zdCBkaWZmID0gY2VsbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSBncmlkQm90dG9tO1xuICAgICAgICAgICAgY29uc3QgaW5WaWV3ID0gIGRpZmYgPD0gMDtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IGNsb3Nlc3RTY3JvbGxhYmxlR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpLnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9IGNsb3Nlc3RTY3JvbGxhYmxlR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpLnNjcm9sbEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGNhblNjcm9sbCA9ICEoc2Nyb2xsSGVpZ2h0ID09PSAwIHx8XG4gICAgICAgIE1hdGgucm91bmQoc2Nyb2xsVG9wICsgIGNsb3Nlc3RTY3JvbGxhYmxlR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JDb250YWluZXJTaXplKSA9PT0gc2Nyb2xsSGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICghaW5WaWV3ICYmIGNhblNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChjbG9zZXN0U2Nyb2xsYWJsZUdyaWQsIGRpZmYsICgpID0+IGNlbGwuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsRWxlbSA9IGVsZW0ucXVlcnlTZWxlY3RvcihgJHtjZWxsU2VsZWN0b3J9YCk7XG4gICAgICAgICAgICBjb25zdCByb3dJbmRleCA9IHBhcnNlSW50KGNlbGxFbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1yb3dpbmRleCcpLCAxMCk7XG4gICAgICAgICAgICBncmlkLm5hdmlnYXRpb24ucGVyZm9ybUhvcml6b250YWxTY3JvbGxUb0NlbGwocm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZvY3VzUHJldlJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQsIGluQ2hpbGQ/LCBpc1N1bW1hcnk/KSB7XG4gICAgICAgIGlmIChncmlkLm5hdmlnYXRpb24uaXNDb2x1bW5GdWxseVZpc2libGUodmlzaWJsZUNvbHVtbkluZGV4KSAmJiBncmlkLm5hdmlnYXRpb24uaXNDb2x1bW5MZWZ0RnVsbHlWaXNpYmxlKHZpc2libGVDb2x1bW5JbmRleCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGxTZWxlY3RvciA9IHRoaXMuZ2V0Q2VsbFNlbGVjdG9yKHZpc2libGVDb2x1bW5JbmRleCwgaXNTdW1tYXJ5KTtcbiAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gIGVsZW0ucXVlcnlTZWxlY3RvckFsbChgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICBsZXQgY2VsbCA9IGNlbGxzW2NlbGxzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgY29uc3QgckluZGV4ID0gcGFyc2VJbnQoZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm93aW5kZXgnKSwgMTApO1xuICAgICAgICAgICAgY29uc3Qgc2NyR3JpZCA9IGdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKS5zY3JvbGxUb3AgIT09IDAgPyBncmlkIDpcbiAgICAgICAgICAgICB0aGlzLmdldE5leHRTY3JvbGxhYmxlKGdyaWQpLmdyaWQ7XG4gICAgICAgICAgICBjb25zdCB0b3BHcmlkID0gc2NyR3JpZC50Ym9keS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA+XG4gICAgICAgICAgICBncmlkLnJvb3RHcmlkLnRib2R5Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wID8gc2NyR3JpZCA6IGdyaWQucm9vdEdyaWQ7XG4gICAgICAgICAgICBjb25zdCBncmlkVG9wID0gdGhpcy5fZ2V0TWF4VG9wKGdyaWQpO1xuICAgICAgICAgICAgY29uc3Qgc2NyVG9wID0gc2NyR3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRWZXJ0aWNhbFNjcm9sbCgpLnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBjZWxsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtXG4gICAgICAgICAgICBjZWxsLm9mZnNldEhlaWdodCAtIGdyaWRUb3A7XG4gICAgICAgICAgICBpZiAoc2NyVG9wICE9PSAwICYmIGRpZmYgPCAwICYmICFpbkNoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKHNjckdyaWQsIGRpZmYsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSAhaXNTdW1tYXJ5ID8gZ3JpZC5uYXZpZ2F0aW9uLmdldFJvd0J5SW5kZXgockluZGV4KSA6IGVsZW07XG4gICAgICAgICAgICAgICAgICAgIGNlbGwgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKGAke2NlbGxTZWxlY3Rvcn1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKVswXTtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGluQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEdyaWQodG9wR3JpZCwgZGlmZiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhvcml6b250YWxTY3JvbGxHcmlkVG9JbmRleChncmlkLCB2aXNpYmxlQ29sdW1uSW5kZXgsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUHJldlJvdyhlbGVtLCB2aXNpYmxlQ29sdW1uSW5kZXgsIGdyaWQsIGluQ2hpbGQsIGlzU3VtbWFyeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaG9yaXpvbnRhbFNjcm9sbEdyaWRUb0luZGV4KGdyaWQsIHZpc2libGVDb2x1bW5JbmRleCwgY2FsbEJhY2tGdW5jKSB7XG4gICAgICAgIGNvbnN0IHVucGlubmVkSW5kZXggPSB0aGlzLmdldENvbHVtblVucGlubmVkSW5kZXgodmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgZ3JpZC5wYXJlbnRWaXJ0RGlyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAucGlwZShmaXJzdCgpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShjYWxsQmFja0Z1bmMpO1xuICAgICAgICBncmlkLmRhdGFSb3dMaXN0LnRvQXJyYXkoKVswXS52aXJ0RGlyUm93LnNjcm9sbFRvKHVucGlubmVkSW5kZXgpO1xuICAgIH1cbiAgICBwcml2YXRlIHNjcm9sbEdyaWQoZ3JpZCwgdGFyZ2V0LCBjYWxsQmFja0Z1bmMpIHtcbiAgICAgICAgZ3JpZC5uYXRpdmVFbGVtZW50LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmFkZFNjcm9sbFRvcCh0YXJnZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0b3AnIDogZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxUbygwKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbScgOiBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvKGdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2YubGVuZ3RoIC0gMSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICduZXh0JyA6ICBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbE5leHQoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ByZXYnIDogIGdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsUHJldigpOyBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKGNhbGxCYWNrRnVuYyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX25hdmlnYXRlVXBJbkNoaWxkKHJvd0VsZW1lbnQsIGN1cnJlbnRSb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIGNvbnN0IHByZXZFbGVtID0gcm93RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgICBjb25zdCBzY3JvbGxhYmxlID0gdGhpcy5nZXROZXh0U2Nyb2xsYWJsZSh0aGlzLmdyaWQpO1xuICAgICAgICBjb25zdCBncmlkID0gc2Nyb2xsYWJsZS5ncmlkO1xuICAgICAgICBjb25zdCBzY3JUb3AgPSBncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCkuc2Nyb2xsVG9wO1xuICAgICAgICBjb25zdCBjb250YWluZXJUb3AgPSBzY3JvbGxhYmxlLnByZXYubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCB0b3AgPSBwYXJzZUludChjb250YWluZXJUb3Auc3R5bGUudG9wLCAxMCk7XG4gICAgICAgIGlmIChzY3JUb3AgIT09IDAgJiYgdG9wIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxHcmlkKGdyaWQsIC1wcmV2RWxlbS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgKCkgPT4gc3VwZXIubmF2aWdhdGVVcChyb3dFbGVtZW50LCB7IHJvdzogY3VycmVudFJvd0luZGV4LCBjb2x1bW46IHZpc2libGVDb2x1bW5JbmRleH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLm5hdmlnYXRlVXAocm93RWxlbWVudCwgeyByb3c6IGN1cnJlbnRSb3dJbmRleCwgY29sdW1uOiB2aXNpYmxlQ29sdW1uSW5kZXh9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX25hdmlnYXRlRG93bkluQ2hpbGQocm93RWxlbWVudCwgY3VycmVudFJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgY29uc3QgbmV4dEVsZW0gPSByb3dFbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgY29uc3QgY2hpbGRDb250YWluZXIgPSB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIGNvbnN0IGRpZmYgPVxuICAgICAgICBjaGlsZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSB0aGlzLmdyaWQucm9vdEdyaWQubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIGNvbnN0IGVuZElzVmlzaWJsZSA9IGRpZmYgPCAwO1xuICAgICAgICBjb25zdCBzY3JvbGxhYmxlID0gdGhpcy5nZXROZXh0U2Nyb2xsYWJsZURvd24odGhpcy5ncmlkKTtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHNjcm9sbGFibGUuZ3JpZDtcbiAgICAgICAgaWYgKCFlbmRJc1Zpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsR3JpZChncmlkLCBuZXh0RWxlbS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgKCkgPT4gc3VwZXIubmF2aWdhdGVEb3duKHJvd0VsZW1lbnQsIHsgcm93OiBjdXJyZW50Um93SW5kZXgsIGNvbHVtbjogdmlzaWJsZUNvbHVtbkluZGV4fSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIubmF2aWdhdGVEb3duKHJvd0VsZW1lbnQsIHsgcm93OiBjdXJyZW50Um93SW5kZXgsIGNvbHVtbjogdmlzaWJsZUNvbHVtbkluZGV4fSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENsb3Nlc3RFbGVtQnlUYWcoc291cmNlRWxlbSwgdGFyZ2V0VGFnKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBzb3VyY2VFbGVtO1xuICAgICAgICB3aGlsZSAocmVzdWx0ICE9PSBudWxsICYmIHJlc3VsdC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhcmdldFRhZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdfQ==