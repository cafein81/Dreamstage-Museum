/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { cloneArray, isEqual, mergeObjects } from '../core/utils';
import { DataUtil, DataType } from '../data-operations/data-util';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/transaction/transaction';
/**
 * @hidden
 * @template T
 */
var GridBaseAPIService = /** @class */ (function () {
    function GridBaseAPIService() {
        this.editCellState = new Map();
        this.editRowState = new Map();
        this.destroyMap = new Map();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    GridBaseAPIService.prototype.get_column_by_name = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.grid.columnList.find(function (col) { return col.field === name; });
    };
    /**
     * @return {?}
     */
    GridBaseAPIService.prototype.get_summary_data = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var data = grid.filteredData;
        if (!data) {
            if (grid.transactions.enabled) {
                data = DataUtil.mergeTransactions(cloneArray(grid.data), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
                /** @type {?} */
                var deletedRows = grid.transactions.getTransactionLog().filter(function (t) { return t.type === TransactionType.DELETE; }).map(function (t) { return t.id; });
                deletedRows.forEach(function (rowID) {
                    /** @type {?} */
                    var tempData = grid.primaryKey ? data.map(function (rec) { return rec[grid.primaryKey]; }) : data;
                    /** @type {?} */
                    var index = tempData.indexOf(rowID);
                    if (index !== -1) {
                        data.splice(index, 1);
                    }
                });
            }
            else {
                data = grid.data;
            }
        }
        return data;
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @param {?} rowID
     * @return {?}
     */
    GridBaseAPIService.prototype.getRowData = /**
     * @hidden
     * \@internal
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var data = this.get_all_data(this.grid.transactions.enabled);
        /** @type {?} */
        var index = this.get_row_index_in_data(rowID);
        return data[index];
    };
    // TODO: Refactor
    // TODO: Refactor
    /**
     * @return {?}
     */
    GridBaseAPIService.prototype.escape_editMode = 
    // TODO: Refactor
    /**
     * @return {?}
     */
    function () {
        this.grid.crudService.end();
    };
    // TODO: Refactor
    // TODO: Refactor
    /**
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_inEditMode = 
    // TODO: Refactor
    /**
     * @return {?}
     */
    function () {
        return this.grid.crudService.cell;
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    GridBaseAPIService.prototype.get_row_index_in_data = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var grid = (/** @type {?} */ (this.grid));
        if (!grid) {
            return -1;
        }
        /** @type {?} */
        var data = this.get_all_data(grid.transactions.enabled);
        return grid.primaryKey ? data.findIndex(function (record) { return record[grid.primaryKey] === rowID; }) : data.indexOf(rowID);
    };
    /**
     * @param {?} rowSelector
     * @return {?}
     */
    GridBaseAPIService.prototype.get_row_by_key = /**
     * @param {?} rowSelector
     * @return {?}
     */
    function (rowSelector) {
        /** @type {?} */
        var primaryKey = this.grid.primaryKey;
        if (primaryKey !== undefined && primaryKey !== null) {
            return this.grid.dataRowList.find(function (row) { return row.rowData[primaryKey] === rowSelector; });
        }
        else {
            return this.grid.dataRowList.find(function (row) { return row.rowData === rowSelector; });
        }
    };
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    GridBaseAPIService.prototype.get_row_by_index = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        return this.grid.rowList.find(function (row) { return row.index === rowIndex; });
    };
    /**
     * @param {?} rowSelector
     * @param {?} field
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_by_key = /**
     * @param {?} rowSelector
     * @param {?} field
     * @return {?}
     */
    function (rowSelector, field) {
        /** @type {?} */
        var row = this.get_row_by_key(rowSelector);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.column.field === field; });
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_by_index = /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    function (rowIndex, columnIndex) {
        /** @type {?} */
        var row = this.get_row_by_index(rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.columnIndex === columnIndex; });
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    GridBaseAPIService.prototype.get_cell_by_visible_index = /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    function (rowIndex, columnIndex) {
        /** @type {?} */
        var row = this.get_row_by_index(rowIndex);
        if (row && row.cells) {
            return row.cells.find(function (cell) { return cell.visibleColumnIndex === columnIndex; });
        }
    };
    /**
     * @return {?}
     */
    GridBaseAPIService.prototype.submit_value = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cell = this.grid.crudService.cell;
        if (cell) {
            /** @type {?} */
            var args = this.update_cell(cell, cell.editValue);
            if (args.cancel) {
                return;
            }
            this.escape_editMode();
        }
    };
    /**
     * @param {?} cell
     * @param {?} value
     * @return {?}
     */
    GridBaseAPIService.prototype.update_cell = /**
     * @param {?} cell
     * @param {?} value
     * @return {?}
     */
    function (cell, value) {
        var _a;
        /** @type {?} */
        var data = this.get_all_data(this.grid.transactions.enabled);
        /** @type {?} */
        var index = this.get_row_index_in_data(cell.id.rowID);
        cell.editValue = value;
        /** @type {?} */
        var args = cell.createEditEventArgs();
        this.grid.onCellEdit.emit(args);
        if (args.cancel) {
            return args;
        }
        // Cast to number after emit
        // TODO: Clean up this
        args.newValue = cell.castToNumber(args.newValue);
        if (isEqual(args.oldValue, args.newValue)) {
            return args;
        }
        /** @type {?} */
        var valueInTransactions = this.grid.transactions.getAggregatedValue(cell.id.rowID, true);
        if (valueInTransactions) {
            cell.value = valueInTransactions[cell.column.field];
            cell.rowData = valueInTransactions;
        }
        this.grid.summaryService.clearSummaryCache(args);
        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, (_a = {}, _a[cell.column.field] = args.newValue, _a));
        if (this.grid.primaryKey === cell.column.field) {
            if (this.grid.selection.is_item_selected(this.grid.id, cell.id.rowID)) {
                this.grid.selection.deselect_item(this.grid.id, cell.id.rowID);
                this.grid.selection.select_item(this.grid.id, args.newValue);
            }
            if (this.grid.hasSummarizedColumns) {
                this.grid.summaryService.removeSummaries(cell.id.rowID);
            }
        }
        if (!this.grid.rowEditable || !this.grid.crudService.row ||
            this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {
            this.grid.summaryService.clearSummaryCache(args);
            ((/** @type {?} */ (this.grid)))._pipeTrigger++;
        }
        return args;
    };
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @protected
     * @param {?} grid Grid to update data for
     * @param {?} rowID ID of the row to update
     * @param {?} rowValueInDataSource Initial value of the row as it is in data source
     * @param {?} rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param {?} rowNewValue New value of the row
     * @return {?}
     */
    GridBaseAPIService.prototype.updateData = /**
     * Updates related row of provided grid's data source with provided new row value
     * @protected
     * @param {?} grid Grid to update data for
     * @param {?} rowID ID of the row to update
     * @param {?} rowValueInDataSource Initial value of the row as it is in data source
     * @param {?} rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param {?} rowNewValue New value of the row
     * @return {?}
     */
    function (grid, rowID, rowValueInDataSource, rowCurrentValue, rowNewValue) {
        if (grid.transactions.enabled) {
            /** @type {?} */
            var transaction = {
                id: rowID,
                type: TransactionType.UPDATE,
                newValue: rowNewValue
            };
            grid.transactions.add(transaction, rowCurrentValue);
        }
        else {
            mergeObjects(rowValueInDataSource, rowNewValue);
        }
    };
    /**
     * @param {?} row
     * @param {?=} value
     * @return {?}
     */
    GridBaseAPIService.prototype._update_row = /**
     * @param {?} row
     * @param {?=} value
     * @return {?}
     */
    function (row, value) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var rowInEditMode = grid.crudService.row;
        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);
        if (rowInEditMode && row.id === rowInEditMode.id) {
            row.data = tslib_1.__assign({}, row.data, rowInEditMode.transactionState);
            // TODO: Workaround for updating a row in edit mode through the API
        }
        else if (this.grid.transactions.enabled) {
            /** @type {?} */
            var lastCommitedValue = grid.transactions.getState(row.id) ?
                grid.transactions.getState(row.id).value : null;
            row.data = lastCommitedValue ? Object.assign(row.data, lastCommitedValue) : row.data;
        }
    };
    /**
     * @param {?} row
     * @param {?} value
     * @return {?}
     */
    GridBaseAPIService.prototype.update_row = /**
     * @param {?} row
     * @param {?} value
     * @return {?}
     */
    function (row, value) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var selected = grid.selection.is_item_selected(grid.id, row.id);
        /** @type {?} */
        var rowInEditMode = grid.crudService.row;
        /** @type {?} */
        var data = this.get_all_data(grid.transactions.enabled);
        /** @type {?} */
        var index = this.get_row_index_in_data(row.id);
        /** @type {?} */
        var hasSummarized = grid.hasSummarizedColumns;
        this._update_row(row, value);
        /** @type {?} */
        var args = row.createEditEventArgs();
        // If no valid row is found
        if (index === -1) {
            return args;
        }
        grid.onRowEdit.emit(args);
        if (args.cancel) {
            return args;
        }
        if (rowInEditMode) {
            grid.transactions.endPending(false);
        }
        if (!args.newValue) {
            return args;
        }
        if (hasSummarized) {
            grid.summaryService.removeSummaries(args.rowID);
        }
        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);
        /** @type {?} */
        var newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;
        if (selected) {
            grid.selection.deselect_item(grid.id, row.id);
            grid.selection.select_item(grid.id, newId);
        }
        if (hasSummarized) {
            grid.summaryService.removeSummaries(newId);
        }
        ((/** @type {?} */ (grid)))._pipeTrigger++;
        return args;
    };
    /**
     * @protected
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    GridBaseAPIService.prototype.update_row_in_array = /**
     * @protected
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (value, rowID, index) {
        /** @type {?} */
        var grid = this.grid;
        grid.data[index] = value;
    };
    /**
     * @param {?} expression
     * @return {?}
     */
    GridBaseAPIService.prototype.sort = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        if (expression.dir === SortingDirection.None) {
            this.remove_grouping_expression(expression.fieldName);
        }
        /** @type {?} */
        var sortingState = cloneArray(this.grid.sortingExpressions);
        this.prepare_sorting_expression([sortingState], expression);
        this.grid.sortingExpressions = sortingState;
    };
    /**
     * @param {?} expressions
     * @return {?}
     */
    GridBaseAPIService.prototype.sort_multiple = /**
     * @param {?} expressions
     * @return {?}
     */
    function (expressions) {
        var e_1, _a;
        /** @type {?} */
        var sortingState = cloneArray(this.grid.sortingExpressions);
        try {
            for (var expressions_1 = tslib_1.__values(expressions), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
                var each = expressions_1_1.value;
                if (each.dir === SortingDirection.None) {
                    this.remove_grouping_expression(each.fieldName);
                }
                this.prepare_sorting_expression([sortingState], each);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expressions_1_1 && !expressions_1_1.done && (_a = expressions_1.return)) _a.call(expressions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.grid.sortingExpressions = sortingState;
    };
    /**
     * @param {?} fieldName
     * @param {?} term
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    GridBaseAPIService.prototype.filter = /**
     * @param {?} fieldName
     * @param {?} term
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @return {?}
     */
    function (fieldName, term, conditionOrExpressionsTree, ignoreCase) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var filteringTree = grid.filteringExpressionsTree;
        grid.endEdit(false);
        if (grid.paging) {
            grid.page = 0;
        }
        /** @type {?} */
        var fieldFilterIndex = filteringTree.findIndex(fieldName);
        if (fieldFilterIndex > -1) {
            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);
        }
        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);
        grid.filteringExpressionsTree = filteringTree;
    };
    /**
     * @param {?} term
     * @param {?} condition
     * @param {?} ignoreCase
     * @return {?}
     */
    GridBaseAPIService.prototype.filter_global = /**
     * @param {?} term
     * @param {?} condition
     * @param {?} ignoreCase
     * @return {?}
     */
    function (term, condition, ignoreCase) {
        var e_2, _a;
        if (!condition) {
            return;
        }
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var filteringTree = grid.filteringExpressionsTree;
        grid.endEdit(false);
        if (grid.paging) {
            grid.page = 0;
        }
        filteringTree.filteringOperands = [];
        try {
            for (var _b = tslib_1.__values(grid.columns), _c = _b.next(); !_c.done; _c = _b.next()) {
                var column = _c.value;
                this.prepare_filtering_expression(filteringTree, column.field, term, condition, ignoreCase || column.filteringIgnoreCase);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        grid.filteringExpressionsTree = filteringTree;
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.clear_filter = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        if (fieldName) {
            /** @type {?} */
            var column = this.get_column_by_name(fieldName);
            if (!column) {
                return;
            }
        }
        /** @type {?} */
        var grid = this.grid;
        grid.endEdit(false);
        /** @type {?} */
        var filteringState = grid.filteringExpressionsTree;
        /** @type {?} */
        var index = filteringState.findIndex(fieldName);
        if (index > -1) {
            filteringState.filteringOperands.splice(index, 1);
        }
        else if (!fieldName) {
            filteringState.filteringOperands = [];
        }
        grid.filteringExpressionsTree = filteringState;
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.clear_sort = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        /** @type {?} */
        var sortingState = this.grid.sortingExpressions;
        /** @type {?} */
        var index = sortingState.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index > -1) {
            sortingState.splice(index, 1);
            this.grid.sortingExpressions = sortingState;
        }
    };
    /**
     * @protected
     * @param {?} filteringState
     * @param {?} fieldName
     * @param {?} searchVal
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @param {?=} insertAtIndex
     * @return {?}
     */
    GridBaseAPIService.prototype.prepare_filtering_expression = /**
     * @protected
     * @param {?} filteringState
     * @param {?} fieldName
     * @param {?} searchVal
     * @param {?} conditionOrExpressionsTree
     * @param {?} ignoreCase
     * @param {?=} insertAtIndex
     * @return {?}
     */
    function (filteringState, fieldName, searchVal, conditionOrExpressionsTree, ignoreCase, insertAtIndex) {
        if (insertAtIndex === void 0) { insertAtIndex = -1; }
        /** @type {?} */
        var newExpressionsTree;
        /** @type {?} */
        var oldExpressionsTreeIndex = filteringState.findIndex(fieldName);
        /** @type {?} */
        var expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            (/** @type {?} */ (conditionOrExpressionsTree)) : null;
        /** @type {?} */
        var condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            null : (/** @type {?} */ (conditionOrExpressionsTree));
        /** @type {?} */
        var newExpression = { fieldName: fieldName, searchVal: searchVal, condition: condition, ignoreCase: ignoreCase };
        if (oldExpressionsTreeIndex === -1) {
            // no expressions tree found for this field
            if (expressionsTree) {
                if (insertAtIndex > -1) {
                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);
                }
                else {
                    filteringState.filteringOperands.push(expressionsTree);
                }
            }
            else if (condition) {
                // create expressions tree for this field and add the new expression to it
                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);
                newExpressionsTree.filteringOperands.push(newExpression);
                filteringState.filteringOperands.push(newExpressionsTree);
            }
        }
    };
    /**
     * @protected
     * @param {?} stateCollections
     * @param {?} expression
     * @return {?}
     */
    GridBaseAPIService.prototype.prepare_sorting_expression = /**
     * @protected
     * @param {?} stateCollections
     * @param {?} expression
     * @return {?}
     */
    function (stateCollections, expression) {
        if (expression.dir === SortingDirection.None) {
            stateCollections.forEach(function (state) {
                state.splice(state.findIndex(function (expr) { return expr.fieldName === expression.fieldName; }), 1);
            });
            return;
        }
        /**
         * We need to make sure the states in each collection with same fields point to the same object reference.
         * If the different state collections provided have different sizes we need to get the largest one.
         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.
         * @type {?}
         */
        var maxCollection = stateCollections[0];
        for (var i = 1; i < stateCollections.length; i++) {
            if (maxCollection.length < stateCollections[i].length) {
                maxCollection = stateCollections[i];
            }
        }
        /** @type {?} */
        var maxExpr = maxCollection.find(function (expr) { return expr.fieldName === expression.fieldName; });
        stateCollections.forEach(function (collection) {
            /** @type {?} */
            var myExpr = collection.find(function (expr) { return expr.fieldName === expression.fieldName; });
            if (!myExpr && !maxExpr) {
                // Expression with this fieldName is missing from the current and the max collection.
                collection.push(expression);
            }
            else if (!myExpr && maxExpr) {
                // Expression with this fieldName is missing from the current and but the max collection has.
                collection.push(maxExpr);
                Object.assign(maxExpr, expression);
            }
            else {
                // The current collection has the expression so just update it.
                Object.assign(myExpr, expression);
            }
        });
    };
    /**
     * @protected
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.remove_grouping_expression = /**
     * @protected
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
    };
    /**
     * @param {?} column
     * @return {?}
     */
    GridBaseAPIService.prototype.should_apply_number_style = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.dataType === DataType.Number;
    };
    /**
     * @return {?}
     */
    GridBaseAPIService.prototype.get_data = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var data = grid.data ? grid.data : [];
        return data;
    };
    /**
     * @param {?=} includeTransactions
     * @return {?}
     */
    GridBaseAPIService.prototype.get_all_data = /**
     * @param {?=} includeTransactions
     * @return {?}
     */
    function (includeTransactions) {
        if (includeTransactions === void 0) { includeTransactions = false; }
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var data = grid.data ? grid.data : [];
        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;
        return data;
    };
    /**
     * @return {?}
     */
    GridBaseAPIService.prototype.get_filtered_data = /**
     * @return {?}
     */
    function () {
        return this.grid.filteredData;
    };
    /**
     * @protected
     * @param {?} fieldName
     * @return {?}
     */
    GridBaseAPIService.prototype.getSortStrategyPerColumn = /**
     * @protected
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return this.get_column_by_name(fieldName) ?
            this.get_column_by_name(fieldName).sortStrategy : undefined;
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    GridBaseAPIService.prototype.addRowToData = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions
        // If there is a row in edit - > commit and close
        /** @type {?} */
        var grid = this.grid;
        if (grid.transactions.enabled) {
            /** @type {?} */
            var transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;
            /** @type {?} */
            var transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };
            grid.transactions.add(transaction);
        }
        else {
            grid.data.push(rowData);
        }
    };
    /**
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    GridBaseAPIService.prototype.deleteRowFromData = /**
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (rowID, index) {
        //  if there is a row (index !== 0) delete it
        //  if there is a row in ADD or UPDATE state change it's state to DELETE
        /** @type {?} */
        var grid = this.grid;
        if (index !== -1) {
            if (grid.transactions.enabled) {
                /** @type {?} */
                var transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };
                grid.transactions.add(transaction, grid.data[index]);
            }
            else {
                grid.data.splice(index, 1);
            }
        }
        else {
            /** @type {?} */
            var state = grid.transactions.getState(rowID);
            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);
        }
    };
    /**
     * @param {?} rowId
     * @return {?}
     */
    GridBaseAPIService.prototype.deleteRowById = /**
     * @param {?} rowId
     * @return {?}
     */
    function (rowId) {
        /** @type {?} */
        var index;
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var data = this.get_all_data();
        if (grid.primaryKey) {
            index = data.map(function (record) { return record[grid.primaryKey]; }).indexOf(rowId);
        }
        else {
            index = data.indexOf(rowId);
        }
        /** @type {?} */
        var state = grid.transactions.getState(rowId);
        /** @type {?} */
        var hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;
        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode
        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above
        //  Otherwise just exit - there is nothing to delete
        if (index !== -1 || hasRowInNonDeletedState) {
            // Always exit edit when row is deleted
            grid.endEdit(true);
        }
        else {
            return;
        }
        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!
        grid.onRowDeleted.emit({ data: data[index] });
        //  first deselect row then delete it
        if (grid.rowSelectable && grid.selection.is_item_selected(grid.id, rowId)) {
            grid.deselectRows([rowId]);
        }
        else {
            grid.checkHeaderCheckboxStatus();
        }
        this.deleteRowFromData(rowId, index);
        ((/** @type {?} */ (grid)))._pipeTrigger++;
        grid.cdr.markForCheck();
        // Data needs to be recalculated if transactions are in place
        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale
        /** @type {?} */
        var dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;
        grid.refreshSearch();
        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {
            grid.page--;
        }
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    GridBaseAPIService.prototype.get_row_id = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        /** @type {?} */
        var grid = this.grid;
        return grid.primaryKey ? rowData[grid.primaryKey] : rowData;
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    GridBaseAPIService.prototype.row_deleted_transaction = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var grid = this.grid;
        if (!grid) {
            return false;
        }
        if (!grid.transactions.enabled) {
            return false;
        }
        /** @type {?} */
        var state = grid.transactions.getState(rowID);
        if (state) {
            return state.type === TransactionType.DELETE;
        }
        return false;
    };
    /**
     * @return {?}
     */
    GridBaseAPIService.prototype.atInexistingPage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var grid = this.grid;
        return grid.data.length % grid.perPage === 0 && grid.isLastPage && grid.page !== 0;
    };
    GridBaseAPIService.decorators = [
        { type: Injectable }
    ];
    return GridBaseAPIService;
}());
export { GridBaseAPIService };
if (false) {
    /** @type {?} */
    GridBaseAPIService.prototype.grid;
    /**
     * @type {?}
     * @protected
     */
    GridBaseAPIService.prototype.editCellState;
    /**
     * @type {?}
     * @protected
     */
    GridBaseAPIService.prototype.editRowState;
    /**
     * @type {?}
     * @protected
     */
    GridBaseAPIService.prototype.destroyMap;
}
//# sourceMappingURL=data:application/json;base64,