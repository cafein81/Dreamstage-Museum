/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';
import { ChangeDetectorRef, Directive, ElementRef, Inject, Injectable, Input, NgZone, Output, Pipe, Renderer2, TemplateRef, LOCALE_ID, HostListener } from '@angular/core';
import { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';
import { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';
import { IgxColumnComponent } from './column.component';
import { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { ConnectedPositioningStrategy } from '../services';
import { VerticalAlignment } from '../services/overlay/utilities';
import { scaleInVerBottom, scaleInVerTop } from '../animations/main';
import { IgxColumnResizingService } from './grid-column-resizing.service';
import { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';
import * as i0 from "@angular/core";
/** @type {?} */
var DEFAULT_DATE_FORMAT = 'mediumDate';
/** @type {?} */
var DEBOUNCE_TIME = 200;
/**
 * @hidden
 */
var IgxResizeHandleDirective = /** @class */ (function () {
    function IgxResizeHandleDirective(zone, element, colResizingService) {
        this.zone = zone;
        this.element = element;
        this.colResizingService = colResizingService;
        /**
         * @hidden
         */
        this._dblClick = false;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxResizeHandleDirective.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxResizeHandleDirective.prototype.ngAfterViewInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.column.columnGroup && this.column.resizable) {
            this.zone.runOutsideAngular(function () {
                fromEvent(_this.element.nativeElement, 'mousedown').pipe(debounceTime(DEBOUNCE_TIME), takeUntil(_this.destroy$)).subscribe(function (event) {
                    if (_this._dblClick) {
                        _this._dblClick = false;
                        return;
                    }
                    if (event.button === 0) {
                        _this._onResizeAreaMouseDown(event);
                        _this.column.grid.resizeLine.resizer.onMousedown(event);
                    }
                });
            });
            fromEvent(this.element.nativeElement, 'mouseup').pipe(debounceTime(DEBOUNCE_TIME), takeUntil(this.destroy$)).subscribe(function () {
                _this.colResizingService.isColumnResizing = false;
                _this.colResizingService.showResizer = false;
                _this.column.grid.cdr.detectChanges();
            });
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxResizeHandleDirective.prototype.onMouseOver = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.colResizingService.resizeCursor = 'col-resize';
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxResizeHandleDirective.prototype.onDoubleClick = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._dblClick = true;
        this.colResizingService.column = this.column;
        this.colResizingService.autosizeColumnOnDblClick();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxResizeHandleDirective.prototype._onResizeAreaMouseDown = /**
     * @hidden
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.colResizingService.column = this.column;
        this.colResizingService.isColumnResizing = true;
        this.colResizingService.startResizePos = event.clientX;
        this.colResizingService.showResizer = true;
        this.column.grid.cdr.detectChanges();
    };
    IgxResizeHandleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxResizeHandle]'
                },] }
    ];
    /** @nocollapse */
    IgxResizeHandleDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: IgxColumnResizingService }
    ]; };
    IgxResizeHandleDirective.propDecorators = {
        column: [{ type: Input, args: ['igxResizeHandle',] }],
        onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
        onDoubleClick: [{ type: HostListener, args: ['dblclick',] }]
    };
    return IgxResizeHandleDirective;
}());
export { IgxResizeHandleDirective };
if (false) {
    /**
     * @hidden
     * @type {?}
     */
    IgxResizeHandleDirective.prototype.column;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype._dblClick;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    IgxResizeHandleDirective.prototype.element;
    /** @type {?} */
    IgxResizeHandleDirective.prototype.colResizingService;
}
/**
 * @hidden
 */
var IgxColumnResizerDirective = /** @class */ (function () {
    function IgxColumnResizerDirective(element, document, zone) {
        var _this = this;
        this.element = element;
        this.document = document;
        this.zone = zone;
        this.restrictHResizeMin = Number.MIN_SAFE_INTEGER;
        this.restrictHResizeMax = Number.MAX_SAFE_INTEGER;
        this.resizeEnd = new Subject();
        this.resizeStart = new Subject();
        this.resize = new Subject();
        this._destroy = new Subject();
        this.resizeStart.pipe(map(function (event) { return event.clientX; }), takeUntil(this._destroy), switchMap(function (offset) { return _this.resize.pipe(map(function (event) { return event.clientX - offset; }), takeUntil(_this.resizeEnd), takeUntil(_this._destroy)); })).subscribe(function (pos) {
            /** @type {?} */
            var left = _this._left + pos;
            /** @type {?} */
            var min = _this._left - _this.restrictHResizeMin;
            /** @type {?} */
            var max = _this._left + _this.restrictHResizeMax;
            _this.left = left < min ? min : left;
            if (left > max) {
                _this.left = max;
            }
        });
    }
    /**
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            fromEvent(_this.document.defaultView, 'mousemove').pipe(throttle(function () { return interval(0, animationFrameScheduler); }), takeUntil(_this._destroy)).subscribe(function (res) { return _this.onMousemove(res); });
            fromEvent(_this.document.defaultView, 'mouseup').pipe(takeUntil(_this._destroy))
                .subscribe(function (res) { return _this.onMouseup(res); });
        });
    };
    /**
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy.next(true);
        this._destroy.complete();
    };
    Object.defineProperty(IgxColumnResizerDirective.prototype, "left", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            requestAnimationFrame(function () { return _this.element.nativeElement.style.left = val + 'px'; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnResizerDirective.prototype, "top", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            requestAnimationFrame(function () { return _this.element.nativeElement.style.top = val + 'px'; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.onMouseup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.resizeEnd.next(event);
        this.resizeEnd.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.onMousedown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var parent = this.element.nativeElement.parentElement.parentElement;
        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;
        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;
        this.resizeStart.next(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnResizerDirective.prototype.onMousemove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.resize.next(event);
    };
    IgxColumnResizerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxResizer]'
                },] }
    ];
    /** @nocollapse */
    IgxColumnResizerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgZone }
    ]; };
    IgxColumnResizerDirective.propDecorators = {
        restrictHResizeMin: [{ type: Input }],
        restrictHResizeMax: [{ type: Input }],
        resizeEnd: [{ type: Output }],
        resizeStart: [{ type: Output }],
        resize: [{ type: Output }]
    };
    return IgxColumnResizerDirective;
}());
export { IgxColumnResizerDirective };
if (false) {
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMin;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.restrictHResizeMax;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeEnd;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resizeStart;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.resize;
    /**
     * @type {?}
     * @private
     */
    IgxColumnResizerDirective.prototype._left;
    /**
     * @type {?}
     * @private
     */
    IgxColumnResizerDirective.prototype._destroy;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.element;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.document;
    /** @type {?} */
    IgxColumnResizerDirective.prototype.zone;
}
var IgxFilterCellTemplateDirective = /** @class */ (function () {
    function IgxFilterCellTemplateDirective(template) {
        this.template = template;
    }
    IgxFilterCellTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxFilterCellTemplate]'
                },] }
    ];
    /** @nocollapse */
    IgxFilterCellTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxFilterCellTemplateDirective;
}());
export { IgxFilterCellTemplateDirective };
if (false) {
    /** @type {?} */
    IgxFilterCellTemplateDirective.prototype.template;
}
var IgxCellTemplateDirective = /** @class */ (function () {
    function IgxCellTemplateDirective(template) {
        this.template = template;
    }
    IgxCellTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCell]'
                },] }
    ];
    /** @nocollapse */
    IgxCellTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellTemplateDirective;
}());
export { IgxCellTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellTemplateDirective.prototype.template;
}
var IgxCellHeaderTemplateDirective = /** @class */ (function () {
    function IgxCellHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCellHeaderTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxHeader]'
                },] }
    ];
    /** @nocollapse */
    IgxCellHeaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellHeaderTemplateDirective;
}());
export { IgxCellHeaderTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellHeaderTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxCellFooterTemplateDirective = /** @class */ (function () {
    function IgxCellFooterTemplateDirective(template) {
        this.template = template;
    }
    IgxCellFooterTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxFooter]'
                },] }
    ];
    /** @nocollapse */
    IgxCellFooterTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellFooterTemplateDirective;
}());
export { IgxCellFooterTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellFooterTemplateDirective.prototype.template;
}
var IgxCellEditorTemplateDirective = /** @class */ (function () {
    function IgxCellEditorTemplateDirective(template) {
        this.template = template;
    }
    IgxCellEditorTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCellEditor]'
                },] }
    ];
    /** @nocollapse */
    IgxCellEditorTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellEditorTemplateDirective;
}());
export { IgxCellEditorTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellEditorTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxColumnMovingService = /** @class */ (function () {
    function IgxColumnMovingService() {
    }
    Object.defineProperty(IgxColumnMovingService.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._column = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingService.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._icon = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxColumnMovingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ IgxColumnMovingService.ngInjectableDef = i0.defineInjectable({ factory: function IgxColumnMovingService_Factory() { return new IgxColumnMovingService(); }, token: IgxColumnMovingService, providedIn: "root" });
    return IgxColumnMovingService;
}());
export { IgxColumnMovingService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingService.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingService.prototype._column;
    /** @type {?} */
    IgxColumnMovingService.prototype.cancelDrop;
    /** @type {?} */
    IgxColumnMovingService.prototype.isColumnMoving;
}
/** @enum {number} */
var DropPosition = {
    BeforeDropTarget: 0,
    AfterDropTarget: 1,
    None: 2,
};
export { DropPosition };
DropPosition[DropPosition.BeforeDropTarget] = 'BeforeDropTarget';
DropPosition[DropPosition.AfterDropTarget] = 'AfterDropTarget';
DropPosition[DropPosition.None] = 'None';
/**
 * @hidden
 */
var IgxColumnMovingDragDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnMovingDragDirective, _super);
    function IgxColumnMovingDragDirective(_element, _zone, _renderer, _cdr, cms) {
        var _this = _super.call(this, _cdr, _element, _zone, _renderer) || this;
        _this.cms = cms;
        _this._ghostImageClass = 'igx-grid__drag-ghost-image';
        _this.dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';
        _this.dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';
        return _this;
    }
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "data", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._column = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "draggable", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDragDirective.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this.cms.icon;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onEscape = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.cms.cancelDrop = true;
        this.onPointerUp(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onPointerDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this._removeOnDestroy = false;
        this.cms.column = this.column;
        this.ghostImageClass = this._ghostImageClass;
        _super.prototype.onPointerDown.call(this, event);
        this.cms.isColumnMoving = true;
        this.column.grid.cdr.detectChanges();
        /** @type {?} */
        var args = {
            source: this.column
        };
        this.column.grid.onColumnMovingStart.emit(args);
        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe(function (ev) {
            if (ev.key === "Escape" /* ESCAPE */ || ev.key === "Esc" /* ESCAPE_IE */) {
                _this.onEscape(ev);
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onPointerMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        _super.prototype.onPointerMove.call(this, event);
        if (this._dragStarted && this.dragGhost && !this.column.grid.draggedColumn) {
            this.column.grid.draggedColumn = this.column;
            this.column.grid.cdr.detectChanges();
        }
        if (this.cms.isColumnMoving) {
            /** @type {?} */
            var args = {
                source: this.column,
                cancel: false
            };
            this.column.grid.onColumnMoving.emit(args);
            if (args.cancel) {
                this.onEscape(event);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.onPointerUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.
        this.zone.run(function () {
            _super.prototype.onPointerUp.call(_this, event);
            _this.cms.isColumnMoving = false;
            _this.column.grid.draggedColumn = null;
            _this.column.grid.cdr.detectChanges();
        });
        this._unsubscribe();
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype.createDragGhost = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        _super.prototype.createDragGhost.call(this, event);
        /** @type {?} */
        var pageX;
        /** @type {?} */
        var pageY;
        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {
            pageX = event.pageX;
            pageY = event.pageY;
        }
        else {
            pageX = event.touches[0].pageX;
            pageY = event.touches[0].pageY;
        }
        this.dragGhost.style.height = null;
        this.dragGhost.style.minWidth = null;
        this.dragGhost.style.flexBasis = null;
        this.dragGhost.style.position = null;
        /** @type {?} */
        var icon = document.createElement('i');
        /** @type {?} */
        var text = document.createTextNode('block');
        icon.appendChild(text);
        icon.classList.add('material-icons');
        this.cms.icon = icon;
        /** @type {?} */
        var hostElemLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;
        /** @type {?} */
        var hostElemTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;
        if (!this.column.columnGroup) {
            this.renderer.addClass(icon, this.dragGhostImgIconClass);
            this.dragGhost.insertBefore(icon, this.dragGhost.firstElementChild);
            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;
            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;
        }
        else {
            this.dragGhost.insertBefore(icon, this.dragGhost.childNodes[0]);
            this.renderer.addClass(icon, this.dragGhostImgIconGroupClass);
            this.dragGhost.children[0].style.paddingLeft = '0px';
            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;
            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxColumnMovingDragDirective.prototype._unsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.subscription$) {
            this.subscription$.unsubscribe();
            this.subscription$ = null;
        }
    };
    IgxColumnMovingDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxColumnMovingDrag]'
                },] }
    ];
    /** @nocollapse */
    IgxColumnMovingDragDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: IgxColumnMovingService }
    ]; };
    IgxColumnMovingDragDirective.propDecorators = {
        data: [{ type: Input, args: ['igxColumnMovingDrag',] }]
    };
    return IgxColumnMovingDragDirective;
}(IgxDragDirective));
export { IgxColumnMovingDragDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.subscription$;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype._column;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype._ghostImageClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.dragGhostImgIconClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.dragGhostImgIconGroupClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDragDirective.prototype.cms;
}
/**
 * @hidden
 */
var IgxColumnMovingDropDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnMovingDropDirective, _super);
    function IgxColumnMovingDropDirective(elementRef, renderer, zone, cms) {
        var _this = _super.call(this, elementRef, renderer, zone) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.cms = cms;
        _this._dropIndicator = null;
        _this._lastDropIndicator = null;
        _this._dragLeave = new Subject();
        _this._dropIndicatorClass = 'igx-grid__th-drop-indicator--active';
        return _this;
    }
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "data", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val instanceof IgxColumnComponent) {
                this._column = val;
            }
            if (val instanceof IgxGridForOfDirective) {
                this._hVirtDir = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "isDropTarget", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&
                ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnMovingDropDirective.prototype, "horizontalScroll", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._hVirtDir) {
                return this._hVirtDir;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._dragLeave.next(true);
        this._dragLeave.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (this._lastDropIndicator) {
                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
            }
            /** @type {?} */
            var clientRect = this.elementRef.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var pos = clientRect.left + clientRect.width / 2;
            /** @type {?} */
            var parent_1 = this.elementRef.nativeElement.parentElement;
            if (event.detail.pageX < pos) {
                this._dropPos = DropPosition.BeforeDropTarget;
                this._lastDropIndicator = this._dropIndicator = parent_1.firstElementChild;
            }
            else {
                this._dropPos = DropPosition.AfterDropTarget;
                this._lastDropIndicator = this._dropIndicator = parent_1.lastElementChild;
            }
            if (this.cms.icon.innerText !== 'block') {
                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {
            this.cms.icon.innerText = 'block';
            return;
        }
        if (this.isDropTarget &&
            this.cms.column !== this.column &&
            this.cms.column.level === this.column.level &&
            this.cms.column.parent === this.column.parent) {
            if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {
                this.cms.icon.innerText = 'swap_horiz';
            }
            if (!this.cms.column.pinned && this.column.pinned) {
                /** @type {?} */
                var nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
                if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {
                    this.cms.icon.innerText = 'lock';
                }
                else {
                    this.cms.icon.innerText = 'block';
                }
            }
        }
        else {
            this.cms.icon.innerText = 'block';
        }
        if (this.horizontalScroll) {
            this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';
            interval(100).pipe(takeUntil(this._dragLeave)).subscribe(function () {
                _this.cms.column.grid.wheelHandler();
                event.target.id === 'right' ? _this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :
                    _this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        this.cms.icon.innerText = 'block';
        if (this._dropIndicator) {
            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxColumnMovingDropDirective.prototype.onDragDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var drag = event.detail.owner;
        if (!(drag instanceof IgxColumnMovingDragDirective)) {
            return;
        }
        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {
            return;
        }
        if (this.horizontalScroll) {
            this._dragLeave.next(true);
        }
        if (this.isDropTarget) {
            /** @type {?} */
            var args = {
                source: this.cms.column,
                target: this.column
            };
            /** @type {?} */
            var nextPinnedWidth = void 0;
            if (this.column.pinned && !this.cms.column.pinned) {
                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);
            }
            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||
                this.column.level !== this.cms.column.level ||
                this.column.parent !== this.cms.column.parent ||
                this.cms.cancelDrop) {
                this.cms.cancelDrop = false;
                this.column.grid.onColumnMovingEnd.emit(args);
                return;
            }
            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);
            this.column.grid.draggedColumn = null;
            this.column.grid.cdr.detectChanges();
        }
    };
    IgxColumnMovingDropDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxColumnMovingDrop]'
                },] }
    ];
    /** @nocollapse */
    IgxColumnMovingDropDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: IgxColumnMovingService }
    ]; };
    IgxColumnMovingDropDirective.propDecorators = {
        data: [{ type: Input, args: ['igxColumnMovingDrop',] }]
    };
    return IgxColumnMovingDropDirective;
}(IgxDropDirective));
export { IgxColumnMovingDropDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dropPos;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dropIndicator;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._lastDropIndicator;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._column;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._hVirtDir;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dragLeave;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype._dropIndicatorClass;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    IgxColumnMovingDropDirective.prototype.cms;
}
var IgxGridBodyDirective = /** @class */ (function () {
    function IgxGridBodyDirective() {
    }
    IgxGridBodyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxGridBody]',
                    providers: [IgxForOfSyncService]
                },] }
    ];
    return IgxGridBodyDirective;
}());
export { IgxGridBodyDirective };
/**
 * @hidden
 */
var IgxDatePipeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDatePipeComponent, _super);
    function IgxDatePipeComponent(locale) {
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        return _super.call(this, locale) || this;
    }
    /**
     * @param {?} value
     * @param {?} locale
     * @return {?}
     */
    IgxDatePipeComponent.prototype.transform = /**
     * @param {?} value
     * @param {?} locale
     * @return {?}
     */
    function (value, locale) {
        if (value && value instanceof Date) {
            if (locale) {
                return _super.prototype.transform.call(this, value, DEFAULT_DATE_FORMAT, undefined, locale);
            }
            else {
                return _super.prototype.transform.call(this, value);
            }
        }
        else {
            return value;
        }
    };
    IgxDatePipeComponent.decorators = [
        { type: Pipe, args: [{
                    name: 'igxdate'
                },] }
    ];
    /** @nocollapse */
    IgxDatePipeComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return IgxDatePipeComponent;
}(DatePipe));
export { IgxDatePipeComponent };
/**
 * @hidden
 */
var IgxDecimalPipeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDecimalPipeComponent, _super);
    function IgxDecimalPipeComponent(locale) {
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        return _super.call(this, locale) || this;
    }
    /**
     * @param {?} value
     * @param {?} locale
     * @return {?}
     */
    IgxDecimalPipeComponent.prototype.transform = /**
     * @param {?} value
     * @param {?} locale
     * @return {?}
     */
    function (value, locale) {
        if (value && typeof value === 'number') {
            if (locale) {
                return _super.prototype.transform.call(this, value, undefined, locale);
            }
            else {
                return _super.prototype.transform.call(this, value);
            }
        }
        else {
            return value;
        }
    };
    IgxDecimalPipeComponent.decorators = [
        { type: Pipe, args: [{
                    name: 'igxdecimal'
                },] }
    ];
    /** @nocollapse */
    IgxDecimalPipeComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return IgxDecimalPipeComponent;
}(DecimalPipe));
export { IgxDecimalPipeComponent };
/**
 * @hidden
 * @record
 */
export function ContainerPositionSettings() { }
if (false) {
    /** @type {?|undefined} */
    ContainerPositionSettings.prototype.container;
}
/**
 * @hidden
 */
var /**
 * @hidden
 */
ContainerPositioningStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerPositioningStrategy, _super);
    function ContainerPositioningStrategy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isTop = false;
        _this.isTopInitialPosition = null;
        return _this;
    }
    /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    ContainerPositioningStrategy.prototype.position = /**
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        /** @type {?} */
        var container = this.settings.container;
        // grid.tbody
        /** @type {?} */
        var target = (/** @type {?} */ (this.settings.target));
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.getBoundingClientRect().bottom <
                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;
        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.
        contentElement.style.width = target.clientWidth + 'px';
        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;
        _super.prototype.position.call(this, contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);
    };
    return ContainerPositioningStrategy;
}(ConnectedPositioningStrategy));
/**
 * @hidden
 */
export { ContainerPositioningStrategy };
if (false) {
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTop;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.isTopInitialPosition;
    /** @type {?} */
    ContainerPositioningStrategy.prototype.settings;
}
//# sourceMappingURL=data:application/json;base64,