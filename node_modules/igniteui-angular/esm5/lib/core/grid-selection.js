/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
/**
 * @record
 */
export function GridSelectionRange() { }
if (false) {
    /** @type {?} */
    GridSelectionRange.prototype.rowStart;
    /** @type {?} */
    GridSelectionRange.prototype.rowEnd;
    /** @type {?} */
    GridSelectionRange.prototype.columnStart;
    /** @type {?} */
    GridSelectionRange.prototype.columnEnd;
}
/**
 * @record
 */
export function ISelectionNode() { }
if (false) {
    /** @type {?} */
    ISelectionNode.prototype.row;
    /** @type {?} */
    ISelectionNode.prototype.column;
    /** @type {?|undefined} */
    ISelectionNode.prototype.layout;
    /** @type {?|undefined} */
    ISelectionNode.prototype.isSummaryRow;
}
/**
 * @record
 */
export function IMultiRowLayoutNode() { }
if (false) {
    /** @type {?} */
    IMultiRowLayoutNode.prototype.rowStart;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.colStart;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.rowEnd;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.colEnd;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.columnVisibleIndex;
}
/**
 * @record
 */
function ISelectionKeyboardState() { }
if (false) {
    /** @type {?} */
    ISelectionKeyboardState.prototype.node;
    /** @type {?} */
    ISelectionKeyboardState.prototype.shift;
    /** @type {?} */
    ISelectionKeyboardState.prototype.range;
    /** @type {?} */
    ISelectionKeyboardState.prototype.active;
}
/**
 * @record
 */
function ISelectionPointerState() { }
if (false) {
    /** @type {?} */
    ISelectionPointerState.prototype.ctrl;
    /** @type {?} */
    ISelectionPointerState.prototype.primaryButton;
}
// TODO: Refactor - export in a separate file
var 
// TODO: Refactor - export in a separate file
IgxRow = /** @class */ (function () {
    function IgxRow(id, index, data) {
        this.id = id;
        this.index = index;
        this.data = data;
    }
    /**
     * @return {?}
     */
    IgxRow.prototype.createEditEventArgs = /**
     * @return {?}
     */
    function () {
        return {
            rowID: this.id,
            oldValue: tslib_1.__assign({}, this.data),
            newValue: this.newData,
            cancel: false
        };
    };
    return IgxRow;
}());
// TODO: Refactor - export in a separate file
export { IgxRow };
if (false) {
    /** @type {?} */
    IgxRow.prototype.transactionState;
    /** @type {?} */
    IgxRow.prototype.state;
    /** @type {?} */
    IgxRow.prototype.newData;
    /** @type {?} */
    IgxRow.prototype.id;
    /** @type {?} */
    IgxRow.prototype.index;
    /** @type {?} */
    IgxRow.prototype.data;
}
var IgxCell = /** @class */ (function () {
    function IgxCell(id, rowIndex, column, value, editValue, rowData) {
        this.id = id;
        this.rowIndex = rowIndex;
        this.column = column;
        this.value = value;
        this.editValue = editValue;
        this.rowData = rowData;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxCell.prototype.castToNumber = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {
            /** @type {?} */
            var v = parseFloat(value);
            return !isNaN(v) && isFinite(v) ? v : 0;
        }
        return value;
    };
    /**
     * @return {?}
     */
    IgxCell.prototype.createEditEventArgs = /**
     * @return {?}
     */
    function () {
        return {
            rowID: this.id.rowID,
            cellID: this.id,
            oldValue: this.value,
            newValue: this.editValue,
            cancel: false
        };
    };
    return IgxCell;
}());
export { IgxCell };
if (false) {
    /** @type {?} */
    IgxCell.prototype.primaryKey;
    /** @type {?} */
    IgxCell.prototype.state;
    /** @type {?} */
    IgxCell.prototype.id;
    /** @type {?} */
    IgxCell.prototype.rowIndex;
    /** @type {?} */
    IgxCell.prototype.column;
    /** @type {?} */
    IgxCell.prototype.value;
    /** @type {?} */
    IgxCell.prototype.editValue;
    /** @type {?} */
    IgxCell.prototype.rowData;
}
var IgxGridCRUDService = /** @class */ (function () {
    function IgxGridCRUDService() {
        this.cell = null;
        this.row = null;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.createCell = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.createRow = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxGridCRUDService.prototype.sameRow = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        return this.row && this.row.id === rowID;
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.sameCell = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        return (this.cell.id.rowID === cell.id.rowID &&
            this.cell.id.columnID === cell.id.columnID);
    };
    Object.defineProperty(IgxGridCRUDService.prototype, "inEditMode", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.cell;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCRUDService.prototype, "rowEditing", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.rowEditable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCRUDService.prototype, "primaryKey", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.primaryKey;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridCRUDService.prototype.beginRowEdit = /**
     * @return {?}
     */
    function () {
        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {
            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');
        }
        this.row = this.createRow(this.cell);
        /** @type {?} */
        var args = {
            rowID: this.row.id,
            oldValue: this.row.data,
            cancel: false
        };
        this.grid.onRowEditEnter.emit(args);
        if (args.cancel) {
            this.endRowEdit();
            return;
        }
        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);
        this.grid.transactions.startPending();
        this.grid.openRowOverlay(this.row.id);
    };
    /**
     * @return {?}
     */
    IgxGridCRUDService.prototype.endRowEdit = /**
     * @return {?}
     */
    function () {
        this.row = null;
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.begin = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        this.cell = this.createCell(cell);
        this.cell.primaryKey = this.primaryKey;
        /** @type {?} */
        var args = {
            cellID: this.cell.id,
            rowID: this.cell.id.rowID,
            oldValue: this.cell.value,
            cancel: false
        };
        this.grid.onCellEditEnter.emit(args);
        if (args.cancel) {
            this.end();
            return;
        }
        if (this.rowEditing) {
            if (!this.row) {
                this.beginRowEdit();
                return;
            }
            if (this.row && !this.sameRow(this.cell.id.rowID)) {
                this.grid.endEdit(true);
                this.cell = this.createCell(cell);
                this.beginRowEdit();
                return;
            }
        }
        else {
            this.endRowEdit();
        }
    };
    /**
     * @return {?}
     */
    IgxGridCRUDService.prototype.end = /**
     * @return {?}
     */
    function () {
        this.cell = null;
    };
    /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridCRUDService.prototype.isInEditMode = /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    function (rowIndex, columnIndex) {
        if (!this.cell) {
            return false;
        }
        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;
    };
    IgxGridCRUDService.decorators = [
        { type: Injectable }
    ];
    return IgxGridCRUDService;
}());
export { IgxGridCRUDService };
if (false) {
    /** @type {?} */
    IgxGridCRUDService.prototype.grid;
    /** @type {?} */
    IgxGridCRUDService.prototype.cell;
    /** @type {?} */
    IgxGridCRUDService.prototype.row;
}
var IgxGridSelectionService = /** @class */ (function () {
    function IgxGridSelectionService(zone) {
        this.zone = zone;
        this.dragMode = false;
        this.keyboardState = (/** @type {?} */ ({}));
        this.pointerState = (/** @type {?} */ ({}));
        this.selection = new Map();
        this.temp = new Map();
        this._ranges = new Set();
        this.initPointerState();
        this.initKeyboardState();
    }
    Object.defineProperty(IgxGridSelectionService.prototype, "ranges", {
        /**
         * Returns the current selected ranges in the grid from both
         * keyboard and pointer interactions
         */
        get: /**
         * Returns the current selected ranges in the grid from both
         * keyboard and pointer interactions
         * @return {?}
         */
        function () {
            // The last action was keyboard + shift selection -> add it
            this.addKeyboardRange();
            /** @type {?} */
            var ranges = Array.from(this._ranges).map(function (range) { return JSON.parse(range); });
            // No ranges but we have a focused cell -> add it
            if (!ranges.length && this.activeElement) {
                ranges.push(this.generateRange(this.activeElement));
            }
            return ranges;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSelectionService.prototype, "primaryButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pointerState.primaryButton;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.pointerState.primaryButton = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the keyboard state
     */
    /**
     * Resets the keyboard state
     * @return {?}
     */
    IgxGridSelectionService.prototype.initKeyboardState = /**
     * Resets the keyboard state
     * @return {?}
     */
    function () {
        this.keyboardState.node = null;
        this.keyboardState.shift = false;
        this.keyboardState.range = null;
        this.keyboardState.active = false;
    };
    /**
     * Resets the pointer state
     */
    /**
     * Resets the pointer state
     * @return {?}
     */
    IgxGridSelectionService.prototype.initPointerState = /**
     * Resets the pointer state
     * @return {?}
     */
    function () {
        this.pointerState.node = null;
        this.pointerState.ctrl = false;
        this.pointerState.shift = false;
        this.pointerState.range = null;
        this.pointerState.primaryButton = true;
    };
    /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     */
    /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.add = /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :
            this.selection.set(node.row, new Set()).get(node.row).add(node.column);
        this._ranges.add(JSON.stringify(this.generateRange(node)));
    };
    /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     */
    /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     * @return {?}
     */
    IgxGridSelectionService.prototype.addKeyboardRange = /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     * @return {?}
     */
    function () {
        if (this.keyboardState.range) {
            this._ranges.add(JSON.stringify(this.keyboardState.range));
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.remove = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this.selection.has(node.row)) {
            this.selection.get(node.row).delete(node.column);
        }
        if (this.isActiveNode(node)) {
            this.activeElement = null;
        }
        this._ranges.delete(JSON.stringify(this.generateRange(node)));
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.isInMap = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||
            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.selected = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.isActiveNode(node) || this.isInMap(node);
    };
    /**
     * @param {?} node
     * @param {?=} mrl
     * @return {?}
     */
    IgxGridSelectionService.prototype.isActiveNode = /**
     * @param {?} node
     * @param {?=} mrl
     * @return {?}
     */
    function (node, mrl) {
        if (mrl === void 0) { mrl = false; }
        if (this.activeElement) {
            /** @type {?} */
            var isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;
            if (mrl) {
                /** @type {?} */
                var layout = this.activeElement.layout;
                return isActive && this.isActiveLayout(layout, node.layout);
            }
            return isActive;
        }
        return false;
    };
    /**
     * @param {?} current
     * @param {?} target
     * @return {?}
     */
    IgxGridSelectionService.prototype.isActiveLayout = /**
     * @param {?} current
     * @param {?} target
     * @return {?}
     */
    function (current, target) {
        return current.columnVisibleIndex === target.columnVisibleIndex;
    };
    /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.addRangeMeta = /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    function (node, state) {
        this._ranges.add(JSON.stringify(this.generateRange(node, state)));
    };
    /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.removeRangeMeta = /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    function (node, state) {
        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));
    };
    /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     */
    /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.generateRange = /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    function (node, state) {
        if (!state) {
            return {
                rowStart: node.row,
                rowEnd: node.row,
                columnStart: node.column,
                columnEnd: node.column
            };
        }
        var _a = state.node, row = _a.row, column = _a.column;
        /** @type {?} */
        var rowStart = Math.min(node.row, row);
        /** @type {?} */
        var rowEnd = Math.max(node.row, row);
        /** @type {?} */
        var columnStart = Math.min(node.column, column);
        /** @type {?} */
        var columnEnd = Math.max(node.column, column);
        return { rowStart: rowStart, rowEnd: rowEnd, columnStart: columnStart, columnEnd: columnEnd };
    };
    /**
     *
     */
    /**
     *
     * @param {?} node
     * @param {?} shift
     * @param {?} shiftTab
     * @return {?}
     */
    IgxGridSelectionService.prototype.keyboardStateOnKeydown = /**
     *
     * @param {?} node
     * @param {?} shift
     * @param {?} shiftTab
     * @return {?}
     */
    function (node, shift, shiftTab) {
        this.keyboardState.active = true;
        this.initPointerState();
        this.keyboardState.shift = shift && !shiftTab;
        // Kb navigation with shift and no previous node.
        // Clear the current selection init the start node.
        if (this.keyboardState.shift && !this.keyboardState.node) {
            this.clear();
            this.keyboardState.node = node;
        }
    };
    /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    IgxGridSelectionService.prototype.keyboardStateOnFocus = /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    function (node, emitter) {
        /** @type {?} */
        var kbState = this.keyboardState;
        // Focus triggered by keyboard navigation
        if (kbState.active) {
            // Start generating a range if shift is hold
            if (kbState.shift) {
                this.dragSelect(node, kbState);
                kbState.range = this.generateRange(node, kbState);
                emitter.emit(this.generateRange(node, kbState));
                return;
            }
            this.initKeyboardState();
            this.clear();
            this.add(node);
        }
    };
    /**
     * @param {?} node
     * @param {?} shift
     * @param {?} ctrl
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerDown = /**
     * @param {?} node
     * @param {?} shift
     * @param {?} ctrl
     * @return {?}
     */
    function (node, shift, ctrl) {
        this.addKeyboardRange();
        this.initKeyboardState();
        this.pointerState.ctrl = ctrl;
        this.pointerState.shift = shift;
        // No ctrl key pressed - no multiple selection
        if (!ctrl) {
            this.clear();
        }
        if (shift) {
            // No previously 'clicked' node. Use the last active node.
            if (!this.pointerState.node) {
                this.pointerState.node = this.activeElement || node;
            }
            this.pointerDownShiftKey(node);
            this.clearTextSelection();
            return;
        }
        this.removeRangeMeta(node);
        this.pointerState.node = node;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerDownShiftKey = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.clear();
        this.selectRange(node, this.pointerState);
    };
    /**
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    IgxGridSelectionService.prototype.mergeMap = /**
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    function (target, source) {
        /** @type {?} */
        var iterator = source.entries();
        /** @type {?} */
        var pair = iterator.next();
        /** @type {?} */
        var key;
        /** @type {?} */
        var value;
        var _loop_1 = function () {
            var _a;
            _a = tslib_1.__read(pair.value, 2), key = _a[0], value = _a[1];
            if (target.has(key)) {
                /** @type {?} */
                var newValue_1 = target.get(key);
                value.forEach(function (record) { return newValue_1.add(record); });
                target.set(key, newValue_1);
            }
            else {
                target.set(key, value);
            }
            pair = iterator.next();
        };
        while (!pair.done) {
            _loop_1();
        }
    };
    /**
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerEnter = /**
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (node, event) {
        // https://www.w3.org/TR/pointerevents/#the-button-property
        this.dragMode = event.buttons === 1 && event.button === -1;
        if (!this.dragMode) {
            return false;
        }
        this.clearTextSelection();
        // If the users triggers a drag-like event by first clicking outside the grid cells
        // and then enters in the grid body we may not have a initial pointer starting node.
        // Assume the first pointerenter node is where we start.
        if (!this.pointerState.node) {
            this.pointerState.node = node;
        }
        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :
            this.dragSelect(node, this.pointerState);
        return true;
    };
    /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerUp = /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    function (node, emitter) {
        var _this = this;
        if (this.dragMode) {
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            this.mergeMap(this.selection, this.temp);
            this.zone.runTask(function () { return emitter.emit(_this.generateRange(node, _this.pointerState)); });
            this.temp.clear();
            this.dragMode = false;
            return true;
        }
        if (this.pointerState.shift) {
            this.clearTextSelection();
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            emitter.emit(this.generateRange(node, this.pointerState));
            return true;
        }
        this.add(node);
        return false;
    };
    /**
     * @param {?} node
     * @param {?} state
     * @param {?=} collection
     * @return {?}
     */
    IgxGridSelectionService.prototype.selectRange = /**
     * @param {?} node
     * @param {?} state
     * @param {?=} collection
     * @return {?}
     */
    function (node, state, collection) {
        if (collection === void 0) { collection = this.selection; }
        if (collection === this.temp) {
            collection.clear();
        }
        var _a = this.generateRange(node, state), rowStart = _a.rowStart, rowEnd = _a.rowEnd, columnStart = _a.columnStart, columnEnd = _a.columnEnd;
        for (var i = rowStart; i <= rowEnd; i++) {
            for (var j = (/** @type {?} */ (columnStart)); j <= columnEnd; j++) {
                collection.has(i) ? collection.get(i).add(j) :
                    collection.set(i, new Set()).get(i).add(j);
            }
        }
    };
    /**
     * @param {?} node
     * @param {?} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.dragSelect = /**
     * @param {?} node
     * @param {?} state
     * @return {?}
     */
    function (node, state) {
        if (!this.pointerState.ctrl) {
            this.selection.clear();
        }
        this.selectRange(node, state);
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.selection.clear();
        this.temp.clear();
        this._ranges.clear();
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.clearTextSelection = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selection = window.getSelection();
        if (selection.rangeCount) {
            this._selectionRange = selection.getRangeAt(0);
            this._selectionRange.collapse(true);
            selection.removeAllRanges();
        }
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.restoreTextSelection = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selection = window.getSelection();
        if (!selection.rangeCount) {
            selection.addRange(this._selectionRange || document.createRange());
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype._moveSelectionChrome = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var selection = window.getSelection();
        selection.removeAllRanges();
        /** @type {?} */
        var range = new Range();
        range.selectNode(node);
        range.collapse(true);
        selection.addRange(range);
    };
    IgxGridSelectionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    IgxGridSelectionService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    return IgxGridSelectionService;
}());
export { IgxGridSelectionService };
if (false) {
    /** @type {?} */
    IgxGridSelectionService.prototype.dragMode;
    /** @type {?} */
    IgxGridSelectionService.prototype.activeElement;
    /** @type {?} */
    IgxGridSelectionService.prototype.keyboardState;
    /** @type {?} */
    IgxGridSelectionService.prototype.pointerState;
    /** @type {?} */
    IgxGridSelectionService.prototype.selection;
    /** @type {?} */
    IgxGridSelectionService.prototype.temp;
    /** @type {?} */
    IgxGridSelectionService.prototype._ranges;
    /** @type {?} */
    IgxGridSelectionService.prototype._selectionRange;
    /**
     * @type {?}
     * @private
     */
    IgxGridSelectionService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,