import { IgxGridBaseComponent } from './grid-base.component';
import { IgxColumnComponent } from './column.component';
import { ISelectionNode } from '../core/grid-selection';
/** @hidden */
export declare class IgxGridNavigationService {
    grid: IgxGridBaseComponent;
    readonly displayContainerWidth: number;
    readonly displayContainerScrollLeft: number;
    readonly verticalDisplayContainerElement: any;
    horizontalScroll(rowIndex: any): any;
    getColumnUnpinnedIndex(visibleColumnIndex: number): number;
    isColumnFullyVisible(visibleColumnIndex: number): boolean;
    isColumnLeftFullyVisible(visibleColumnIndex: any): boolean;
    readonly gridOrderedColumns: IgxColumnComponent[];
    isRowInEditMode(rowIndex: any): boolean;
    findNextEditable(direction: string, visibleColumnIndex: number): number;
    getCellElementByVisibleIndex(rowIndex: any, visibleColumnIndex: any, isSummary?: boolean): any;
    onKeydownArrowRight(element: any, selectedNode: ISelectionNode): void;
    onKeydownArrowLeft(element: any, selectedNode: ISelectionNode): void;
    movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number): void;
    moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number): void;
    focusNextEditableTarget(rowIndex: number, columnIndex: number): void;
    onKeydownHome(rowIndex: any, isSummary?: boolean): void;
    onKeydownEnd(rowIndex: any, isSummary?: boolean): void;
    navigateTop(visibleColumnIndex: any): void;
    navigateBottom(visibleColumnIndex: any): void;
    navigateUp(rowElement: any, selectedNode: ISelectionNode): void;
    protected focusPreviousElement(currentRowEl: any, visibleColumnIndex: any): void;
    navigateDown(rowElement: any, selectedNode: ISelectionNode): void;
    protected focusElem(rowElement: any, visibleColumnIndex: any): any;
    protected focusNextElement(rowElement: any, visibleColumnIndex: any): any;
    goToFirstCell(): void;
    goToLastCell(): void;
    goToLastBodyElement(): void;
    performTab(currentRowEl: any, selectedNode: ISelectionNode): void;
    moveFocusToFilterCell(toStart?: boolean): void;
    navigatePrevFilterCell(column: IgxColumnComponent, eventArgs: any): void;
    navigateFirstCellIfPossible(eventArgs: any): void;
    navigateNextFilterCell(column: IgxColumnComponent, eventArgs: any): void;
    private getLastPinnedFilterableColumn;
    private getFirstPinnedFilterableColumn;
    performShiftTabKey(currentRowEl: any, selectedNode: ISelectionNode): void;
    shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean;
    performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void): void;
    performHorizontalScrollToCell(rowIndex: number, visibleColumnIndex: number, isSummary?: boolean, cb?: () => void): void;
    protected getRowByIndex(index: any, selector?: string): any;
    protected getNextRowByIndex(nextIndex: any): any;
    private getAllRows;
    protected getCellSelector(visibleIndex?: number, isSummary?: boolean): string;
    protected getRowSelector(): string;
}
