/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneArray } from '../core/utils';
import { SortingDirection } from './sorting-expression.interface';
/**
 * @record
 */
export function ISortingStrategy() { }
if (false) {
    /** @type {?} */
    ISortingStrategy.prototype.sort;
}
export class DefaultSortingStrategy {
    /**
     * @protected
     */
    constructor() { }
    /**
     * @return {?}
     */
    static instance() {
        return this._instance || (this._instance = new this());
    }
    /**
     * @param {?} data
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} valueResolver
     * @return {?}
     */
    sort(data, fieldName, dir, ignoreCase, valueResolver) {
        /** @type {?} */
        const key = fieldName;
        /** @type {?} */
        const reverse = (dir === SortingDirection.Desc ? -1 : 1);
        /** @type {?} */
        const cmpFunc = (obj1, obj2) => {
            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);
        };
        return this.arraySort(data, cmpFunc);
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    compareValues(a, b) {
        /** @type {?} */
        const an = (a === null || a === undefined);
        /** @type {?} */
        const bn = (b === null || b === undefined);
        if (an) {
            if (bn) {
                return 0;
            }
            return -1;
        }
        else if (bn) {
            return 1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
    }
    /**
     * @protected
     * @param {?} obj1
     * @param {?} obj2
     * @param {?} key
     * @param {?} reverse
     * @param {?} ignoreCase
     * @param {?} valueResolver
     * @return {?}
     */
    compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver) {
        /** @type {?} */
        let a = valueResolver(obj1, key);
        /** @type {?} */
        let b = valueResolver(obj2, key);
        if (ignoreCase) {
            a = a && a.toLowerCase ? a.toLowerCase() : a;
            b = b && b.toLowerCase ? b.toLowerCase() : b;
        }
        return reverse * this.compareValues(a, b);
    }
    /**
     * @protected
     * @param {?} data
     * @param {?=} compareFn
     * @return {?}
     */
    arraySort(data, compareFn) {
        return data.sort(compareFn);
    }
}
DefaultSortingStrategy._instance = null;
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultSortingStrategy._instance;
}
export class IgxSorting {
    /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    sort(data, expressions) {
        return this.sortDataRecursive(data, expressions);
    }
    /**
     * @private
     * @param {?} data
     * @param {?} index
     * @param {?} expression
     * @return {?}
     */
    groupedRecordsByExpression(data, index, expression) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let groupval;
        /** @type {?} */
        const res = [];
        /** @type {?} */
        const key = expression.fieldName;
        /** @type {?} */
        const len = data.length;
        res.push(data[index]);
        groupval = this.getFieldValue(data[index], key);
        index++;
        /** @type {?} */
        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;
        for (i = index; i < len; i++) {
            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {
                res.push(data[i]);
            }
            else {
                break;
            }
        }
        return res;
    }
    /**
     * @private
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} expressionIndex
     * @return {?}
     */
    sortDataRecursive(data, expressions, expressionIndex = 0) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let j;
        /** @type {?} */
        let expr;
        /** @type {?} */
        let gbData;
        /** @type {?} */
        let gbDataLen;
        /** @type {?} */
        const exprsLen = expressions.length;
        /** @type {?} */
        const dataLen = data.length;
        expressionIndex = expressionIndex || 0;
        if (expressionIndex >= exprsLen || dataLen <= 1) {
            return data;
        }
        expr = expressions[expressionIndex];
        if (!expr.strategy) {
            expr.strategy = DefaultSortingStrategy.instance();
        }
        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);
        if (expressionIndex === exprsLen - 1) {
            return data;
        }
        // in case of multiple sorting
        for (i = 0; i < dataLen; i++) {
            gbData = this.groupedRecordsByExpression(data, i, expr);
            gbDataLen = gbData.length;
            if (gbDataLen > 1) {
                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);
            }
            for (j = 0; j < gbDataLen; j++) {
                data[i + j] = gbData[j];
            }
            i += gbDataLen - 1;
        }
        return data;
    }
    /**
     * @protected
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?} level
     * @param {?} parent
     * @param {?} metadata
     * @param {?=} grid
     * @param {?=} groupsRecords
     * @return {?}
     */
    groupDataRecursive(data, expressions, level, parent, metadata, grid = null, groupsRecords = []) {
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let result = [];
        while (i < data.length) {
            /** @type {?} */
            const group = this.groupedRecordsByExpression(data, i, expressions[level]);
            /** @type {?} */
            const groupRow = {
                expression: expressions[level],
                level,
                records: cloneArray(group),
                value: group[0][expressions[level].fieldName],
                groupParent: parent,
                groups: [],
                height: grid ? grid.renderedRowHeight : null
            };
            if (parent) {
                parent.groups.push(groupRow);
            }
            else {
                groupsRecords.push(groupRow);
            }
            if (level < expressions.length - 1) {
                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata, grid, groupsRecords));
            }
            else {
                for (const groupItem of group) {
                    metadata.push(groupRow);
                    result.push(groupItem);
                }
            }
            i += group.length;
        }
        return result;
    }
    /**
     * @protected
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    getFieldValue(obj, key) {
        return obj[key];
    }
}
export class IgxDataRecordSorting extends IgxSorting {
    /**
     * @protected
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    getFieldValue(obj, key) {
        return obj.data[key];
    }
}
//# sourceMappingURL=data:application/json;base64,