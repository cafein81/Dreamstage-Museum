/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const TransactionType = {
    ADD: 'add',
    DELETE: 'delete',
    UPDATE: 'update',
};
export { TransactionType };
/**
 * @record
 */
export function Transaction() { }
if (false) {
    /** @type {?} */
    Transaction.prototype.id;
    /** @type {?} */
    Transaction.prototype.type;
    /** @type {?} */
    Transaction.prototype.newValue;
}
/**
 * \@experimental
 * @hidden
 * @record
 */
export function HierarchicalTransaction() { }
if (false) {
    /** @type {?} */
    HierarchicalTransaction.prototype.path;
}
/**
 * @record
 */
export function State() { }
if (false) {
    /** @type {?} */
    State.prototype.value;
    /** @type {?} */
    State.prototype.recordRef;
    /** @type {?} */
    State.prototype.type;
}
/**
 * \@experimental
 * @hidden
 * @record
 */
export function HierarchicalState() { }
if (false) {
    /** @type {?} */
    HierarchicalState.prototype.path;
}
/**
 * @record
 * @template T, S
 */
export function TransactionService() { }
if (false) {
    /**
     * Returns whether transaction is enabled for this service
     * @type {?}
     */
    TransactionService.prototype.enabled;
    /**
     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo
     * @type {?|undefined}
     */
    TransactionService.prototype.onStateUpdate;
    /**
     * \@return if there are any transactions in the Undo stack
     * @type {?}
     */
    TransactionService.prototype.canUndo;
    /**
     * \@return if there are any transactions in the Redo stack
     * @type {?}
     */
    TransactionService.prototype.canRedo;
    /**
     * Adds provided  transaction with recordRef if any
     * @param {?} transaction Transaction to be added
     * @param {?=} recordRef Reference to the value of the record in the data source related to the changed item
     * @return {?}
     */
    TransactionService.prototype.add = function (transaction, recordRef) { };
    /**
     * Returns all recorded transactions in chronological order
     * @param {?=} id Optional record id to get transactions for
     * @return {?} All transaction in the service or for the specified record
     */
    TransactionService.prototype.getTransactionLog = function (id) { };
    /**
     * Remove the last transaction if any
     * @return {?}
     */
    TransactionService.prototype.undo = function () { };
    /**
     * Applies the last undone transaction if any
     * @return {?}
     */
    TransactionService.prototype.redo = function () { };
    /**
     * Returns aggregated changes from all transactions
     * @param {?} mergeChanges If set to true will merge each state's value over relate recordRef
     * and will record resulting value in the related transaction
     * @return {?} Collection of aggregated transactions for each changed record
     */
    TransactionService.prototype.getAggregatedChanges = function (mergeChanges) { };
    /**
     * Returns the state of the record with provided id
     * @param {?} id The id of the record
     * @return {?} State of the record if any
     */
    TransactionService.prototype.getState = function (id) { };
    /**
     * Returns value of the required id including all uncommitted changes
     * @param {?} id The id of the record to return value for
     * @param {?} mergeChanges If set to true will merge state's value over relate recordRef
     * and will return merged value
     * @return {?} Value with changes or **null**
     */
    TransactionService.prototype.getAggregatedValue = function (id, mergeChanges) { };
    /**
     * Applies all transactions over the provided data
     * @param {?} data Data source to update
     * @param {?=} id Optional record id to commit transactions for
     * @return {?}
     */
    TransactionService.prototype.commit = function (data, id) { };
    /**
     * Clears all transactions
     * @param {?=} id Optional record id to clear transactions for
     * @return {?}
     */
    TransactionService.prototype.clear = function (id) { };
    /**
     * Starts pending transactions. All transactions passed after call to startPending
     * will not be added to transaction log
     * @return {?}
     */
    TransactionService.prototype.startPending = function () { };
    /**
     * Clears all pending transactions and aggregated pending state. If commit is set to true
     * commits pending states as single transaction
     * @param {?} commit Should commit the pending states
     * @return {?}
     */
    TransactionService.prototype.endPending = function (commit) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RyYW5zYWN0aW9uL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztJQUdJLEtBQU0sS0FBSztJQUNYLFFBQVMsUUFBUTtJQUNqQixRQUFTLFFBQVE7Ozs7OztBQUdyQixpQ0FJQzs7O0lBSEcseUJBQVE7O0lBQ1IsMkJBQXNCOztJQUN0QiwrQkFBYzs7Ozs7OztBQU9sQiw2Q0FFQzs7O0lBREcsdUNBQVk7Ozs7O0FBR2hCLDJCQUlDOzs7SUFIRyxzQkFBVzs7SUFDWCwwQkFBZTs7SUFDZixxQkFBc0I7Ozs7Ozs7QUFPMUIsdUNBRUM7OztJQURHLGlDQUFZOzs7Ozs7QUFHaEIsd0NBOEZDOzs7Ozs7SUExRkcscUNBQTBCOzs7OztJQUsxQiwyQ0FBbUM7Ozs7O0lBS25DLHFDQUFpQjs7Ozs7SUFLakIscUNBQWlCOzs7Ozs7O0lBT2pCLHlFQUEyQzs7Ozs7O0lBTzNDLG1FQUFpQzs7Ozs7SUFLakMsb0RBQWE7Ozs7O0lBS2Isb0RBQWE7Ozs7Ozs7SUFRYixnRkFBaUQ7Ozs7OztJQU9qRCwwREFBcUI7Ozs7Ozs7O0lBU3JCLGtGQUF3RDs7Ozs7OztJQU94RCw4REFBb0M7Ozs7OztJQU1wQyx1REFBc0I7Ozs7OztJQU10Qiw0REFBcUI7Ozs7Ozs7SUFPckIsZ0VBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBlbnVtIFRyYW5zYWN0aW9uVHlwZSB7XG4gICAgQUREID0gJ2FkZCcsXG4gICAgREVMRVRFID0gJ2RlbGV0ZScsXG4gICAgVVBEQVRFID0gJ3VwZGF0ZSdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2FjdGlvbiB7XG4gICAgaWQ6IGFueTtcbiAgICB0eXBlOiBUcmFuc2FjdGlvblR5cGU7XG4gICAgbmV3VmFsdWU6IGFueTtcbn1cblxuLyoqXG4gKiBAZXhwZXJpbWVudGFsXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGllcmFyY2hpY2FsVHJhbnNhY3Rpb24gZXh0ZW5kcyBUcmFuc2FjdGlvbiB7XG4gICAgcGF0aDogYW55W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xuICAgIHZhbHVlOiBhbnk7XG4gICAgcmVjb3JkUmVmOiBhbnk7XG4gICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlO1xufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaWVyYXJjaGljYWxTdGF0ZSBleHRlbmRzIFN0YXRlIHtcbiAgICBwYXRoOiBhbnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2FjdGlvblNlcnZpY2U8VCBleHRlbmRzIFRyYW5zYWN0aW9uLCBTIGV4dGVuZHMgU3RhdGU+IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdHJhbnNhY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBzZXJ2aWNlXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlZDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGZpcmVkIHdoZW4gdHJhbnNhY3Rpb24gc3RhdGUgaGFzIGNoYW5nZWQgLSBhZGQgdHJhbnNhY3Rpb24sIGNvbW1pdCBhbGwgdHJhbnNhY3Rpb25zLCB1bmRvIGFuZCByZWRvXG4gICAgICovXG4gICAgb25TdGF0ZVVwZGF0ZT86IEV2ZW50RW1pdHRlcjx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGlmIHRoZXJlIGFyZSBhbnkgdHJhbnNhY3Rpb25zIGluIHRoZSBVbmRvIHN0YWNrXG4gICAgICovXG4gICAgY2FuVW5kbzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGlmIHRoZXJlIGFyZSBhbnkgdHJhbnNhY3Rpb25zIGluIHRoZSBSZWRvIHN0YWNrXG4gICAgICovXG4gICAgY2FuUmVkbzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgcHJvdmlkZWQgIHRyYW5zYWN0aW9uIHdpdGggcmVjb3JkUmVmIGlmIGFueVxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbiBUcmFuc2FjdGlvbiB0byBiZSBhZGRlZFxuICAgICAqIEBwYXJhbSByZWNvcmRSZWYgUmVmZXJlbmNlIHRvIHRoZSB2YWx1ZSBvZiB0aGUgcmVjb3JkIGluIHRoZSBkYXRhIHNvdXJjZSByZWxhdGVkIHRvIHRoZSBjaGFuZ2VkIGl0ZW1cbiAgICAgKi9cbiAgICBhZGQodHJhbnNhY3Rpb246IFQsIHJlY29yZFJlZj86IGFueSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCByZWNvcmRlZCB0cmFuc2FjdGlvbnMgaW4gY2hyb25vbG9naWNhbCBvcmRlclxuICAgICAqIEBwYXJhbSBpZCBPcHRpb25hbCByZWNvcmQgaWQgdG8gZ2V0IHRyYW5zYWN0aW9ucyBmb3JcbiAgICAgKiBAcmV0dXJucyBBbGwgdHJhbnNhY3Rpb24gaW4gdGhlIHNlcnZpY2Ugb3IgZm9yIHRoZSBzcGVjaWZpZWQgcmVjb3JkXG4gICAgICovXG4gICAgZ2V0VHJhbnNhY3Rpb25Mb2coaWQ/OiBhbnkpOiBUW107XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGxhc3QgdHJhbnNhY3Rpb24gaWYgYW55XG4gICAgICovXG4gICAgdW5kbygpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgbGFzdCB1bmRvbmUgdHJhbnNhY3Rpb24gaWYgYW55XG4gICAgICovXG4gICAgcmVkbygpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhZ2dyZWdhdGVkIGNoYW5nZXMgZnJvbSBhbGwgdHJhbnNhY3Rpb25zXG4gICAgICogQHBhcmFtIG1lcmdlQ2hhbmdlcyBJZiBzZXQgdG8gdHJ1ZSB3aWxsIG1lcmdlIGVhY2ggc3RhdGUncyB2YWx1ZSBvdmVyIHJlbGF0ZSByZWNvcmRSZWZcbiAgICAgKiBhbmQgd2lsbCByZWNvcmQgcmVzdWx0aW5nIHZhbHVlIGluIHRoZSByZWxhdGVkIHRyYW5zYWN0aW9uXG4gICAgICogQHJldHVybnMgQ29sbGVjdGlvbiBvZiBhZ2dyZWdhdGVkIHRyYW5zYWN0aW9ucyBmb3IgZWFjaCBjaGFuZ2VkIHJlY29yZFxuICAgICAqL1xuICAgIGdldEFnZ3JlZ2F0ZWRDaGFuZ2VzKG1lcmdlQ2hhbmdlczogYm9vbGVhbik6IFRbXTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0YXRlIG9mIHRoZSByZWNvcmQgd2l0aCBwcm92aWRlZCBpZFxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHJlY29yZFxuICAgICAqIEByZXR1cm5zIFN0YXRlIG9mIHRoZSByZWNvcmQgaWYgYW55XG4gICAgICovXG4gICAgZ2V0U3RhdGUoaWQ6IGFueSk6IFM7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZhbHVlIG9mIHRoZSByZXF1aXJlZCBpZCBpbmNsdWRpbmcgYWxsIHVuY29tbWl0dGVkIGNoYW5nZXNcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSByZWNvcmQgdG8gcmV0dXJuIHZhbHVlIGZvclxuICAgICAqIEBwYXJhbSBtZXJnZUNoYW5nZXMgSWYgc2V0IHRvIHRydWUgd2lsbCBtZXJnZSBzdGF0ZSdzIHZhbHVlIG92ZXIgcmVsYXRlIHJlY29yZFJlZlxuICAgICAqIGFuZCB3aWxsIHJldHVybiBtZXJnZWQgdmFsdWVcbiAgICAgKiBAcmV0dXJucyBWYWx1ZSB3aXRoIGNoYW5nZXMgb3IgKipudWxsKipcbiAgICAgKi9cbiAgICBnZXRBZ2dyZWdhdGVkVmFsdWUoaWQ6IGFueSwgbWVyZ2VDaGFuZ2VzOiBib29sZWFuKTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBhbGwgdHJhbnNhY3Rpb25zIG92ZXIgdGhlIHByb3ZpZGVkIGRhdGFcbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHNvdXJjZSB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gaWQgT3B0aW9uYWwgcmVjb3JkIGlkIHRvIGNvbW1pdCB0cmFuc2FjdGlvbnMgZm9yXG4gICAgICovXG4gICAgY29tbWl0KGRhdGE6IGFueVtdLCBpZD86IGFueSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHRyYW5zYWN0aW9uc1xuICAgICAqIEBwYXJhbSBpZCBPcHRpb25hbCByZWNvcmQgaWQgdG8gY2xlYXIgdHJhbnNhY3Rpb25zIGZvclxuICAgICAqL1xuICAgIGNsZWFyKGlkPzogYW55KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBwZW5kaW5nIHRyYW5zYWN0aW9ucy4gQWxsIHRyYW5zYWN0aW9ucyBwYXNzZWQgYWZ0ZXIgY2FsbCB0byBzdGFydFBlbmRpbmdcbiAgICAgKiB3aWxsIG5vdCBiZSBhZGRlZCB0byB0cmFuc2FjdGlvbiBsb2dcbiAgICAgKi9cbiAgICBzdGFydFBlbmRpbmcoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgcGVuZGluZyB0cmFuc2FjdGlvbnMgYW5kIGFnZ3JlZ2F0ZWQgcGVuZGluZyBzdGF0ZS4gSWYgY29tbWl0IGlzIHNldCB0byB0cnVlXG4gICAgICogY29tbWl0cyBwZW5kaW5nIHN0YXRlcyBhcyBzaW5nbGUgdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0gY29tbWl0IFNob3VsZCBjb21taXQgdGhlIHBlbmRpbmcgc3RhdGVzXG4gICAgICovXG4gICAgZW5kUGVuZGluZyhjb21taXQ6IGJvb2xlYW4pOiB2b2lkO1xufVxuIl19