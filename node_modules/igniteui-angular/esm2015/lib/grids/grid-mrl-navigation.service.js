/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { first } from 'rxjs/operators';
import { IgxGridNavigationService } from './grid-navigation.service';
/**
 * @record
 */
export function IStartNavigationCell() { }
if (false) {
    /** @type {?} */
    IStartNavigationCell.prototype.rowStart;
    /** @type {?} */
    IStartNavigationCell.prototype.colStart;
    /** @type {?} */
    IStartNavigationCell.prototype.direction;
}
/** @enum {string} */
const NavigationDirection = {
    horizontal: 'horizontal',
    vertical: 'vertical',
};
export { NavigationDirection };
/**
 * @hidden
 */
export class IgxGridMRLNavigationService extends IgxGridNavigationService {
    /**
     * @hidden
     * \@internal
     * @param {?} colStart
     * @param {?} rowStart
     * @param {?} dir
     * @return {?}
     */
    setStartNavigationCell(colStart, rowStart, dir) {
        this.startNavigationCell = {
            colStart: colStart,
            rowStart: rowStart,
            direction: dir
        };
    }
    /**
     * @private
     * @param {?} colStart
     * @param {?} rowStart
     * @param {?} navDirection
     * @return {?}
     */
    applyNavigationCell(colStart, rowStart, navDirection) {
        /** @type {?} */
        const oppositeDir = navDirection === NavigationDirection.vertical ?
            NavigationDirection.horizontal : NavigationDirection.vertical;
        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {
            this.startNavigationCell.direction = oppositeDir;
        }
        else {
            this.setStartNavigationCell(colStart, rowStart, oppositeDir);
        }
        return navDirection === NavigationDirection.vertical ?
            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;
    }
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    navigateUp(rowElement, selectedNode) {
        this.focusCellUpFromLayout(rowElement, selectedNode);
    }
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    navigateDown(rowElement, selectedNode) {
        this.focusCellDownFromLayout(rowElement, selectedNode);
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    isColumnFullyVisible(visibleColumnIndex) {
        /** @type {?} */
        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);
        /** @type {?} */
        const forOfDir = this.grid.headerContainer;
        /** @type {?} */
        const horizontalScroll = forOfDir.getHorizontalScroll();
        if (!horizontalScroll.clientWidth || (column && column.pinned)) {
            return true;
        }
        else if (column) {
            if (this.isParentColumnFullyVisible(column)) {
                return true;
            }
            /** @type {?} */
            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&
                this.displayContainerScrollLeft <= scrollPos.leftScroll;
        }
        return false;
    }
    /**
     * @private
     * @param {?} parent
     * @return {?}
     */
    isParentColumnFullyVisible(parent) {
        /** @type {?} */
        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;
        /** @type {?} */
        const horizontalScroll = forOfDir.getHorizontalScroll();
        if (!horizontalScroll.clientWidth || parent.pinned) {
            return true;
        }
        /** @type {?} */
        const index = forOfDir.igxForOf.indexOf(parent);
        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&
            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);
    }
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    isColumnLeftFullyVisible(visibleColumnIndex) {
        /** @type {?} */
        const forOfDir = this.grid.headerContainer;
        /** @type {?} */
        const horizontalScroll = forOfDir.getHorizontalScroll();
        /** @type {?} */
        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);
        if (!horizontalScroll.clientWidth || column.pinned) {
            return true;
        }
        if (this.isParentColumnFullyVisible(column)) {
            return true;
        }
        /** @type {?} */
        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
        return this.displayContainerScrollLeft <= scrollPos.leftScroll;
    }
    /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    onKeydownArrowRight(element, selectedNode) {
        this.focusNextCellFromLayout(element, selectedNode);
    }
    /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    onKeydownArrowLeft(element, selectedNode) {
        this.focusPrevCellFromLayout(element, selectedNode);
    }
    /**
     * @return {?}
     */
    get gridOrderedColumns() {
        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)
            .sort((a, b) => a.visibleIndex - b.visibleIndex);
    }
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    performTab(currentRowEl, selectedNode) {
        /** @type {?} */
        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;
        /** @type {?} */
        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);
        /** @type {?} */
        const rowIndex = selectedNode.row;
        /** @type {?} */
        const row = this.grid.getRowByIndex(rowIndex);
        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');
        if (nextElementColumn) {
            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);
        }
    }
    /**
     * @protected
     * @param {?} currentRowEl
     * @param {?} nextElementColumn
     * @param {?} row
     * @param {?} selectedNode
     * @param {?} dir
     * @return {?}
     */
    _moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, dir) {
        if (nextElementColumn && row.cells) {
            /** @type {?} */
            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);
            /** @type {?} */
            const isVisible = this.isColumnFullyVisible(nextElementColumn.visibleIndex);
            if (!nextCell || !isVisible) {
                this.grid.nativeElement.focus({ preventScroll: true });
                /** @type {?} */
                const cb = () => {
                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);
                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {
                        if (dir === 'next') {
                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);
                        }
                        else {
                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);
                        }
                        return;
                    }
                    this._focusCell(nextCell.nativeElement);
                };
                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);
            }
            else {
                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {
                    if (dir === 'next') {
                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);
                    }
                    else {
                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);
                    }
                    return;
                }
                this._focusCell(nextCell.nativeElement);
            }
        }
        else {
            // end of layout reached
            if (this.isRowInEditMode(row.index)) {
                if (dir === 'next') {
                    this.grid.rowEditTabs.first.element.nativeElement.focus();
                }
                else {
                    this.grid.rowEditTabs.last.element.nativeElement.focus();
                }
                return;
            }
            if (dir === 'next') {
                super.navigateDown(currentRowEl, { row: row.index, column: 0 });
            }
            else {
                /** @type {?} */
                let lastVisibleIndex = 0;
                this.grid.unpinnedColumns.forEach((col) => {
                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);
                });
                super.navigateUp(currentRowEl, { row: row.index, column: lastVisibleIndex });
            }
        }
    }
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    performShiftTabKey(currentRowEl, selectedNode) {
        /** @type {?} */
        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;
        /** @type {?} */
        const rowIndex = selectedNode.row;
        /** @type {?} */
        const row = this.grid.getRowByIndex(rowIndex);
        /** @type {?} */
        const prevElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);
        this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');
        if (prevElementColumn) {
            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);
        }
    }
    /**
     * @private
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    focusCellUpFromLayout(rowElement, selectedNode) {
        /** @type {?} */
        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';
        /** @type {?} */
        const currentRowStart = selectedNode.layout ? selectedNode.layout.rowStart : 1;
        /** @type {?} */
        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1, currentRowStart, NavigationDirection.vertical);
        /** @type {?} */
        const parentIndex = selectedNode.column;
        /** @type {?} */
        const columnLayout = this.grid.columns.find(x => x.columnLayout && x.visibleIndex === parentIndex);
        /** @type {?} */
        let movePrev;
        // check if element up is from the same layout
        /** @type {?} */
        let upperElementColumn = columnLayout.children.find(c => (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart) &&
            c.colStart <= currentColStart &&
            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));
        if (isGroupRow || !upperElementColumn) {
            // no prev row in current row layout, go to next row last rowstart
            /** @type {?} */
            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;
            upperElementColumn = columnLayout.children.find(c => (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&
                c.colStart <= currentColStart &&
                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));
            movePrev = true;
        }
        /** @type {?} */
        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;
        if (rowIndex < 0) {
            // end of rows reached.
            return;
        }
        /** @type {?} */
        let prevRow;
        /** @type {?} */
        const cb = () => {
            prevRow = this.grid.getRowByIndex(rowIndex);
            if (prevRow && prevRow.cells) {
                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);
            }
            else if (prevRow) {
                prevRow.nativeElement.focus({ preventScroll: true });
            }
        };
        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);
        }
        else {
            cb();
        }
    }
    /**
     * @private
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    focusCellDownFromLayout(rowElement, selectedNode) {
        /** @type {?} */
        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';
        /** @type {?} */
        const parentIndex = selectedNode.column;
        /** @type {?} */
        const columnLayout = this.grid.columns.find(x => x.columnLayout && x.visibleIndex === parentIndex);
        /** @type {?} */
        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;
        /** @type {?} */
        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1, selectedNode.layout ? selectedNode.layout.rowStart : 1, NavigationDirection.vertical);
        /** @type {?} */
        let moveNext;
        // check if element down is from the same layout
        /** @type {?} */
        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&
            c.colStart <= currentColStart &&
            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));
        if (isGroupRow || !nextElementColumn) {
            // no next row in current row layout, go to next row first rowstart
            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&
                c.colStart <= currentColStart &&
                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));
            moveNext = true;
        }
        /** @type {?} */
        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;
        if (rowIndex > this.grid.verticalScrollContainer.igxForOf.length - 1) {
            // end of rows reached.
            return;
        }
        /** @type {?} */
        let nextRow;
        /** @type {?} */
        const cb = () => {
            nextRow = this.grid.getRowByIndex(rowIndex);
            if (nextRow && nextRow.cells) {
                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);
            }
            else if (nextRow) {
                nextRow.nativeElement.focus({ preventScroll: true });
            }
        };
        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);
        }
        else {
            cb();
        }
    }
    /**
     * @private
     * @param {?} cellElement
     * @param {?} selectedNode
     * @return {?}
     */
    focusNextCellFromLayout(cellElement, selectedNode) {
        /** @type {?} */
        const parentIndex = selectedNode.column;
        /** @type {?} */
        let columnLayout = this.grid.columns.find(x => x.columnLayout && x.visibleIndex === parentIndex);
        /** @type {?} */
        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;
        /** @type {?} */
        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart, selectedNode.layout.rowStart, NavigationDirection.horizontal);
        /** @type {?} */
        const rowIndex = selectedNode.row;
        // check if next element is from the same layout
        /** @type {?} */
        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));
        if (!nextElementColumn) {
            // no next column in current layout, search for next layout
            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);
            if (!columnLayout) {
                // reached the end
                return null;
            }
            // next element is from the next layout
            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));
        }
        /** @type {?} */
        const cb = () => {
            /** @type {?} */
            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;
            this._focusCell(nextElement);
        };
        if (!this.isColumnFullyVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
        }
        else {
            cb();
        }
    }
    /**
     * @private
     * @param {?} cellElement
     * @param {?} selectedNode
     * @return {?}
     */
    focusPrevCellFromLayout(cellElement, selectedNode) {
        /** @type {?} */
        const parentIndex = selectedNode.column;
        /** @type {?} */
        let columnLayout = this.grid.columns.find(x => x.columnLayout && x.visibleIndex === parentIndex);
        /** @type {?} */
        const currentColStart = selectedNode.layout.colStart;
        /** @type {?} */
        const currentRowStart = this.applyNavigationCell(currentColStart, selectedNode.layout.rowStart, NavigationDirection.horizontal);
        /** @type {?} */
        const rowIndex = selectedNode.row;
        // check previous element is from the same layout
        /** @type {?} */
        let prevElementColumn = columnLayout.children
            .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart) &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));
        if (!prevElementColumn) {
            // no prev column in current layout, seacrh for prev layout
            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);
            if (!columnLayout) {
                // reached the end
                return null;
            }
            /** @type {?} */
            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;
            // first element is from the next layout
            prevElementColumn = columnLayout.children
                .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&
                c.rowStart <= currentRowStart &&
                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));
        }
        /** @type {?} */
        const cb = () => {
            /** @type {?} */
            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;
            this._focusCell(prevElement);
        };
        if (!this.isColumnLeftFullyVisible(prevElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);
        }
        else {
            cb();
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @param {?=} cellRowStart
     * @return {?}
     */
    onKeydownEnd(rowIndex, isSummary = false, cellRowStart) {
        /** @type {?} */
        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);
        /** @type {?} */
        const lastLayout = layouts[layouts.length - 1];
        /** @type {?} */
        const lastLayoutChildren = lastLayout.children;
        /** @type {?} */
        const layoutSize = lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;
        /** @type {?} */
        const currentRowStart = this.applyNavigationCell(this.startNavigationCell ? this.startNavigationCell.colStart : 1, cellRowStart || this.grid.multiRowLayoutRowSize, NavigationDirection.horizontal);
        /** @type {?} */
        const nextElementColumn = lastLayout.children.find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));
        /** @type {?} */
        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);
        /** @type {?} */
        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        let rowElement = rowList.find((row) => row.index === rowIndex);
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (!this.isColumnFullyVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            /** @type {?} */
            const cb = () => {
                /** @type {?} */
                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
                /** @type {?} */
                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];
                this._focusCell(cell);
            };
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
            return;
        }
        else {
            /** @type {?} */
            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
            /** @type {?} */
            const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];
            this._focusCell(cell);
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @param {?=} cellRowStart
     * @return {?}
     */
    onKeydownHome(rowIndex, isSummary = false, cellRowStart = 1) {
        /** @type {?} */
        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];
        /** @type {?} */
        const lastLayoutChildren = firstLayout.children.toArray();
        /** @type {?} */
        const currentRowStart = this.applyNavigationCell(this.startNavigationCell ? this.startNavigationCell.colStart : 1, cellRowStart, NavigationDirection.horizontal);
        /** @type {?} */
        const nextElementColumn = firstLayout.children.find(c => c.colStart === 1 &&
            c.rowStart <= currentRowStart &&
            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));
        /** @type {?} */
        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);
        /** @type {?} */
        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        let rowElement = rowList.find((row) => row.index === rowIndex);
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (!this.isColumnLeftFullyVisible(nextElementColumn.visibleIndex)) {
            this.grid.nativeElement.focus({ preventScroll: true });
            /** @type {?} */
            const cb = () => {
                /** @type {?} */
                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
                /** @type {?} */
                const cell = allBlocks[0].children[indexInLayout];
                this._focusCell(cell);
            };
            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);
            return;
        }
        else {
            /** @type {?} */
            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());
            /** @type {?} */
            const cell = allBlocks[0].children[indexInLayout];
            this._focusCell(cell);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    getColumnLayoutSelector() {
        return '.igx-grid__mrl-block';
    }
    /**
     * @protected
     * @param {?} visibleColIndex
     * @return {?}
     */
    getChildColumnScrollPositions(visibleColIndex) {
        /** @type {?} */
        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;
        /** @type {?} */
        const targetCol = this.getColunmByVisibleIndex(visibleColIndex);
        /** @type {?} */
        const parent = targetCol.parent;
        /** @type {?} */
        const parentVIndex = forOfDir.igxForOf.indexOf(parent);
        /** @type {?} */
        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex);
        /** @type {?} */
        let rightScroll = 0;
        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.
        /** @type {?} */
        const childSizes = parent.getFilledChildColumnSizes(parent.children);
        /** @type {?} */
        const colStart = targetCol.colStart || 1;
        /** @type {?} */
        const colEnd = targetCol.colEnd || colStart + 1;
        for (let i = 1; i < colStart; i++) {
            leftScroll += parseInt(childSizes[i - 1], 10);
        }
        rightScroll += leftScroll;
        for (let j = colStart; j < colEnd; j++) {
            rightScroll += parseInt(childSizes[j - 1], 10);
        }
        return { leftScroll, rightScroll };
    }
    /**
     * @protected
     * @param {?} visibleColIndex
     * @return {?}
     */
    getColunmByVisibleIndex(visibleColIndex) {
        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;
        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);
    }
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    shouldPerformVerticalScroll(rowIndex, visibleColumnIndex) {
        if (this._isGroupRecordAt(rowIndex)) {
            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);
        }
        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {
            return false;
        }
        /** @type {?} */
        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)
            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);
        /** @type {?} */
        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);
        /** @type {?} */
        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);
        if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)
            || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    get verticalDCTopOffset() {
        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);
    }
    /**
     * @private
     * @param {?} rowIndex
     * @return {?}
     */
    _isGroupRecordAt(rowIndex) {
        /** @type {?} */
        const record = this.grid.verticalScrollContainer.igxForOf[rowIndex];
        return record.records && record.records.length;
    }
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} cb
     * @return {?}
     */
    performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb) {
        if (this._isGroupRecordAt(rowIndex)) {
            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);
        }
        /** @type {?} */
        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);
        /** @type {?} */
        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);
        /** @type {?} */
        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)
            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);
        /** @type {?} */
        const isPrevious = (scrollTop > scrollPos.rowTop) && (!targetRow ||
            targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));
        /** @type {?} */
        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);
        this.grid.verticalScrollContainer.onChunkLoad
            .pipe(first()).subscribe(() => {
            cb();
        });
        if (isPrevious) {
            this.grid.verticalScrollContainer.getVerticalScroll().scrollTop = scrollAmount;
        }
        else {
            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);
        }
    }
    /**
     * @param {?} rowIndex
     * @param {?} visibleColIndex
     * @return {?}
     */
    getVerticalScrollPositions(rowIndex, visibleColIndex) {
        /** @type {?} */
        const targetCol = this.getColunmByVisibleIndex(visibleColIndex);
        /** @type {?} */
        const topOffset = (targetCol.rowStart - 1) * this.grid.defaultRowHeight;
        /** @type {?} */
        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;
        /** @type {?} */
        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);
        return { rowTop, rowBottom, topOffset };
    }
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @param {?=} cb
     * @return {?}
     */
    performHorizontalScrollToCell(rowIndex, visibleColumnIndex, isSummary = false, cb) {
        /** @type {?} */
        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);
        /** @type {?} */
        const hScroll = this.horizontalScroll(rowIndex);
        this.grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(() => {
            if (cb) {
                cb();
            }
            else {
                this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));
            }
        });
        /** @type {?} */
        const isPrevItem = hScroll.getHorizontalScroll().scrollLeft > scrollPos.leftScroll;
        /** @type {?} */
        const containerSize = parseInt(hScroll.igxForContainerSize, 10);
        /** @type {?} */
        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;
        hScroll.getHorizontalScroll().scrollLeft = nextScroll;
    }
    /**
     * @protected
     * @param {?} cellElem
     * @return {?}
     */
    _focusCell(cellElem) {
        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.
        /** @type {?} */
        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;
        /** @type {?} */
        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;
        if (diffTop < 0) {
            // cell is above grid top - not visible
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                cellElem.focus({ preventScroll: true });
            });
            this.grid.verticalScrollContainer.addScrollTop(diffTop);
        }
        else if (diffBottom > 0) {
            // cell is below grid bottom - not visible
            this.grid.nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(() => {
                cellElem.focus({ preventScroll: true });
            });
            this.grid.verticalScrollContainer.addScrollTop(diffBottom);
        }
        else {
            // cell is visible
            cellElem.focus({ preventScroll: true });
        }
    }
    /**
     * @return {?}
     */
    goToFirstCell() {
        this.startNavigationCell = null;
        super.goToFirstCell();
    }
    /**
     * @return {?}
     */
    goToLastCell() {
        this.startNavigationCell = null;
        super.goToLastCell();
    }
}
IgxGridMRLNavigationService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridMRLNavigationService.prototype.startNavigationCell;
    /** @type {?} */
    IgxGridMRLNavigationService.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,