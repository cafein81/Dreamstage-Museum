/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, TemplateRef, ViewChild, NgZone } from '@angular/core';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
import { getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick } from '../core/utils';
import { IgxGridSelectionService, IgxGridCRUDService } from '../core/grid-selection';
import { DeprecateProperty } from '../core/deprecateDecorators';
/**
 * Providing reference to `IgxGridCellComponent`:
 * ```typescript
 * \@ViewChild('grid', { read: IgxGridComponent })
 *  public grid: IgxGridComponent;
 * ```
 * ```typescript
 *  let column = this.grid.columnList.first;
 * ```
 * ```typescript
 *  let cell = column.cells[0];
 * ```
 */
export class IgxGridCellComponent {
    /**
     * @param {?} selectionService
     * @param {?} crudService
     * @param {?} gridAPI
     * @param {?} selection
     * @param {?} cdr
     * @param {?} element
     * @param {?} zone
     */
    constructor(selectionService, crudService, gridAPI, selection, cdr, element, zone) {
        this.selectionService = selectionService;
        this.crudService = crudService;
        this.gridAPI = gridAPI;
        this.selection = selection;
        this.cdr = cdr;
        this.element = element;
        this.zone = zone;
        this._vIndex = -1;
        /**
         * Sets/gets the highlight class of the cell.
         * Default value is `"igx-highlight"`.
         * ```typescript
         * let highlightClass = this.cell.highlightClass;
         * ```
         * ```typescript
         * this.cell.highlightClass = 'igx-cell-highlight';
         * ```
         * \@memberof IgxGridCellComponent
         */
        this.highlightClass = 'igx-highlight';
        /**
         * Sets/gets the active highlight class class of the cell.
         * Default value is `"igx-highlight__active"`.
         * ```typescript
         * let activeHighlightClass = this.cell.activeHighlightClass;
         * ```
         * ```typescript
         * this.cell.activeHighlightClass = 'igx-cell-highlight_active';
         * ```
         * \@memberof IgxGridCellComponent
         */
        this.activeHighlightClass = 'igx-highlight__active';
        /**
         * @hidden
         * \@internal
         */
        this.lastPinned = false;
        /**
         * Returns whether the cell is in edit mode.
         */
        this.editMode = false;
        /**
         * Sets/get the `tabindex` property of the cell.
         * Default value is `0`.
         * ```typescript
         * this.cell.tabindex = 1;
         * ```
         * ```typescript
         * let cellTabIndex = this.cell.tabindex;
         * ```
         * \@memberof IgxGridCellComponent
         */
        this.tabindex = 0;
        /**
         * Sets/get the `role` property of the cell.
         * Default value is `"gridcell"`.
         * ```typescript
         * this.cell.role = 'grid-cell';
         * ```
         * ```typescript
         * let cellRole = this.cell.role;
         * ```
         * \@memberof IgxGridCellComponent
         */
        this.role = 'gridcell';
        /**
         * Gets the width of the cell.
         * ```typescript
         * let cellWidth = this.cell.width;
         * ```
         * \@memberof IgxGridCellComponent
         */
        this.width = '';
        /**
         * @hidden
         * \@internal
         */
        this.focused = false;
        this.isInCompositionMode = false;
        /**
         *
         * @hidden
         * \@internal
         */
        this.pointerdown = (event) => {
            if (!isLeftClick(event)) {
                this.selectionService.addKeyboardRange();
                this.selectionService.initKeyboardState();
                this.selectionService.primaryButton = false;
                return;
            }
            this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);
        };
        /**
         *
         * @hidden
         * \@internal
         */
        this.pointerenter = (event) => {
            /** @type {?} */
            const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);
            if (dragMode) {
                this.grid.cdr.detectChanges();
            }
        };
        /**
         * @hidden
         * \@internal
         */
        this.pointerup = (event) => {
            if (this.grid.hasColumnLayouts) {
                this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);
            }
            if (!isLeftClick(event)) {
                return;
            }
            if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {
                this.grid.cdr.detectChanges();
            }
            this._updateCRUDStatus();
        };
    }
    /**
     * Gets the cell template context object.
     * ```typescript
     *  let context = this.cell.context();
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get context() {
        return {
            $implicit: this.value,
            cell: this
        };
    }
    /**
     * Gets the cell template.
     * ```typescript
     * let template = this.cell.template;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get template() {
        if (this.editMode) {
            /** @type {?} */
            const inlineEditorTemplate = this.column.inlineEditorTemplate;
            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;
        }
        if (this.cellTemplate) {
            return this.cellTemplate;
        }
        return this.defaultCellTemplate;
    }
    /**
     * Gets the `id` of the grid in which the cell is stored.
     * ```typescript
     * let gridId = this.cell.gridID;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get gridID() {
        return this.row.gridID;
    }
    /**
     * Gets the grid of the cell.
     * ```typescript
     * let grid = this.cell.grid;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get grid() {
        return this.gridAPI.grid;
    }
    /**
     * Gets the `index` of the row where the cell is stored.
     * ```typescript
     * let rowIndex = this.cell.rowIndex;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get rowIndex() {
        return this.row.index;
    }
    /**
     * Gets the `index` of the cell column.
     * ```typescript
     * let columnIndex = this.cell.columnIndex;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get columnIndex() {
        return this.column.index;
    }
    /**
     * Gets the visible `index` of the in which the cell is stored.
     * ```typescript
     * let visibleColumnIndex = this.cell.visibleColumnIndex;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get visibleColumnIndex() {
        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set visibleColumnIndex(val) {
        this._vIndex = val;
    }
    /**
     * Gets the ID of the cell.
     * ```typescript
     * let cellID = this.cell.cellID;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get cellID() {
        /** @type {?} */
        const primaryKey = this.grid.primaryKey;
        /** @type {?} */
        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;
        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };
    }
    /**
     * Returns a reference to the nativeElement of the cell.
     * ```typescript
     * let cellNativeElement = this.cell.nativeElement;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * @deprecated
     * Use `cell.editMode` as a getter and
     * `cell.setEditMode(true | false)` to start/exit edit mode.
     *
     * Gets/sets whether the cell is in edit mode.
     * ```typescript
     * let isCellInEditMode = this.cell.inEditMode;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get inEditMode() {
        return this.editMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set inEditMode(value) {
        this.setEditMode(value);
    }
    /**
     * Gets whether the cell is editable.
     * ```typescript
     * let isCellReadonly = this.cell.readonly;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get readonly() {
        return !this.column.editable;
    }
    /**
     * @return {?}
     */
    get gridRowSpan() {
        return this.column.gridRowSpan;
    }
    /**
     * @return {?}
     */
    get gridColumnSpan() {
        return this.column.gridColumnSpan;
    }
    /**
     * @return {?}
     */
    get rowEnd() {
        return this.column.rowEnd;
    }
    /**
     * @return {?}
     */
    get colEnd() {
        return this.column.colEnd;
    }
    /**
     * @return {?}
     */
    get rowStart() {
        return this.column.rowStart;
    }
    /**
     * @return {?}
     */
    get colStart() {
        return this.column.colStart;
    }
    /**
     * Returns a string containing the grid `id` and the column `field` concatenated by "_".
     * ```typescript
     * let describedBy = this.cell.describedBy;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get describedby() {
        return `${this.row.gridID}_${this.column.field}`;
    }
    /**
     * Gets whether the cell is selected.
     * ```typescript
     * let isSelected = this.cell.selected;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get selected() {
        return this.isCellSelected();
    }
    /**
     * Selects/deselects the cell.
     * ```typescript
     * this.cell.selected = true.
     * ```
     * \@memberof IgxGridCellComponent
     * @param {?} val
     * @return {?}
     */
    set selected(val) {
        /** @type {?} */
        const node = this.selectionNode;
        val ? this.selectionService.add(node) : this.selectionService.remove(node);
    }
    /**
     * @return {?}
     */
    get dirty() {
        if (this.grid.rowEditable) {
            /** @type {?} */
            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);
            if (rowCurrentState) {
                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;
            }
        }
        else {
            /** @type {?} */
            const rowTransaction = this.grid.transactions.getState(this.row.rowID);
            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];
        }
        return false;
    }
    /**
     * Sets the current edit value while a cell is in edit mode.
     * Only for cell editing mode.
     * ```typescript
     * this.cell.editValue = value;
     * ```
     * \@memberof IgxGridCellComponent
     * @param {?} value
     * @return {?}
     */
    set editValue(value) {
        if (this.crudService.inEditMode) {
            this.crudService.cell.editValue = value;
        }
    }
    /**
     * Gets the current edit value while a cell is in edit mode.
     * Only for cell editing mode.
     * ```typescript
     * let editValue = this.cell.editValue;
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    get editValue() {
        if (this.crudService.inEditMode) {
            return this.crudService.cell.editValue;
        }
    }
    /**
     * Returns whether the cell is editable.
     * @return {?}
     */
    get editable() {
        return this.column.editable;
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    set highlight(value) {
        this._highlight = value;
        if (this._highlight && this.grid.lastSearchInfo.searchText) {
            this._highlight.highlight(this.grid.lastSearchInfo.searchText, this.grid.lastSearchInfo.caseSensitive, this.grid.lastSearchInfo.exactMatch);
            this._highlight.activateIfNecessary();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    get highlight() {
        return this._highlight;
    }
    /**
     * @protected
     * @return {?}
     */
    get selectionNode() {
        return {
            row: this.rowIndex,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
            layout: this.column.columnLayoutChild ? {
                rowStart: this.column.rowStart,
                colStart: this.column.colStart,
                rowEnd: this.column.rowEnd,
                colEnd: this.column.colEnd,
                columnVisibleIndex: this.visibleColumnIndex
            } : null
        };
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.addEventListener('pointerdown', this.pointerdown);
            this.nativeElement.addEventListener('pointerenter', this.pointerenter);
            this.nativeElement.addEventListener('pointerup', this.pointerup);
            // IE 11 workarounds
            if (isIE()) {
                this.compositionStartHandler = () => this.isInCompositionMode = true;
                this.compositionEndHandler = () => this.isInCompositionMode = false;
                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog
                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);
                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);
                // https://stackoverflow.com/q/51404782
                this.focusHandlerIE = (e) => this.onFocus(e);
                this.focusOut = () => this.onBlur();
                this.nativeElement.addEventListener('focusin', this.focusHandlerIE);
                this.nativeElement.addEventListener('focusout', this.focusOut);
            }
        });
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    ngOnDestroy() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);
            this.nativeElement.removeEventListener('pointerenter', this.pointerenter);
            this.nativeElement.removeEventListener('pointerup', this.pointerup);
            if (isIE()) {
                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);
                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);
                this.nativeElement.removeEventListener('focusin', this.focusHandlerIE);
                this.nativeElement.removeEventListener('focusout', this.focusOut);
            }
        });
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    _updateCRUDStatus() {
        if (this.editMode) {
            return;
        }
        /** @type {?} */
        const crud = this.crudService;
        /** @type {?} */
        const editableCell = this.crudService.cell;
        /** @type {?} */
        const editMode = !!(crud.row || crud.cell);
        if (this.editable && editMode && !this.row.deleted) {
            if (editableCell) {
                this.gridAPI.update_cell(editableCell, editableCell.editValue);
            }
            crud.end();
            this.grid.cdr.markForCheck();
            crud.begin(this);
            return;
        }
        if (editableCell && crud.sameRow(this.cellID.rowID)) {
            this.gridAPI.submit_value();
        }
        else if (editMode && !crud.sameRow(this.cellID.rowID)) {
            this.grid.endEdit(true);
        }
    }
    /**
     * Gets whether the cell is selected.
     * ```typescript
     * let isCellSelected = thid.cell.isCellSelected();
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    isCellSelected() {
        return this.selectionService.selected(this.selectionNode);
    }
    /**
     * @hidden
     * \@internal
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.firstChange) {
            if (this.highlight) {
                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;
                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;
                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;
            }
        }
    }
    /**
     * Starts/ends edit mode for the cell.
     *
     * ```typescript
     * cell.setEditMode(true);
     * ```
     * @param {?} value
     * @return {?}
     */
    setEditMode(value) {
        if (this.row.deleted) {
            return;
        }
        if (this.editable && value) {
            this.gridAPI.submit_value();
            this.crudService.begin(this);
        }
        else {
            this.gridAPI.escape_editMode();
        }
        this.grid.cdr.markForCheck();
    }
    /**
     * Sets new value to the cell.
     * ```typescript
     * this.cell.update('New Value');
     * ```
     * \@memberof IgxGridCellComponent
     * @param {?} val
     * @return {?}
     */
    // TODO: Refactor
    update(val) {
        if (this.row.deleted) {
            return;
        }
        /** @type {?} */
        const cell = this.crudService.createCell(this);
        /** @type {?} */
        const args = this.gridAPI.update_cell(cell, val);
        if (this.crudService.cell && this.crudService.sameCell(cell)) {
            if (args.cancel) {
                return;
            }
            this.gridAPI.escape_editMode();
        }
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    onDoubleClick(event) {
        if (this.editable && !this.editMode && !this.row.deleted) {
            this.crudService.begin(this);
        }
        this.grid.onDoubleClick.emit({
            cell: this,
            event
        });
    }
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.grid.onCellClick.emit({
            cell: this,
            event
        });
    }
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    onContextMenu(event) {
        this.grid.onContextMenu.emit({
            cell: this,
            event
        });
    }
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        if (this.focused) {
            return;
        }
        /** @type {?} */
        const node = this.selectionNode;
        /** @type {?} */
        const mrl = this.grid.hasColumnLayouts;
        this.focused = true;
        this.row.focused = true;
        if (!this.selectionService.isActiveNode(node, mrl)) {
            this.grid.onSelection.emit({ cell: this, event });
        }
        if (this.selectionService.primaryButton) {
            this._updateCRUDStatus();
            this.selectionService.activeElement = node;
        }
        else {
            this.selectionService.activeElement = null;
            if (this.crudService.inEditMode && !this.editMode) {
                this.gridAPI.submit_value();
            }
        }
        this.selectionService.primaryButton = true;
        this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection);
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    onBlur() {
        this.focused = false;
        this.row.focused = false;
    }
    /**
     * @protected
     * @param {?} key
     * @param {?} event
     * @return {?}
     */
    handleAlt(key, event) {
        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {
            /** @type {?} */
            const collapse = ((/** @type {?} */ (this.row))).expanded && ROW_COLLAPSE_KEYS.has(key);
            /** @type {?} */
            const expand = !((/** @type {?} */ (this.row))).expanded && ROW_EXPAND_KEYS.has(key);
            if (collapse) {
                ((/** @type {?} */ (this.gridAPI))).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);
            }
            else if (expand) {
                ((/** @type {?} */ (this.gridAPI))).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);
            }
        }
    }
    /**
     * @protected
     * @param {?} shift
     * @return {?}
     */
    handleTab(shift) {
        if (shift) {
            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);
        }
        else {
            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);
        }
    }
    /**
     * @protected
     * @param {?} ctrl
     * @return {?}
     */
    handleEnd(ctrl) {
        if (ctrl) {
            this.grid.navigation.goToLastCell();
        }
        else {
            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);
        }
    }
    /**
     * @protected
     * @param {?} ctrl
     * @return {?}
     */
    handleHome(ctrl) {
        if (ctrl) {
            this.grid.navigation.goToFirstCell();
        }
        else {
            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);
        }
    }
    // TODO: Refactor
    /**
     *
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    dispatchEvent(event) {
        /** @type {?} */
        const key = event.key.toLowerCase();
        /** @type {?} */
        const shift = event.shiftKey;
        /** @type {?} */
        const ctrl = event.ctrlKey;
        /** @type {?} */
        const node = this.selectionNode;
        if (!SUPPORTED_KEYS.has(key)) {
            return;
        }
        event.stopPropagation();
        /** @type {?} */
        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };
        this.grid.onGridKeydown.emit(keydownArgs);
        if (keydownArgs.cancel) {
            this.selectionService.clear();
            this.selectionService.keyboardState.active = true;
            return;
        }
        if (event.altKey) {
            event.preventDefault();
            this.handleAlt(key, event);
            return;
        }
        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');
        if (key === 'tab') {
            event.preventDefault();
        }
        if (this.editMode) {
            if (NAVIGATION_KEYS.has(key)) {
                if (this.column.inlineEditorTemplate) {
                    return;
                }
                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) {
                    return;
                }
                return;
            }
        }
        if (NAVIGATION_KEYS.has(key)) {
            event.preventDefault();
        }
        // TODO: to be deleted when onFocusChange event is removed #4054
        /** @type {?} */
        const args = { cell: this, groupRow: null, event: event, cancel: false };
        this.grid._onFocusChange.emit(args);
        if (args.cancel) {
            return;
        }
        switch (key) {
            case 'tab':
                this.handleTab(shift);
                break;
            case 'end':
                this.handleEnd(ctrl);
                break;
            case 'home':
                this.handleHome(ctrl);
                break;
            case 'arrowleft':
            case 'left':
                if (ctrl) {
                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);
                    break;
                }
                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);
                break;
            case 'arrowright':
            case 'right':
                if (ctrl) {
                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);
                    break;
                }
                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);
                break;
            case 'arrowup':
            case 'up':
                if (ctrl) {
                    this.grid.navigation.navigateTop(this.visibleColumnIndex);
                    break;
                }
                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);
                break;
            case 'arrowdown':
            case 'down':
                if (ctrl) {
                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);
                    break;
                }
                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);
                break;
            case 'enter':
            case 'f2':
                this.onKeydownEnterEditMode();
                break;
            case 'escape':
            case 'esc':
                this.onKeydownExitEditMode();
                break;
            case ' ':
            case 'spacebar':
            case 'space':
                if (this.row.rowSelectable) {
                    this.row.checkboxElement.toggle();
                }
                break;
            default:
                return;
        }
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    onKeydownEnterEditMode() {
        if (this.isInCompositionMode) {
            return;
        }
        if (this.column.editable && !this.row.deleted) {
            if (this.editMode) {
                this.grid.endEdit(true);
                this.nativeElement.focus();
            }
            else {
                this.crudService.begin(this);
            }
        }
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    onKeydownExitEditMode() {
        if (this.isInCompositionMode) {
            return;
        }
        if (this.editMode) {
            /** @type {?} */
            const v = this.crudService.cell;
            /** @type {?} */
            const args = (/** @type {?} */ ({
                cellID: v.id,
                rowID: v.id.rowID,
                oldValue: v.value,
                newValue: v.editValue,
                cancel: false
            }));
            this.grid.onCellEditCancel.emit(args);
            if (args.cancel) {
                return;
            }
            this.grid.endEdit(false);
            this.nativeElement.focus();
        }
    }
    /**
     * If the provided string matches the text in the cell, the text gets highlighted.
     * ```typescript
     * this.cell.highlightText('Cell Value', true);
     * ```
     * \@memberof IgxGridCellComponent
     * @param {?} text
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @return {?}
     */
    highlightText(text, caseSensitive, exactMatch) {
        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;
    }
    /**
     * Clears the highlight of the text in the cell.
     * ```typescript
     * this.cell.clearHighLight();
     * ```
     * \@memberof IgxGridCellComponent
     * @return {?}
     */
    clearHighlight() {
        if (this.highlight && this.column.searchable) {
            this.highlight.clearHighlight();
        }
    }
    /**
     * @hidden
     * \@internal
     * @param {?} range
     * @return {?}
     */
    calculateSizeToFit(range) {
        return Math.max(...Array.from(this.nativeElement.children)
            .map((child) => getNodeSizeViaRange(range, child)));
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    isToggleKey(key) {
        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);
    }
}
IgxGridCellComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'igx-grid-cell',
                template: "<ng-template #defaultCell>\n    <div igxTextHighlight [cssClass]=\"highlightClass\" [activeCssClass]=\"activeHighlightClass\" [groupName]=\"gridID\"\n        [value]=\"formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal: grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value\"\n        [row]=\"rowData\" [column]=\"this.column.field\" [containerClass]=\"'igx-grid__td-text'\"\n        class=\"igx-grid__td-text\">{{ formatter ? formatter(value) : column.dataType === 'number' ? (value | igxdecimal:\n        grid.locale) : column.dataType === 'date' ? (value | igxdate: grid.locale) : value }}</div>\n</ng-template>\n<ng-template #inlineEditor let-cell=\"cell\">\n    <ng-container *ngIf=\"column.dataType === 'string'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [value]=\"editValue\" (input)=\"editValue = $event.target.value\" [igxFocus]=\"focused\" />\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'number'\">\n        <igx-input-group displayDensity=\"compact\">\n            <input igxInput [value]=\"editValue\" (input)=\"editValue = $event.target.value\" [igxFocus]=\"focused\" type=\"number\">\n        </igx-input-group>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'boolean'\">\n        <igx-checkbox (change)=\"editValue = $event.checked\" [value]=\"editValue\" [checked]=\"editValue\"\n            [igxFocus]=\"focused\" [disableRipple]=\"true\"></igx-checkbox>\n    </ng-container>\n    <ng-container *ngIf=\"column.dataType === 'date'\">\n        <igx-date-picker [style.width.%]=\"100\" [outlet]=\"grid.outletDirective\" mode=\"dropdown\" (onSelection)=\"editValue = $event\"\n            [locale]=\"grid.locale\" [value]=\"editValue\" [igxFocus]=\"focused\" [labelVisibility]=\"false\">\n        </igx-date-picker>\n    </ng-container>\n</ng-template>\n<ng-container *ngTemplateOutlet=\"template; context: context\">\n</ng-container>\n"
            }] }
];
/** @nocollapse */
IgxGridCellComponent.ctorParameters = () => [
    { type: IgxGridSelectionService },
    { type: IgxGridCRUDService },
    { type: GridBaseAPIService },
    { type: IgxSelectionAPIService },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
IgxGridCellComponent.propDecorators = {
    column: [{ type: Input }],
    row: [{ type: Input }],
    rowData: [{ type: Input }],
    cellTemplate: [{ type: Input }],
    value: [{ type: Input }],
    formatter: [{ type: Input }],
    rowIndex: [{ type: HostBinding, args: ['attr.data-rowIndex',] }],
    visibleColumnIndex: [{ type: HostBinding, args: ['attr.data-visibleIndex',] }, { type: Input }],
    lastPinned: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid__td--pinned-last',] }],
    editMode: [{ type: Input }, { type: HostBinding, args: ['class.igx-grid__td--editing',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    readonly: [{ type: HostBinding, args: ['attr.aria-readonly',] }],
    gridRowSpan: [{ type: HostBinding, args: ['style.-ms-grid-row-span',] }],
    gridColumnSpan: [{ type: HostBinding, args: ['style.-ms-grid-column-span',] }],
    rowEnd: [{ type: HostBinding, args: ['style.grid-row-end',] }],
    colEnd: [{ type: HostBinding, args: ['style.grid-column-end',] }],
    rowStart: [{ type: HostBinding, args: ['style.-ms-grid-row',] }, { type: HostBinding, args: ['style.grid-row-start',] }],
    colStart: [{ type: HostBinding, args: ['style.-ms-grid-column',] }, { type: HostBinding, args: ['style.grid-column-start',] }],
    describedby: [{ type: HostBinding, args: ['attr.aria-describedby',] }],
    width: [{ type: HostBinding, args: ['style.min-width',] }, { type: HostBinding, args: ['style.max-width',] }, { type: HostBinding, args: ['style.flex-basis',] }, { type: Input }],
    selected: [{ type: HostBinding, args: ['attr.aria-selected',] }, { type: HostBinding, args: ['class.igx-grid__td--selected',] }],
    dirty: [{ type: HostBinding, args: ['class.igx-grid__td--edited',] }],
    focused: [{ type: HostBinding, args: ['class.igx-grid__td--active',] }],
    defaultCellTemplate: [{ type: ViewChild, args: ['defaultCell', { read: TemplateRef },] }],
    inlineEditorTemplate: [{ type: ViewChild, args: ['inlineEditor', { read: TemplateRef },] }],
    highlight: [{ type: ViewChild, args: [IgxTextHighlightDirective, { read: IgxTextHighlightDirective },] }],
    onDoubleClick: [{ type: HostListener, args: ['dblclick', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
    onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['blur',] }],
    dispatchEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
tslib_1.__decorate([
    DeprecateProperty(`'inEditMode' is deprecated\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridCellComponent.prototype, "inEditMode", null);
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridCellComponent.prototype._vIndex;
    /**
     * Gets the column of the cell.
     * ```typescript
     *  let cellColumn = this.cell.column;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.column;
    /**
     * Gets the row of the cell.
     * ```typescript
     * let cellRow = this.cell.row;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.row;
    /**
     * Gets the data of the row of the cell.
     * ```typescript
     * let rowData = this.cell.rowData;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.rowData;
    /**
     * Sets/gets the template of the cell.
     * ```html
     * <ng-template #cellTemplate igxCell let-value>
     *   <div style="font-style: oblique; color:blueviolet; background:red">
     *       <span>{{value}}</span>
     *   </div>
     * </ng-template>
     * ```
     * ```typescript
     * \@ViewChild('cellTemplate',{read: TemplateRef})
     * cellTemplate: TemplateRef<any>;
     * ```
     * ```typescript
     * this.cell.cellTemplate = this.cellTemplate;
     * ```
     * ```typescript
     * let template =  this.cell.cellTemplate;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.cellTemplate;
    /**
     * Sets/gets the cell value.
     * ```typescript
     * this.cell.value = "Cell Value";
     * ```
     * ```typescript
     * let cellValue = this.cell.value;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.value;
    /**
     * Sets/gets the highlight class of the cell.
     * Default value is `"igx-highlight"`.
     * ```typescript
     * let highlightClass = this.cell.highlightClass;
     * ```
     * ```typescript
     * this.cell.highlightClass = 'igx-cell-highlight';
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.highlightClass;
    /**
     * Sets/gets the active highlight class class of the cell.
     * Default value is `"igx-highlight__active"`.
     * ```typescript
     * let activeHighlightClass = this.cell.activeHighlightClass;
     * ```
     * ```typescript
     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.activeHighlightClass;
    /**
     * Gets the cell formatter.
     * ```typescript
     * let cellForamatter = this.cell.formatter;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.formatter;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridCellComponent.prototype.lastPinned;
    /**
     * Returns whether the cell is in edit mode.
     * @type {?}
     */
    IgxGridCellComponent.prototype.editMode;
    /**
     * Sets/get the `tabindex` property of the cell.
     * Default value is `0`.
     * ```typescript
     * this.cell.tabindex = 1;
     * ```
     * ```typescript
     * let cellTabIndex = this.cell.tabindex;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.tabindex;
    /**
     * Sets/get the `role` property of the cell.
     * Default value is `"gridcell"`.
     * ```typescript
     * this.cell.role = 'grid-cell';
     * ```
     * ```typescript
     * let cellRole = this.cell.role;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.role;
    /**
     * Gets the width of the cell.
     * ```typescript
     * let cellWidth = this.cell.width;
     * ```
     * \@memberof IgxGridCellComponent
     * @type {?}
     */
    IgxGridCellComponent.prototype.width;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridCellComponent.prototype.focused;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.defaultCellTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.inlineEditorTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.isInCompositionMode;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.compositionStartHandler;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.compositionEndHandler;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.focusHandlerIE;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.focusOut;
    /**
     * @type {?}
     * @private
     */
    IgxGridCellComponent.prototype._highlight;
    /**
     *
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridCellComponent.prototype.pointerdown;
    /**
     *
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridCellComponent.prototype.pointerenter;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridCellComponent.prototype.pointerup;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.selectionService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.crudService;
    /** @type {?} */
    IgxGridCellComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridCellComponent.prototype.selection;
    /** @type {?} */
    IgxGridCellComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    IgxGridCellComponent.prototype.element;
    /**
     * @type {?}
     * @protected
     */
    IgxGridCellComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,