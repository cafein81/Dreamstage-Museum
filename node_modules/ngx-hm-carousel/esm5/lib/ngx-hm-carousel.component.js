/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, forwardRef, Inject, Input, NgZone, PLATFORM_ID, QueryList, Renderer2, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, forkJoin, fromEvent, interval, merge, of, Subject, timer } from 'rxjs';
import { bufferCount, filter, switchMap, takeUntil, tap } from 'rxjs/operators';
import { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';
import { resizeObservable } from './rxjs.observable.resize';
var NgxHmCarouselComponent = /** @class */ (function () {
    function NgxHmCarouselComponent(platformId, _document, _renderer, _zone, _cd) {
        var _this = this;
        this.platformId = platformId;
        this._document = _document;
        this._renderer = _renderer;
        this._zone = _zone;
        this._cd = _cd;
        this.aniTime = 400;
        this.aniClass = 'transition';
        this.aniClassAuto = this.aniClass;
        this.panBoundary = 0.15;
        // this default autoplay animation is same as aniClass
        this.align = 'center';
        this.notDrag = false;
        this.mourseEnable = false;
        this.delay = 8000;
        this.direction = 'right';
        this.scrollNum = 1;
        this.isDragMany = false;
        this.swipeVelocity = 0.3;
        this.breakpoint = [];
        // using for check mouse or touchend
        this.leaveObs$ = merge(fromEvent(this._document, 'mouseup'), fromEvent(this._document, 'touchend')).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.grabbing = false;
            e.stopPropagation();
            e.preventDefault();
        })));
        this.isFromAuto = true;
        this.isAutoNum = false;
        this.mouseOnContainer = false;
        this.alignDistance = 0;
        this.elmWidth = 0;
        this.infiniteElmRefs = [];
        this.restart = new BehaviorSubject(null);
        this.speedChange = new BehaviorSubject(5000);
        this.stopEvent = new Subject();
        this.destroy$ = new Subject();
        this._porgressWidth = 0;
        this._currentIndex = 0;
        this._showNum = 1;
        this._autoplay = false;
        this._infinite = false;
        this._tmpInfinite = false;
        this._grabbing = false;
        this._disableDrag = false;
        this.panCount = 0;
        // this variable use for check the init value is write with ngModel,
        // when init first, not set with animation
        this.hasInitWriteValue = false;
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(NgxHmCarouselComponent.prototype, "disableDrag", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disableDrag;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.rootElm) {
                if (this._disableDrag !== value) {
                    if (value) {
                        this.destoryHammer();
                    }
                    else {
                        this.hammer = this.bindHammer();
                    }
                }
            }
            this._disableDrag = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "infinite", {
        get: /**
         * @return {?}
         */
        function () { return this._infinite; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._infinite = value;
            this.infiniteElmRefs.forEach((/**
             * @param {?} ref
             * @return {?}
             */
            function (ref) {
                _this.addStyle(ref.rootNodes[0], {
                    visibility: _this.runLoop ? 'visible' : 'hidden'
                });
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "speed", {
        get: /**
         * @return {?}
         */
        function () { return this.speedChange.value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.speedChange.next(value);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "showNum", {
        get: /**
         * @return {?}
         */
        function () { return this._showNum; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === 'auto') {
                this.isAutoNum = true;
            }
            else {
                this._showNum = +value;
                if (this.rootElm) {
                    this.setViewWidth();
                    this.reSetAlignDistance();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "autoplay", {
        get: /**
         * @return {?}
         */
        function () { return this._autoplay; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (isPlatformBrowser(this.platformId)) {
                if (this.elms) {
                    this.progressWidth = 0;
                    if (value) {
                        this._zone.runOutsideAngular((/**
                         * @return {?}
                         */
                        function () {
                            _this.doNextSub$ = _this.doNext.subscribe();
                        }));
                    }
                    else {
                        if (this.doNextSub$) {
                            this.doNextSub$.unsubscribe();
                        }
                    }
                }
            }
            this._autoplay = value;
            // if set autoplay, then the infinite is true
            if (value) {
                this._tmpInfinite = this.infinite;
                this.infinite = true;
            }
            else {
                this.infinite = this._tmpInfinite;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "currentIndex", {
        get: /**
         * @return {?}
         */
        function () { return this._currentIndex; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            // if now index if not equale to save index, do someting
            if (this.currentIndex !== value) {
                // if the value is not contain with the boundary not handler
                if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {
                    return;
                }
                this._currentIndex = value;
                if (this.elms) {
                    if (this.autoplay && !this.isFromAuto) {
                        this._zone.runOutsideAngular((/**
                         * @return {?}
                         */
                        function () {
                            _this.stopEvent.next();
                            _this.callRestart();
                        }));
                    }
                    this.drawView(this.currentIndex, this.hasInitWriteValue);
                    if (this.isDragMany) {
                        this.hasInitWriteValue = true;
                    }
                }
                if (0 <= this.currentIndex && this.currentIndex <= this.itemElms.length - 1) {
                    this._zone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onChange(_this.currentIndex);
                        _this._cd.detectChanges();
                    }));
                }
            }
            this.isFromAuto = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "progressWidth", {
        get: /**
         * @return {?}
         */
        function () { return this._porgressWidth; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.progressElm !== undefined && this.autoplay) {
                this._porgressWidth = value;
                this._renderer.setStyle(((/** @type {?} */ (this.progressContainerElm.nativeElement))).children[0], 'width', this.progressWidth + "%");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "grabbing", {
        get: /**
         * @return {?}
         */
        function () { return this._grabbing; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this._grabbing !== value) {
                // console.log(value);
                this._zone.run((/**
                 * @return {?}
                 */
                function () {
                    _this._grabbing = value;
                    if (value) {
                        _this._renderer.addClass(_this.containerElm, 'grabbing');
                    }
                    else {
                        _this.panCount = 0;
                        _this.callRestart();
                        _this._renderer.removeClass(_this.containerElm, 'grabbing');
                    }
                    _this._cd.detectChanges();
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "left", {
        set: /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isPlatformBrowser(this.platformId)) {
                this._renderer.setStyle(this.containerElm, 'transform', "translateX(" + value + "px)");
            }
            else {
                this._renderer.setStyle(this.containerElm, 'transform', "translateX(" + value + "%)");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "maxRightIndex", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var addIndex = 0;
            switch (this.align) {
                case 'left':
                    addIndex = 0;
                    break;
                case 'center':
                    addIndex = (/** @type {?} */ (this.showNum)) - 1;
                    break;
                case 'right':
                    addIndex = (/** @type {?} */ (this.showNum)) - 1;
                    break;
            }
            return ((this.itemElms.length - 1) - this._showNum + 1) + addIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "runLoop", {
        get: /**
         * @private
         * @return {?}
         */
        function () { return this.autoplay || this.infinite; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "lengthOne", {
        get: /**
         * @private
         * @return {?}
         */
        function () { return this.itemElms.length === 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "rootElmWidth", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return (isPlatformBrowser(this.platformId) ? this.rootElm.getBoundingClientRect().width : 100);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "containerElmWidth", {
        set: /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setStyle(this.containerElm, 'width', value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.rootElm = this.container.nativeElement;
        this.containerElm = (/** @type {?} */ (this.rootElm.children[0]));
        this.init();
        forkJoin(this.bindClick(), 
        // when item changed, remove old hammer binding, and reset width
        this.itemElms.changes.pipe(
        // detectChanges to change view dots
        tap((/**
         * @return {?}
         */
        function () {
            if (_this.currentIndex > _this.itemElms.length - 1) {
                // i can't pass the changedetection check, only the way to using timeout. :(
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.currentIndex = _this.itemElms.length - 1;
                }), 0);
            }
            _this.destroy();
            _this.removeInfiniteElm();
            _this.init();
            _this.progressWidth = 0;
        })), tap((/**
         * @return {?}
         */
        function () { return _this._cd.detectChanges(); }))), resizeObservable(this.rootElm, (/**
         * @return {?}
         */
        function () { return _this.containerResize(); }))).pipe(takeUntil(this.destroy$)).subscribe();
    };
    /**
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
        this.destroy$.next();
        this.destroy$.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value || value === 0) {
            this.currentIndex = value;
            this.hasInitWriteValue = true;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        this.initVariable();
        this.setViewWidth(true);
        this.reSetAlignDistance();
        if (!this.disableDrag) {
            this.hammer = this.bindHammer();
        }
        this.drawView(this.currentIndex, false);
        if (isPlatformBrowser(this.platformId) && this.runLoop) {
            this.addInfiniteElm();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.destoryHammer();
        if (this.autoplay) {
            this.doNextSub$.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.destoryHammer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hammer) {
            this.hammer.destroy();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.addInfiniteElm = /**
     * @private
     * @return {?}
     */
    function () {
        for (var i = 1; i <= this.showNum; i++) {
            /** @type {?} */
            var elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[this.itemElms.length - i],
                index: this.itemElms.length - i
            });
            this.addStyle(elm.rootNodes[0], {
                position: 'absolute',
                // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                transform: "translateX(-" + 100 * i + "%)",
                visibility: this.runLoop ? 'visible' : 'hidden'
            });
            this.setStyle(elm.rootNodes[0], 'width', this.elmWidth);
            /** @type {?} */
            var elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                $implicit: this.data[i - 1],
                index: i - 1
            });
            this.addStyle(elm2.rootNodes[0], {
                // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,
                position: 'absolute',
                right: 0,
                top: 0,
                transform: "translateX(" + 100 * i + "%)",
                visibility: this.runLoop ? 'visible' : 'hidden'
            });
            this.setStyle(elm2.rootNodes[0], 'width', this.elmWidth);
            elm.detectChanges();
            elm2.detectChanges();
            this.infiniteElmRefs.push(elm);
            this.infiniteElmRefs.push(elm2);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.removeInfiniteElm = /**
     * @private
     * @return {?}
     */
    function () {
        this.infiniteElmRefs.forEach((/**
         * @param {?} a
         * @return {?}
         */
        function (a) {
            a.detach();
            a.destroy();
        }));
        if (this.infiniteContainer) {
            this.infiniteContainer.clear();
        }
        this.infiniteElmRefs = [];
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.containerResize = /**
     * @private
     * @return {?}
     */
    function () {
        this.setViewWidth();
        this.reSetAlignDistance();
        // 因為不能滑了，所以要回到第一個，以確保全部都有顯示
        if (this.align !== 'center' && this.showNum >= this.elms.length) {
            this.currentIndex = 0;
        }
        this.drawView(this.currentIndex, false);
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.initVariable = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.elms = _this.itemElms.toArray().map((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.nativeElement; }));
            /** @type {?} */
            var startEvent = _this.restart.asObservable();
            /** @type {?} */
            var stopEvent = _this.stopEvent.asObservable();
            if (_this.mourseEnable) {
                startEvent = merge(startEvent, fromEvent(_this.containerElm, 'mouseleave').pipe(
                // when leave, we should reverse grabbing state to set the mouseOn state,
                // because when the grabbing, the mask will on, and it will occur leave again
                filter((/**
                 * @return {?}
                 */
                function () { return !_this.grabbing; })), tap((/**
                 * @return {?}
                 */
                function () { return _this.mouseOnContainer = false; }))));
                stopEvent = merge(stopEvent, fromEvent(_this.containerElm, 'mouseover').pipe(tap((/**
                 * @return {?}
                 */
                function () { return _this.mouseOnContainer = true; }))));
            }
            _this.doNext = startEvent.pipe(
            // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error
            // debounceTime(this.delay),
            switchMap((/**
             * @return {?}
             */
            function () { return _this.speedChange; })), switchMap((/**
             * @return {?}
             */
            function () {
                return timer(_this.delay).pipe(switchMap((/**
                 * @return {?}
                 */
                function () { return _this.runProgress(20); })), tap((/**
                 * @return {?}
                 */
                function () {
                    _this.isFromAuto = true;
                    // console.log('next');
                    if (_this.direction === 'left') {
                        _this.currentIndex -= _this.scrollNum;
                    }
                    else {
                        _this.currentIndex += _this.scrollNum;
                    }
                })), takeUntil(stopEvent.pipe(tap((/**
                 * @return {?}
                 */
                function () { return _this.progressWidth = 0; })))));
            })));
            if (_this.autoplay) {
                _this.doNextSub$ = _this.doNext.subscribe();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.reSetAlignDistance = /**
     * @private
     * @return {?}
     */
    function () {
        switch (this.align) {
            case 'center':
                this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;
                break;
            case 'left':
                this.alignDistance = 0;
                break;
            case 'right':
                this.alignDistance = this.rootElmWidth - this.elmWidth;
                break;
        }
    };
    /**
     * @private
     * @param {?=} isInit
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.setViewWidth = /**
     * @private
     * @param {?=} isInit
     * @return {?}
     */
    function (isInit) {
        var _this = this;
        if (this.isAutoNum) {
            this._showNum = this.getAutoNum();
        }
        this._renderer.addClass(this.containerElm, 'grab');
        if (isInit) {
            // remain one elm height
            this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        }
        this.elmWidth = this.rootElmWidth / this._showNum;
        this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        this.containerElmWidth = this.elmWidth * this.elms.length;
        this._renderer.setStyle(this.containerElm, 'position', 'relative');
        this.infiniteElmRefs.forEach((/**
         * @param {?} ref
         * @return {?}
         */
        function (ref) {
            _this.setStyle(ref.rootNodes[0], 'width', _this.elmWidth);
        }));
        this.elms.forEach((/**
         * @param {?} elm
         * @return {?}
         */
        function (elm) {
            _this.setStyle(elm, 'width', _this.elmWidth);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.bindHammer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return null;
        }
        return this._zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var hm = new Hammer.Manager(_this.containerElm);
            /** @type {?} */
            var pan = new Hammer.Pan({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 0 });
            hm.add(pan);
            hm.on('panleft panright panend pancancel', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                // console.log(e.type);
                if (_this.lengthOne) {
                    return;
                }
                _this.removeContainerTransition();
                if (_this.autoplay) {
                    _this._zone.runOutsideAngular((/**
                     * @return {?}
                     */
                    function () { _this.stopEvent.next(); }));
                }
                switch (e.type) {
                    case 'panleft':
                    case 'panright':
                        _this.panCount++;
                        // only when panmove more than two times, set move
                        if (_this.panCount < 2) {
                            return;
                        }
                        _this.grabbing = true;
                        // When show-num is bigger than length, stop hammer
                        if (_this.align !== 'center' && _this.showNum >= _this.elms.length) {
                            _this.hammer.stop(true);
                            return;
                        }
                        // Slow down at the first and last pane.
                        if (!_this.runLoop && _this.outOfBound(e.type)) {
                            e.deltaX *= 0.2;
                        }
                        if (!_this.notDrag) {
                            _this.left = -_this.currentIndex * _this.elmWidth + _this.alignDistance + e.deltaX;
                        }
                        // // if not dragmany, when bigger than half
                        if (!_this.isDragMany) {
                            if (Math.abs(e.deltaX) > _this.elmWidth * 0.5) {
                                if (e.deltaX > 0) {
                                    _this.currentIndex -= _this.scrollNum;
                                }
                                else {
                                    _this.currentIndex += _this.scrollNum;
                                }
                                _this.hammer.stop(true);
                                return;
                            }
                        }
                        break;
                    case 'pancancel':
                        _this.drawView(_this.currentIndex);
                        break;
                    case 'panend':
                        // if boundary more than rate
                        if (_this.panBoundary !== false &&
                            Math.abs(e.deltaX) > _this.elmWidth * _this.panBoundary) {
                            /** @type {?} */
                            var moveNum = _this.isDragMany ?
                                Math.ceil(Math.abs(e.deltaX) / _this.elmWidth) : _this.scrollNum;
                            /** @type {?} */
                            var prevIndex = _this.currentIndex - moveNum;
                            /** @type {?} */
                            var nextIndex = _this.currentIndex + moveNum;
                            // if right
                            if (e.deltaX > 0) {
                                _this.goPrev(prevIndex);
                                // left
                            }
                            else {
                                _this.goNext(nextIndex);
                            }
                            break;
                        }
                        else if (e.velocityX < -_this.swipeVelocity && e.distance > 10) {
                            _this.goNext(_this.currentIndex + _this.scrollNum);
                        }
                        else if (e.velocityX > _this.swipeVelocity && e.distance > 10) {
                            _this.goPrev(_this.currentIndex - _this.scrollNum);
                        }
                        else {
                            _this.drawView(_this.currentIndex);
                        }
                        break;
                }
            }));
            return hm;
        }));
    };
    /**
     * @private
     * @param {?} prevIndex
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.goPrev = /**
     * @private
     * @param {?} prevIndex
     * @return {?}
     */
    function (prevIndex) {
        if (!this.runLoop && prevIndex < 0) {
            prevIndex = 0;
            this.drawView(0);
        }
        this.currentIndex = prevIndex;
    };
    /**
     * @private
     * @param {?} nextIndex
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.goNext = /**
     * @private
     * @param {?} nextIndex
     * @return {?}
     */
    function (nextIndex) {
        if (!this.runLoop && nextIndex > this.maxRightIndex) {
            nextIndex = this.maxRightIndex;
            this.drawView(nextIndex);
        }
        this.currentIndex = nextIndex;
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.bindClick = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.btnNext && this.btnPrev) {
            return forkJoin(fromEvent(this.btnNext.nativeElement, 'click').pipe(tap((/**
             * @return {?}
             */
            function () { return _this.currentIndex++; }))), fromEvent(this.btnPrev.nativeElement, 'click').pipe(tap((/**
             * @return {?}
             */
            function () { return _this.currentIndex--; }))));
        }
        return of(null);
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.callRestart = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // if that is autoplay
        // if that mouse is not on container( only mouse-enable is true, the state maybe true)
        // if now is grabbing, skip this restart, using grabbing change restart
        if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.restart.next(null);
            }));
        }
    };
    /**
     * @private
     * @param {?} index
     * @param {?=} isAnimation
     * @param {?=} isFromAuto
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.drawView = /**
     * @private
     * @param {?} index
     * @param {?=} isAnimation
     * @param {?=} isFromAuto
     * @return {?}
     */
    function (index, isAnimation, isFromAuto) {
        if (isAnimation === void 0) { isAnimation = true; }
        if (isFromAuto === void 0) { isFromAuto = this.isFromAuto; }
        // move element only on length is more than 1
        if (this.elms.length > 1) {
            this.removeContainerTransition();
            this.left = -((index * this.elmWidth) - this.alignDistance);
            if (isAnimation) {
                if (isFromAuto) {
                    this._renderer.addClass(this.containerElm, this.aniClassAuto);
                }
                else {
                    this._renderer.addClass(this.containerElm, this.aniClass);
                }
                // if infinite move to next index with timeout
                this.infiniteHandler(index);
            }
        }
        else {
            this.left = this.alignDistance;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.removeContainerTransition = /**
     * @private
     * @return {?}
     */
    function () {
        this._renderer.removeClass(this.containerElm, this.aniClass);
        this._renderer.removeClass(this.containerElm, this.aniClassAuto);
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.infiniteHandler = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (this.runLoop) {
            /** @type {?} */
            var state_1 = 0;
            state_1 = (index < 0) ? -1 : state_1;
            state_1 = (index > (this.itemElms.length - 1)) ? 1 : state_1;
            // index = index % this._showNum;
            if (state_1 !== 0) {
                switch (state_1) {
                    case -1:
                        this._currentIndex = (this.itemElms.length + index) % this.itemElms.length;
                        break;
                    case 1:
                        this._currentIndex = index % this.itemElms.length;
                        break;
                }
                /** @type {?} */
                var isFromAuto_1 = this.isFromAuto;
                if (this.saveTimeOut) {
                    this.saveTimeOut.unsubscribe();
                }
                this.saveTimeOut = timer(this.aniTime).pipe(switchMap((/**
                 * @return {?}
                 */
                function () {
                    // if it is any loop carousel, the next event need wait the timeout complete
                    if (_this.aniTime === _this.speed) {
                        _this.removeContainerTransition();
                        _this.left = -((_this._currentIndex - state_1) * _this.elmWidth) + _this.alignDistance;
                        return timer(50).pipe(tap((/**
                         * @return {?}
                         */
                        function () {
                            _this.drawView(_this.currentIndex, _this.hasInitWriteValue, isFromAuto_1);
                        })));
                    }
                    else {
                        _this.drawView(_this.currentIndex, false);
                    }
                    return of(null);
                })), takeUntil(this.stopEvent)).subscribe();
            }
        }
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.outOfBound = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'panleft':
                return this.currentIndex >= this.maxRightIndex;
            case 'panright':
                return this.currentIndex <= 0;
        }
    };
    /**
     * @private
     * @param {?} betweenTime
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.runProgress = /**
     * @private
     * @param {?} betweenTime
     * @return {?}
     */
    function (betweenTime) {
        var _this = this;
        return this._zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var howTimes = _this.speed / betweenTime;
            /** @type {?} */
            var everyIncrease = 100 / _this.speed * betweenTime;
            return interval(betweenTime).pipe(tap((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                _this.progressWidth = (t % howTimes) * everyIncrease;
            })), bufferCount(Math.round(howTimes), 0));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.getAutoNum = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currWidth = this.rootElmWidth;
        // check user has had set breakpoint
        if (this.breakpoint.length > 0) {
            // get the last bigget point
            /** @type {?} */
            var now = this.breakpoint.find((/**
             * @param {?} b
             * @return {?}
             */
            function (b) {
                return b.width >= currWidth;
            }));
            // if find value, it is current width
            if (now) {
                return now.number;
            }
            return this.breakpoint[this.breakpoint.length - 1].number;
        }
        // system init show number
        /** @type {?} */
        var initNum = 3;
        // 610
        if (currWidth > 300) {
            return Math.floor(initNum + (currWidth / 200));
        }
        return initNum;
    };
    /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.addStyle = /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @return {?}
     */
    function (elm, style) {
        var _this = this;
        if (style) {
            Object.keys(style).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var value = style[key];
                _this._renderer.setStyle(elm, key, value);
            }));
        }
    };
    /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.setStyle = /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    function (elm, style, value) {
        if (isPlatformBrowser(this.platformId)) {
            this._renderer.setStyle(elm, style, value + "px");
        }
        else {
            this._renderer.setStyle(elm, style, value + "%");
        }
    };
    NgxHmCarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-hm-carousel',
                    template: "<div #containerElm class=\"carousel\">\n  <!-- main content -->\n  <ng-content select=\"[ngx-hm-carousel-container]\"></ng-content>\n  <!-- left -->\n  <div #prev *ngIf=\"contentPrev\"\n    class=\"direction left\">\n    <ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n  </div>\n  <!--  right -->\n  <div #next *ngIf=\"contentNext\"\n    class=\"direction right\">\n    <ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n  </div>\n  <!-- indicators -->\n  <ul class=\"indicators\" *ngIf=\"dotElm\">\n    <li\n      *ngFor=\"let dot of itemElms; let i = index;\"\n      (click)=\"currentIndex = i\">\n      <ng-container\n        *ngTemplateOutlet=\"dotElm, context: {\n          $implicit: {\n            index : i,\n            currentIndex : currentIndex\n          }\n        }\">\n      </ng-container>\n    </li>\n  </ul>\n  <!-- progress -->\n  <div *ngIf=\"progressElm && autoplay\" #progress>\n    <ng-container\n      *ngTemplateOutlet=\"progressElm\">\n    </ng-container>\n  </div>\n\n  <div class=\"mask\" *ngIf=\"grabbing\">\n    <ng-container *ngIf=\"leaveObs$ | async\"></ng-container>\n  </div>\n</div>\n",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgxHmCarouselComponent; })),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:flex!important;flex-wrap:nowrap!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;cursor:pointer;display:flex;align-items:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{position:absolute;left:0;top:0;right:0;bottom:0}"]
                }] }
    ];
    /** @nocollapse */
    NgxHmCarouselComponent.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    NgxHmCarouselComponent.propDecorators = {
        container: [{ type: ViewChild, args: ['containerElm', { static: false },] }],
        btnPrev: [{ type: ViewChild, args: ['prev', { static: false },] }],
        btnNext: [{ type: ViewChild, args: ['next', { static: false },] }],
        progressContainerElm: [{ type: ViewChild, args: ['progress', { static: false },] }],
        itemElms: [{ type: ContentChildren, args: [NgxHmCarouselItemDirective, { read: ElementRef },] }],
        contentPrev: [{ type: ContentChild, args: ['carouselPrev', { static: false },] }],
        contentNext: [{ type: ContentChild, args: ['carouselNext', { static: false },] }],
        dotElm: [{ type: ContentChild, args: ['carouselDot', { static: false },] }],
        progressElm: [{ type: ContentChild, args: ['carouselProgress', { static: false },] }],
        infiniteContainer: [{ type: ContentChild, args: ['infiniteContainer', { static: false, read: ViewContainerRef },] }],
        contentContent: [{ type: ContentChild, args: ['carouselContent', { static: false },] }],
        data: [{ type: Input }],
        aniTime: [{ type: Input }],
        aniClass: [{ type: Input }],
        aniClassAuto: [{ type: Input }],
        swipe: [{ type: Input }],
        panBoundary: [{ type: Input, args: ['pan-boundary',] }],
        align: [{ type: Input }],
        notDrag: [{ type: Input, args: ['not-follow-pan',] }],
        mourseEnable: [{ type: Input, args: ['mourse-enable',] }],
        delay: [{ type: Input, args: ['between-delay',] }],
        direction: [{ type: Input, args: ['autoplay-direction',] }],
        scrollNum: [{ type: Input, args: ['scroll-num',] }],
        isDragMany: [{ type: Input, args: ['drag-many',] }],
        swipeVelocity: [{ type: Input, args: ['swipe-velocity',] }],
        breakpoint: [{ type: Input }],
        disableDrag: [{ type: Input, args: ['disable-drag',] }],
        infinite: [{ type: Input, args: ['infinite',] }],
        speed: [{ type: Input, args: ['autoplay-speed',] }],
        showNum: [{ type: Input, args: ['show-num',] }],
        autoplay: [{ type: Input, args: ['autoplay',] }]
    };
    return NgxHmCarouselComponent;
}());
export { NgxHmCarouselComponent };
if (false) {
    /** @type {?} */
    NgxHmCarouselComponent.prototype.container;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.progressContainerElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.itemElms;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.dotElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.progressElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.infiniteContainer;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentContent;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.data;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniTime;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniClass;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniClassAuto;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.swipe;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.panBoundary;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.align;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.notDrag;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.mourseEnable;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.delay;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.direction;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.scrollNum;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.isDragMany;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.swipeVelocity;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.breakpoint;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.leaveObs$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.isFromAuto;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.isAutoNum;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.mouseOnContainer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.alignDistance;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.elmWidth;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.rootElm;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.containerElm;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.elms;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.infiniteElmRefs;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.hammer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.saveTimeOut;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.doNextSub$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.doNext;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.restart;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.speedChange;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.stopEvent;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._porgressWidth;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._currentIndex;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._showNum;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._autoplay;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._infinite;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._tmpInfinite;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._grabbing;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._disableDrag;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.panCount;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.hasInitWriteValue;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._document;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._cd;
}
//# sourceMappingURL=data:application/json;base64,