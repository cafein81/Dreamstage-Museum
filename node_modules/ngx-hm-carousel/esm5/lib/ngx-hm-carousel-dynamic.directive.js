/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
// TODO: ssr problem should not hide on ssr
// TODO: show number change should recaculate is show and init show number
var NgxHmCarouselDynamicDirective = /** @class */ (function () {
    function NgxHmCarouselDynamicDirective(_view, _template) {
        this._view = _view;
        this._template = _template;
        this.show = 1;
        this.compelete = false;
        this._view.clear();
    }
    Object.defineProperty(NgxHmCarouselDynamicDirective.prototype, "currentI", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this.compelete) {
                /** @type {?} */
                var nextI = value + this.show;
                /** @type {?} */
                var prevI = value - this.show;
                if (this.index === 0 ||
                    this.index === this.length - 1 ||
                    this.index === nextI ||
                    this.index === prevI ||
                    this.index === value) {
                    this._view.createEmbeddedView(this._template);
                    this.compelete = true;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxHmCarouselDynamicDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    NgxHmCarouselDynamicDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxHmCarouselDynamic]'
                },] }
    ];
    /** @nocollapse */
    NgxHmCarouselDynamicDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
    NgxHmCarouselDynamicDirective.propDecorators = {
        index: [{ type: Input, args: ['ngxHmCarouselDynamic',] }],
        length: [{ type: Input, args: ['ngxHmCarouselDynamicLength',] }],
        show: [{ type: Input, args: ['ngxHmCarouselDynamicShow',] }],
        currentI: [{ type: Input, args: ['ngxHmCarouselDynamicIndex',] }]
    };
    return NgxHmCarouselDynamicDirective;
}());
export { NgxHmCarouselDynamicDirective };
if (false) {
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.index;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.length;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.show;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype.compelete;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._view;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhtLWNhcm91c2VsLWR5bmFtaWMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhtLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL25neC1obS1jYXJvdXNlbC1keW5hbWljLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFJeEY7SUE0QkUsdUNBQ1UsS0FBdUIsRUFDdkIsU0FBMkI7UUFEM0IsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUF2QkYsU0FBSSxHQUFHLENBQUMsQ0FBQztRQW1CcEMsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUt4QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUF4QkQsc0JBQ0ksbURBQVE7Ozs7O1FBRFosVUFDYSxLQUFhO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFOztvQkFDYixLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJOztvQkFDekIsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSTtnQkFDL0IsSUFDRSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUM7b0JBQ2hCLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO29CQUM5QixJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUs7b0JBQ3BCLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztvQkFDcEIsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQ3BCO29CQUNBLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUM5QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztpQkFDdkI7YUFDRjtRQUNILENBQUM7OztPQUFBOzs7O0lBVUQsZ0RBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7Z0JBbkNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2lCQUNuQzs7OztnQkFOK0MsZ0JBQWdCO2dCQUE3QixXQUFXOzs7d0JBUzNDLEtBQUssU0FBQyxzQkFBc0I7eUJBQzVCLEtBQUssU0FBQyw0QkFBNEI7dUJBQ2xDLEtBQUssU0FBQywwQkFBMEI7MkJBQ2hDLEtBQUssU0FBQywyQkFBMkI7O0lBNkJwQyxvQ0FBQztDQUFBLEFBckNELElBcUNDO1NBbENZLDZCQUE2Qjs7O0lBRXhDLDhDQUE2Qzs7SUFDN0MsK0NBQW9EOztJQUNwRCw2Q0FBNEM7Ozs7O0lBbUI1QyxrREFBMEI7Ozs7O0lBR3hCLDhDQUErQjs7Ozs7SUFDL0Isa0RBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyBUT0RPOiBzc3IgcHJvYmxlbSBzaG91bGQgbm90IGhpZGUgb24gc3NyXG4vLyBUT0RPOiBzaG93IG51bWJlciBjaGFuZ2Ugc2hvdWxkIHJlY2FjdWxhdGUgaXMgc2hvdyBhbmQgaW5pdCBzaG93IG51bWJlclxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25neEhtQ2Fyb3VzZWxEeW5hbWljXSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4SG1DYXJvdXNlbER5bmFtaWNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgnbmd4SG1DYXJvdXNlbER5bmFtaWMnKSBpbmRleDogbnVtYmVyO1xuICBASW5wdXQoJ25neEhtQ2Fyb3VzZWxEeW5hbWljTGVuZ3RoJykgbGVuZ3RoOiBudW1iZXI7XG4gIEBJbnB1dCgnbmd4SG1DYXJvdXNlbER5bmFtaWNTaG93Jykgc2hvdyA9IDE7XG4gIEBJbnB1dCgnbmd4SG1DYXJvdXNlbER5bmFtaWNJbmRleCcpXG4gIHNldCBjdXJyZW50SSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKCF0aGlzLmNvbXBlbGV0ZSkge1xuICAgICAgY29uc3QgbmV4dEkgPSB2YWx1ZSArIHRoaXMuc2hvdztcbiAgICAgIGNvbnN0IHByZXZJID0gdmFsdWUgLSB0aGlzLnNob3c7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuaW5kZXggPT09IDAgfHxcbiAgICAgICAgdGhpcy5pbmRleCA9PT0gdGhpcy5sZW5ndGggLSAxIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IG5leHRJIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IHByZXZJIHx8XG4gICAgICAgIHRoaXMuaW5kZXggPT09IHZhbHVlXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fdmlldy5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5fdGVtcGxhdGUpO1xuICAgICAgICB0aGlzLmNvbXBlbGV0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb21wZWxldGUgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF92aWV3OiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgX3RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgdGhpcy5fdmlldy5jbGVhcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gIH1cblxufVxuIl19