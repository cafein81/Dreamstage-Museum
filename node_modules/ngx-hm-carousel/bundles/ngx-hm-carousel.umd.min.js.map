{"version":3,"sources":["ng://ngx-hm-carousel/lib/ngx-hm-carousel-dynamic.directive.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel-item.directive.ts","ng://ngx-hm-carousel/lib/rxjs.observable.resize.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.component.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.module.ts"],"names":["NgxHmCarouselDynamicDirective","_view","_template","this","show","compelete","clear","Object","defineProperty","prototype","value","nextI","prevI","index","length","createEmbeddedView","ngOnInit","Directive","args","selector","ViewContainerRef","TemplateRef","Input","NgxHmCarouselItemDirective","resizeObservable","elm","cb","time","elmObserve$","Observable","create","observer","ResizeObserver","entries","obs","next","observe","pipe","debounceTime","tap","finalize","unobserve","disconnect","NgxHmCarouselComponent","platformId","_document","_renderer","_zone","_cd","_this","aniTime","aniClass","aniClassAuto","panBoundary","align","notDrag","mourseEnable","delay","direction","scrollNum","isDragMany","swipeVelocity","breakpoint","leaveObs$","merge","fromEvent","e","grabbing","stopPropagation","preventDefault","isFromAuto","isAutoNum","mouseOnContainer","alignDistance","elmWidth","infiniteElmRefs","restart","BehaviorSubject","speedChange","stopEvent","Subject","destroy$","_porgressWidth","_currentIndex","_showNum","_autoplay","_infinite","_tmpInfinite","_grabbing","_disableDrag","panCount","hasInitWriteValue","onChange","_","onTouched","rootElm","destoryHammer","hammer","bindHammer","forEach","ref","addStyle","rootNodes","visibility","runLoop","runOutsideAngular","setViewWidth","reSetAlignDistance","isPlatformBrowser","elms","progressWidth","doNextSub$","doNext","subscribe","unsubscribe","infinite","currentIndex","itemElms","autoplay","callRestart","drawView","run","detectChanges","progressElm","undefined","setStyle","progressContainerElm","children","addClass","containerElm","removeClass","addIndex","getBoundingClientRect","width","ngAfterViewInit","container","nativeElement","init","forkJoin","bindClick","changes","setTimeout","destroy","removeInfiniteElm","containerResize","takeUntil","ngOnDestroy","writeValue","registerOnChange","fn","registerOnTouched","initVariable","disableDrag","addInfiniteElm","i","showNum","infiniteContainer","contentContent","$implicit","data","position","transform","elm2","right","top","push","a","detach","toArray","map","x","startEvent","asObservable","filter","switchMap","timer","runProgress","rootElmWidth","isInit","getAutoNum","containerElmWidth","hm","Hammer","Manager","pan","Pan","DIRECTION_HORIZONTAL","threshold","add","on","lengthOne","removeContainerTransition","type","stop","outOfBound","deltaX","left","Math","abs","moveNum","ceil","prevIndex","nextIndex","goPrev","goNext","velocityX","distance","maxRightIndex","btnNext","btnPrev","of","isAnimation","infiniteHandler","state_1","isFromAuto_1","saveTimeOut","speed","betweenTime","howTimes","everyIncrease","interval","t","bufferCount","round","currWidth","now","find","b","number","floor","style","keys","key","Component","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","decorators","Inject","PLATFORM_ID","DOCUMENT","Renderer2","NgZone","ChangeDetectorRef","ViewChild","static","ContentChildren","read","ElementRef","ContentChild","NgxHmCarouselModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n// TODO: ssr problem should not hide on ssr\n// TODO: show number change should recaculate is show and init show number\n@Directive({\n  selector: '[ngxHmCarouselDynamic]'\n})\nexport class NgxHmCarouselDynamicDirective implements OnInit {\n\n  @Input('ngxHmCarouselDynamic') index: number;\n  @Input('ngxHmCarouselDynamicLength') length: number;\n  @Input('ngxHmCarouselDynamicShow') show = 1;\n  @Input('ngxHmCarouselDynamicIndex')\n  set currentI(value: number) {\n    if (!this.compelete) {\n      const nextI = value + this.show;\n      const prevI = value - this.show;\n      if (\n        this.index === 0 ||\n        this.index === this.length - 1 ||\n        this.index === nextI ||\n        this.index === prevI ||\n        this.index === value\n      ) {\n        this._view.createEmbeddedView(this._template);\n        this.compelete = true;\n      }\n    }\n  }\n\n  private compelete = false;\n\n  constructor(\n    private _view: ViewContainerRef,\n    private _template: TemplateRef<any>) {\n    this._view.clear();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[ngx-hm-carousel-item]'\n})\nexport class NgxHmCarouselItemDirective {\n\n  constructor() { }\n\n}\n","import ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Subscriber } from 'rxjs';\nimport { debounceTime, tap, finalize } from 'rxjs/operators';\n\n/**\n * An observable creator for element resize.\n * @param elm the watch element.\n * @param cb when resize complete, call back function.\n * @param time resize emit time, default is 200\n */\nexport function resizeObservable(elm: HTMLElement, cb: () => void, time = 200): Observable<any> {\n  let elmObserve$: ResizeObserver;\n  return Observable.create((observer: Subscriber<any>) => {\n    elmObserve$ = new ResizeObserver((entries, obs) => {\n      observer.next(elmObserve$);\n    });\n    elmObserve$.observe(elm);\n  }).pipe(\n    debounceTime(time),\n    tap(() => {\n      cb();\n    }),\n    finalize(() => {\n      elmObserve$.unobserve(elm);\n      elmObserve$.disconnect();\n    })\n  );\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EmbeddedViewRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  QueryList,\n  Renderer2,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, forkJoin, fromEvent, interval, merge, Observable, of, Subject, Subscription, timer } from 'rxjs';\nimport { bufferCount, filter, switchMap, takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\nimport { NgxHmCarouselBreakPointUp } from './ngx-hm-carousel.model';\nimport { resizeObservable } from './rxjs.observable.resize';\n\n@Component({\n  selector: 'ngx-hm-carousel',\n  templateUrl: './ngx-hm-carousel.component.html',\n  styleUrls: ['./ngx-hm-carousel.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxHmCarouselComponent),\n    multi: true\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxHmCarouselComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  @ViewChild('containerElm', { static: false }) container: ElementRef;\n  @ViewChild('prev', { static: false }) btnPrev: ElementRef;\n  @ViewChild('next', { static: false }) btnNext: ElementRef;\n  @ViewChild('progress', { static: false }) progressContainerElm: ElementRef;\n  // get all item elms\n  @ContentChildren(NgxHmCarouselItemDirective, { read: ElementRef }) itemElms: QueryList<ElementRef>;\n  @ContentChild('carouselPrev', { static: false }) contentPrev: TemplateRef<any>;\n  @ContentChild('carouselNext', { static: false }) contentNext: TemplateRef<any>;\n  @ContentChild('carouselDot', { static: false }) dotElm: TemplateRef<any>;\n  @ContentChild('carouselProgress', { static: false }) progressElm: TemplateRef<any>;\n\n  @ContentChild('infiniteContainer', { static: false, read: ViewContainerRef }) infiniteContainer: ViewContainerRef;\n  @ContentChild('carouselContent', { static: false }) contentContent: TemplateRef<any>;\n\n  @Input() data: any[];\n  @Input() aniTime = 400;\n  @Input() aniClass = 'transition';\n  @Input() aniClassAuto = this.aniClass;\n  @Input() swipe;\n  @Input('pan-boundary') panBoundary: number | false = 0.15;\n\n  // this default autoplay animation is same as aniClass\n  @Input() align: 'left' | 'center' | 'right' = 'center';\n  @Input('not-follow-pan') notDrag = false;\n  @Input('mourse-enable') mourseEnable = false;\n  @Input('between-delay') delay = 8000;\n  @Input('autoplay-direction') direction: 'left' | 'right' = 'right';\n  @Input('scroll-num') scrollNum = 1;\n  @Input('drag-many') isDragMany = false;\n  @Input('swipe-velocity') swipeVelocity = 0.3;\n\n  @Input() breakpoint: NgxHmCarouselBreakPointUp[] = [];\n\n  @Input('disable-drag')\n  get disableDrag() {\n    return this._disableDrag;\n  }\n  set disableDrag(value) {\n    if (this.rootElm) {\n      if (this._disableDrag !== value) {\n        if (value) {\n          this.destoryHammer();\n        } else {\n          this.hammer = this.bindHammer();\n        }\n      }\n    }\n    this._disableDrag = value;\n  }\n\n  @Input('infinite')\n  get infinite() { return this._infinite; }\n  set infinite(value) {\n    this._infinite = value;\n\n    this.infiniteElmRefs.forEach((ref) => {\n      this.addStyle(ref.rootNodes[0], {\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n    });\n  }\n\n  @Input('autoplay-speed')\n  get speed() { return this.speedChange.value; }\n  set speed(value) {\n    this._zone.runOutsideAngular(() => {\n      this.speedChange.next(value);\n    });\n  }\n\n  @Input('show-num')\n  get showNum() { return this._showNum; }\n  set showNum(value: number | 'auto') {\n    if (value === 'auto') {\n      this.isAutoNum = true;\n    } else {\n      this._showNum = +value;\n      if (this.rootElm) {\n        this.setViewWidth();\n        this.reSetAlignDistance();\n      }\n    }\n  }\n\n  @Input('autoplay')\n  get autoplay() { return this._autoplay; }\n  set autoplay(value) {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.elms) {\n        this.progressWidth = 0;\n        if (value) {\n          this._zone.runOutsideAngular(() => {\n            this.doNextSub$ = this.doNext.subscribe();\n          });\n        } else {\n          if (this.doNextSub$) { this.doNextSub$.unsubscribe(); }\n        }\n      }\n    }\n    this._autoplay = value;\n    // if set autoplay, then the infinite is true\n    if (value) {\n      this._tmpInfinite = this.infinite;\n      this.infinite = true;\n    } else {\n      this.infinite = this._tmpInfinite;\n    }\n  }\n\n  get currentIndex() { return this._currentIndex; }\n  set currentIndex(value) {\n    // if now index if not equale to save index, do someting\n    if (this.currentIndex !== value) {\n\n      // if the value is not contain with the boundary not handler\n      if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {\n        return;\n      }\n      this._currentIndex = value;\n      if (this.elms) {\n        if (this.autoplay && !this.isFromAuto) {\n\n          this._zone.runOutsideAngular(() => {\n            this.stopEvent.next();\n            this.callRestart();\n          });\n        }\n        this.drawView(this.currentIndex, this.hasInitWriteValue);\n        if (this.isDragMany) {\n          this.hasInitWriteValue = true;\n        }\n      }\n      if (0 <= this.currentIndex && this.currentIndex <= this.itemElms.length - 1) {\n        this._zone.run(() => {\n          this.onChange(this.currentIndex);\n          this._cd.detectChanges();\n        });\n      }\n    }\n    this.isFromAuto = false;\n  }\n\n  get progressWidth() { return this._porgressWidth; }\n  set progressWidth(value) {\n    if (this.progressElm !== undefined && this.autoplay) {\n      this._porgressWidth = value;\n      this._renderer.setStyle(\n        (this.progressContainerElm.nativeElement as HTMLElement).children[0],\n        'width',\n        `${this.progressWidth}%`\n      );\n    }\n  }\n\n  get grabbing() { return this._grabbing; }\n  set grabbing(value: boolean) {\n    if (this._grabbing !== value) {\n      // console.log(value);\n      this._zone.run(() => {\n        this._grabbing = value;\n        if (value) {\n          this._renderer.addClass(this.containerElm, 'grabbing');\n        } else {\n          this.panCount = 0;\n          this.callRestart();\n          this._renderer.removeClass(this.containerElm, 'grabbing');\n        }\n        this._cd.detectChanges();\n      });\n    }\n  }\n\n  // using for check mouse or touchend\n  leaveObs$ = merge(\n    fromEvent(this._document, 'mouseup'),\n    fromEvent(this._document, 'touchend')\n  ).pipe(\n    tap((e: Event) => {\n      this.grabbing = false;\n      e.stopPropagation();\n      e.preventDefault();\n    })\n  );\n\n  private set left(value: number) {\n    if (isPlatformBrowser(this.platformId)) {\n      this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}px)`);\n    } else {\n      this._renderer.setStyle(this.containerElm, 'transform', `translateX(${value}%)`);\n    }\n  }\n\n  private get maxRightIndex() {\n    let addIndex = 0;\n    switch (this.align) {\n      case 'left':\n        addIndex = 0;\n        break;\n      case 'center':\n        addIndex = this.showNum as number - 1;\n        break;\n      case 'right':\n        addIndex = this.showNum as number - 1;\n        break;\n    }\n    return ((this.itemElms.length - 1) - this._showNum + 1) + addIndex;\n  }\n\n  private get runLoop() { return this.autoplay || this.infinite; }\n  private get lengthOne() { return this.itemElms.length === 1; }\n\n  private get rootElmWidth() {\n    return (isPlatformBrowser(this.platformId) ? this.rootElm.getBoundingClientRect().width : 100);\n  }\n\n  private set containerElmWidth(value: number) {\n    this.setStyle(this.containerElm, 'width', value);\n  }\n\n  private isFromAuto = true;\n  private isAutoNum = false;\n  private mouseOnContainer = false;\n  private alignDistance = 0;\n  private elmWidth = 0;\n\n  private rootElm: HTMLElement;\n  private containerElm: HTMLElement;\n\n  private elms: Array<HTMLElement>;\n  private infiniteElmRefs: Array<EmbeddedViewRef<any>> = [];\n\n  private hammer: HammerManager;\n\n  private saveTimeOut: Subscription;\n  private doNextSub$: Subscription;\n  private doNext: Observable<any>;\n\n  private restart = new BehaviorSubject<any>(null);\n  private speedChange = new BehaviorSubject(5000);\n  private stopEvent = new Subject<any>();\n  private destroy$ = new Subject<any>();\n\n  private _porgressWidth = 0;\n  private _currentIndex = 0;\n  private _showNum = 1;\n  private _autoplay = false;\n  private _infinite = false;\n  private _tmpInfinite = false;\n  private _grabbing = false;\n  private _disableDrag = false;\n\n  private panCount = 0;\n\n\n  // this variable use for check the init value is write with ngModel,\n  // when init first, not set with animation\n  private hasInitWriteValue = false;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject(DOCUMENT) private _document,\n    private _renderer: Renderer2,\n    private _zone: NgZone,\n    private _cd: ChangeDetectorRef\n  ) { }\n\n  ngAfterViewInit() {\n    this.rootElm = this.container.nativeElement;\n    this.containerElm = this.rootElm.children[0] as HTMLElement;\n\n    this.init();\n\n    forkJoin(\n      this.bindClick(),\n      // when item changed, remove old hammer binding, and reset width\n      this.itemElms.changes.pipe(\n        // detectChanges to change view dots\n        tap(() => {\n          if (this.currentIndex > this.itemElms.length - 1) {\n            // i can't pass the changedetection check, only the way to using timeout. :(\n            setTimeout(() => {\n              this.currentIndex = this.itemElms.length - 1;\n            }, 0);\n          }\n          this.destroy();\n          this.removeInfiniteElm();\n          this.init();\n          this.progressWidth = 0;\n        }),\n        tap(() => this._cd.detectChanges()),\n      ),\n      resizeObservable(\n        this.rootElm, () => this.containerResize()\n      )\n    ).pipe(\n      takeUntil(this.destroy$),\n    ).subscribe();\n\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n    this.destroy$.next();\n    this.destroy$.unsubscribe();\n  }\n\n  writeValue(value: any) {\n    if (value || value === 0) {\n      this.currentIndex = value;\n      this.hasInitWriteValue = true;\n    }\n  }\n\n  registerOnChange(fn: (value: any) => any) { this.onChange = fn; }\n  registerOnTouched(fn: () => any) { this.onTouched = fn; }\n  private onChange = (_: any) => { };\n  private onTouched = () => { };\n\n  private init() {\n    this.initVariable();\n    this.setViewWidth(true);\n    this.reSetAlignDistance();\n    if (!this.disableDrag) {\n      this.hammer = this.bindHammer();\n    }\n    this.drawView(this.currentIndex, false);\n    if (isPlatformBrowser(this.platformId) && this.runLoop) {\n      this.addInfiniteElm();\n    }\n  }\n\n  private destroy() {\n    this.destoryHammer();\n\n    if (this.autoplay) { this.doNextSub$.unsubscribe(); }\n  }\n\n  private destoryHammer() {\n    if (this.hammer) {\n      this.hammer.destroy();\n    }\n  }\n\n  private addInfiniteElm() {\n    for (let i = 1; i <= this.showNum; i++) {\n      const elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {\n        $implicit: this.data[this.itemElms.length - i],\n        index: this.itemElms.length - i\n      });\n      this.addStyle(elm.rootNodes[0], {\n        position: 'absolute',\n        // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,\n        transform: `translateX(-${100 * i}%)`,\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n      this.setStyle(elm.rootNodes[0], 'width', this.elmWidth);\n\n      const elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {\n        $implicit: this.data[i - 1],\n        index: i - 1\n      });\n      this.addStyle(elm2.rootNodes[0], {\n        // boxShadow: `0 0 0 5000px rgba(200, 75, 75, 0.5) inset`,\n        position: 'absolute',\n        right: 0,\n        top: 0,\n        transform: `translateX(${100 * i}%)`,\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n      this.setStyle(elm2.rootNodes[0], 'width', this.elmWidth);\n\n      elm.detectChanges();\n      elm2.detectChanges();\n\n      this.infiniteElmRefs.push(elm);\n      this.infiniteElmRefs.push(elm2);\n    }\n\n  }\n\n  private removeInfiniteElm() {\n    this.infiniteElmRefs.forEach(a => {\n      a.detach();\n      a.destroy();\n    });\n    if (this.infiniteContainer) {\n      this.infiniteContainer.clear();\n    }\n    this.infiniteElmRefs = [];\n  }\n\n  private containerResize() {\n    this.setViewWidth();\n    this.reSetAlignDistance();\n\n    // å çºä¸è½æ»äºï¼æä»¥è¦åå°ç¬¬ä¸åï¼ä»¥ç¢ºä¿å¨é¨é½æé¡¯ç¤º\n    if (this.align !== 'center' && this.showNum >= this.elms.length) {\n      this.currentIndex = 0;\n    }\n    this.drawView(this.currentIndex, false);\n  }\n\n  private initVariable() {\n    this._zone.runOutsideAngular(() => {\n\n      this.elms = this.itemElms.toArray().map(x => x.nativeElement);\n\n      let startEvent = this.restart.asObservable();\n      let stopEvent = this.stopEvent.asObservable();\n      if (this.mourseEnable) {\n        startEvent = merge(\n          startEvent,\n          fromEvent(this.containerElm, 'mouseleave').pipe(\n            // when leave, we should reverse grabbing state to set the mouseOn state,\n            // because when the grabbing, the mask will on, and it will occur leave again\n            filter(() => !this.grabbing),\n            tap(() => this.mouseOnContainer = false)\n          )\n        );\n        stopEvent = merge(\n          stopEvent,\n          fromEvent(this.containerElm, 'mouseover').pipe(\n            tap(() => this.mouseOnContainer = true)\n          )\n        );\n      }\n\n      this.doNext = startEvent.pipe(\n        // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error\n        // debounceTime(this.delay),\n        switchMap(() => this.speedChange),\n        switchMap(() =>\n          timer(this.delay).pipe(\n            switchMap(() => this.runProgress(20)),\n            tap(() => {\n              this.isFromAuto = true;\n              // console.log('next');\n              if (this.direction === 'left') {\n                this.currentIndex -= this.scrollNum;\n              } else {\n                this.currentIndex += this.scrollNum;\n              }\n            }),\n            takeUntil(stopEvent.pipe(\n              tap(() => this.progressWidth = 0)\n            ))\n          )\n        ));\n\n      if (this.autoplay) {\n        this.doNextSub$ = this.doNext.subscribe();\n      }\n    });\n  }\n\n  private reSetAlignDistance() {\n    switch (this.align) {\n      case 'center':\n        this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;\n        break;\n      case 'left':\n        this.alignDistance = 0;\n        break;\n      case 'right':\n        this.alignDistance = this.rootElmWidth - this.elmWidth;\n        break;\n    }\n  }\n\n  private setViewWidth(isInit?: boolean) {\n    if (this.isAutoNum) {\n      this._showNum = this.getAutoNum();\n    }\n    this._renderer.addClass(this.containerElm, 'grab');\n    if (isInit) {\n      // remain one elm height\n      this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\n    }\n    this.elmWidth = this.rootElmWidth / this._showNum;\n\n    this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\n\n    this.containerElmWidth = this.elmWidth * this.elms.length;\n\n    this._renderer.setStyle(this.containerElm, 'position', 'relative');\n\n    this.infiniteElmRefs.forEach((ref) => {\n      this.setStyle(ref.rootNodes[0], 'width', this.elmWidth);\n    });\n    this.elms.forEach((elm: HTMLElement) => {\n      this.setStyle(elm, 'width', this.elmWidth);\n    });\n\n  }\n\n  private bindHammer() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return null;\n    }\n    return this._zone.runOutsideAngular(() => {\n\n      const hm = new Hammer.Manager(this.containerElm);\n\n      const pan = new Hammer.Pan({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 0 });\n\n      hm.add(pan);\n\n      hm.on('panleft panright panend pancancel', (e: HammerInput) => {\n        // console.log(e.type);\n\n        if (this.lengthOne) {\n          return;\n        }\n\n        this.removeContainerTransition();\n\n        if (this.autoplay) {\n          this._zone.runOutsideAngular(() => { this.stopEvent.next(); });\n        }\n\n        switch (e.type) {\n          case 'panleft':\n          case 'panright':\n            this.panCount++;\n            // only when panmove more than two times, set move\n            if (this.panCount < 2) {\n              return;\n            }\n\n            this.grabbing = true;\n            // When show-num is bigger than length, stop hammer\n            if (this.align !== 'center' && this.showNum >= this.elms.length) {\n              this.hammer.stop(true);\n              return;\n            }\n            // Slow down at the first and last pane.\n            if (!this.runLoop && this.outOfBound(e.type)) {\n              e.deltaX *= 0.2;\n            }\n\n            if (!this.notDrag) {\n              this.left = -this.currentIndex * this.elmWidth + this.alignDistance + e.deltaX;\n            }\n\n            // // if not dragmany, when bigger than half\n            if (!this.isDragMany) {\n              if (Math.abs(e.deltaX) > this.elmWidth * 0.5) {\n                if (e.deltaX > 0) {\n                  this.currentIndex -= this.scrollNum;\n                } else {\n                  this.currentIndex += this.scrollNum;\n                }\n                this.hammer.stop(true);\n                return;\n              }\n            }\n            break;\n          case 'pancancel':\n            this.drawView(this.currentIndex);\n            break;\n\n          case 'panend':\n            // if boundary more than rate\n            if (\n              this.panBoundary !== false &&\n              Math.abs(e.deltaX) > this.elmWidth * this.panBoundary\n            ) {\n              const moveNum = this.isDragMany ?\n                Math.ceil(Math.abs(e.deltaX) / this.elmWidth) : this.scrollNum;\n\n              const prevIndex = this.currentIndex - moveNum;\n              const nextIndex = this.currentIndex + moveNum;\n\n              // if right\n              if (e.deltaX > 0) {\n                this.goPrev(prevIndex);\n                // left\n              } else {\n                this.goNext(nextIndex);\n              }\n              break;\n            } else if (e.velocityX < -this.swipeVelocity && e.distance > 10) {\n              this.goNext(this.currentIndex + this.scrollNum);\n            } else if (e.velocityX > this.swipeVelocity && e.distance > 10) {\n              this.goPrev(this.currentIndex - this.scrollNum);\n            } else {\n              this.drawView(this.currentIndex);\n            }\n            break;\n        }\n      });\n\n      return hm;\n    });\n\n  }\n\n  private goPrev(prevIndex: number) {\n    if (!this.runLoop && prevIndex < 0) {\n      prevIndex = 0;\n      this.drawView(0);\n    }\n    this.currentIndex = prevIndex;\n  }\n\n  private goNext(nextIndex: number) {\n    if (!this.runLoop && nextIndex > this.maxRightIndex) {\n      nextIndex = this.maxRightIndex;\n      this.drawView(nextIndex);\n    }\n    this.currentIndex = nextIndex;\n  }\n\n  private bindClick() {\n    if (this.btnNext && this.btnPrev) {\n      return forkJoin(\n        fromEvent(this.btnNext.nativeElement, 'click').pipe(\n          tap(() => this.currentIndex++)\n        ),\n        fromEvent(this.btnPrev.nativeElement, 'click').pipe(\n          tap(() => this.currentIndex--)\n        )\n      );\n    }\n    return of(null);\n  }\n\n  private callRestart() {\n    // if that is autoplay\n    // if that mouse is not on container( only mouse-enable is true, the state maybe true)\n    // if now is grabbing, skip this restart, using grabbing change restart\n    if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {\n      this._zone.runOutsideAngular(() => {\n        this.restart.next(null);\n      });\n    }\n  }\n\n  private drawView(index: number, isAnimation = true, isFromAuto = this.isFromAuto) {\n    // move element only on length is more than 1\n    if (this.elms.length > 1) {\n      this.removeContainerTransition();\n      this.left = -((index * this.elmWidth) - this.alignDistance);\n\n      if (isAnimation) {\n        if (isFromAuto) {\n          this._renderer.addClass(this.containerElm, this.aniClassAuto);\n        } else {\n          this._renderer.addClass(this.containerElm, this.aniClass);\n        }\n        // if infinite move to next index with timeout\n        this.infiniteHandler(index);\n      }\n\n    } else {\n      this.left = this.alignDistance;\n    }\n  }\n\n  private removeContainerTransition() {\n    this._renderer.removeClass(this.containerElm, this.aniClass);\n    this._renderer.removeClass(this.containerElm, this.aniClassAuto);\n  }\n\n  private infiniteHandler(index: number) {\n    if (this.runLoop) {\n      let state = 0;\n      state = (index < 0) ? -1 : state;\n      state = (index > (this.itemElms.length - 1)) ? 1 : state;\n\n      // index = index % this._showNum;\n      if (state !== 0) {\n        switch (state) {\n          case -1:\n            this._currentIndex = (this.itemElms.length + index) % this.itemElms.length;\n            break;\n          case 1:\n            this._currentIndex = index % this.itemElms.length;\n            break;\n        }\n\n        const isFromAuto = this.isFromAuto;\n        if (this.saveTimeOut) {\n          this.saveTimeOut.unsubscribe();\n        }\n\n        this.saveTimeOut = timer(this.aniTime).pipe(\n          switchMap(() => {\n            // if it is any loop carousel, the next event need wait the timeout complete\n            if (this.aniTime === this.speed) {\n              this.removeContainerTransition();\n              this.left = -((this._currentIndex - state) * this.elmWidth) + this.alignDistance;\n              return timer(50).pipe(\n                tap(() => {\n                  this.drawView(this.currentIndex, this.hasInitWriteValue, isFromAuto);\n                })\n              );\n            } else {\n              this.drawView(this.currentIndex, false);\n            }\n            return of(null);\n          }),\n          takeUntil(this.stopEvent)\n        ).subscribe();\n      }\n    }\n\n  }\n\n\n  private outOfBound(type) {\n    switch (type) {\n      case 'panleft':\n        return this.currentIndex >= this.maxRightIndex;\n      case 'panright':\n        return this.currentIndex <= 0;\n    }\n  }\n\n  private runProgress(betweenTime): Observable<any> {\n\n    return this._zone.runOutsideAngular(() => {\n      const howTimes = this.speed / betweenTime;\n      const everyIncrease = 100 / this.speed * betweenTime;\n      return interval(betweenTime).pipe(\n        tap(t => {\n          this.progressWidth = (t % howTimes) * everyIncrease;\n        }),\n        bufferCount(Math.round(howTimes), 0)\n      );\n    });\n  }\n\n  private getAutoNum() {\n    const currWidth = this.rootElmWidth;\n    // check user has had set breakpoint\n    if (this.breakpoint.length > 0) {\n      // get the last bigget point\n      const now = this.breakpoint.find((b) => {\n        return b.width >= currWidth;\n      });\n      // if find value, it is current width\n      if (now) {\n        return now.number;\n      }\n      return this.breakpoint[this.breakpoint.length - 1].number;\n    }\n\n    // system init show number\n    const initNum = 3;\n    // 610\n    if (currWidth > 300) {\n      return Math.floor(initNum + (currWidth / 200));\n    }\n    return initNum;\n  }\n\n  private addStyle(elm: HTMLElement, style: { [key: string]: string | number }) {\n    if (style) {\n      Object.keys(style).forEach((key) => {\n        const value = style[key];\n        this._renderer.setStyle(elm, key, value);\n      });\n    }\n  }\n\n  private setStyle(elm: HTMLElement, style: string, value: number) {\n    if (isPlatformBrowser(this.platformId)) {\n      this._renderer.setStyle(elm, style, `${value}px`);\n    } else {\n      this._renderer.setStyle(elm, style, `${value}%`);\n    }\n  }\n\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxHmCarouselDynamicDirective } from './ngx-hm-carousel-dynamic.directive';\nimport { NgxHmCarouselComponent } from './ngx-hm-carousel.component';\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    NgxHmCarouselComponent,\n    NgxHmCarouselDynamicDirective,\n    NgxHmCarouselItemDirective\n  ],\n  exports: [\n    NgxHmCarouselComponent,\n    NgxHmCarouselDynamicDirective,\n    NgxHmCarouselItemDirective\n  ]\n})\nexport class NgxHmCarouselModule { }\n"]}