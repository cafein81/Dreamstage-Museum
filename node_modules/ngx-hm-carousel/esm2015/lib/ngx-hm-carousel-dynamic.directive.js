/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
// TODO: ssr problem should not hide on ssr
// TODO: show number change should recaculate is show and init show number
export class NgxHmCarouselDynamicDirective {
    /**
     * @param {?} _view
     * @param {?} _template
     */
    constructor(_view, _template) {
        this._view = _view;
        this._template = _template;
        this.show = 1;
        this.compelete = false;
        this._view.clear();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentI(value) {
        if (!this.compelete) {
            /** @type {?} */
            const nextI = value + this.show;
            /** @type {?} */
            const prevI = value - this.show;
            if (this.index === 0 ||
                this.index === this.length - 1 ||
                this.index === nextI ||
                this.index === prevI ||
                this.index === value) {
                this._view.createEmbeddedView(this._template);
                this.compelete = true;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NgxHmCarouselDynamicDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxHmCarouselDynamic]'
            },] }
];
/** @nocollapse */
NgxHmCarouselDynamicDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
NgxHmCarouselDynamicDirective.propDecorators = {
    index: [{ type: Input, args: ['ngxHmCarouselDynamic',] }],
    length: [{ type: Input, args: ['ngxHmCarouselDynamicLength',] }],
    show: [{ type: Input, args: ['ngxHmCarouselDynamicShow',] }],
    currentI: [{ type: Input, args: ['ngxHmCarouselDynamicIndex',] }]
};
if (false) {
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.index;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.length;
    /** @type {?} */
    NgxHmCarouselDynamicDirective.prototype.show;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype.compelete;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._view;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselDynamicDirective.prototype._template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhtLWNhcm91c2VsLWR5bmFtaWMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhtLWNhcm91c2VsLyIsInNvdXJjZXMiOlsibGliL25neC1obS1jYXJvdXNlbC1keW5hbWljLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFPeEYsTUFBTSxPQUFPLDZCQUE2Qjs7Ozs7SUF5QnhDLFlBQ1UsS0FBdUIsRUFDdkIsU0FBMkI7UUFEM0IsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUF2QkYsU0FBSSxHQUFHLENBQUMsQ0FBQztRQW1CcEMsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUt4QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBeEJELElBQ0ksUUFBUSxDQUFDLEtBQWE7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7O2tCQUNiLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUk7O2tCQUN6QixLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJO1lBQy9CLElBQ0UsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDO2dCQUNoQixJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLO2dCQUNwQixJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUs7Z0JBQ3BCLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUNwQjtnQkFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7YUFDdkI7U0FDRjtJQUNILENBQUM7Ozs7SUFVRCxRQUFRO0lBQ1IsQ0FBQzs7O1lBbkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2FBQ25DOzs7O1lBTitDLGdCQUFnQjtZQUE3QixXQUFXOzs7b0JBUzNDLEtBQUssU0FBQyxzQkFBc0I7cUJBQzVCLEtBQUssU0FBQyw0QkFBNEI7bUJBQ2xDLEtBQUssU0FBQywwQkFBMEI7dUJBQ2hDLEtBQUssU0FBQywyQkFBMkI7Ozs7SUFIbEMsOENBQTZDOztJQUM3QywrQ0FBb0Q7O0lBQ3BELDZDQUE0Qzs7Ozs7SUFtQjVDLGtEQUEwQjs7Ozs7SUFHeEIsOENBQStCOzs7OztJQUMvQixrREFBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIFRPRE86IHNzciBwcm9ibGVtIHNob3VsZCBub3QgaGlkZSBvbiBzc3Jcbi8vIFRPRE86IHNob3cgbnVtYmVyIGNoYW5nZSBzaG91bGQgcmVjYWN1bGF0ZSBpcyBzaG93IGFuZCBpbml0IHNob3cgbnVtYmVyXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4SG1DYXJvdXNlbER5bmFtaWNdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hIbUNhcm91c2VsRHluYW1pY0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCduZ3hIbUNhcm91c2VsRHluYW1pYycpIGluZGV4OiBudW1iZXI7XG4gIEBJbnB1dCgnbmd4SG1DYXJvdXNlbER5bmFtaWNMZW5ndGgnKSBsZW5ndGg6IG51bWJlcjtcbiAgQElucHV0KCduZ3hIbUNhcm91c2VsRHluYW1pY1Nob3cnKSBzaG93ID0gMTtcbiAgQElucHV0KCduZ3hIbUNhcm91c2VsRHluYW1pY0luZGV4JylcbiAgc2V0IGN1cnJlbnRJKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAoIXRoaXMuY29tcGVsZXRlKSB7XG4gICAgICBjb25zdCBuZXh0SSA9IHZhbHVlICsgdGhpcy5zaG93O1xuICAgICAgY29uc3QgcHJldkkgPSB2YWx1ZSAtIHRoaXMuc2hvdztcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5pbmRleCA9PT0gMCB8fFxuICAgICAgICB0aGlzLmluZGV4ID09PSB0aGlzLmxlbmd0aCAtIDEgfHxcbiAgICAgICAgdGhpcy5pbmRleCA9PT0gbmV4dEkgfHxcbiAgICAgICAgdGhpcy5pbmRleCA9PT0gcHJldkkgfHxcbiAgICAgICAgdGhpcy5pbmRleCA9PT0gdmFsdWVcbiAgICAgICkge1xuICAgICAgICB0aGlzLl92aWV3LmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl90ZW1wbGF0ZSk7XG4gICAgICAgIHRoaXMuY29tcGVsZXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbXBlbGV0ZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX3ZpZXc6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBfdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICB0aGlzLl92aWV3LmNsZWFyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG59XG4iXX0=